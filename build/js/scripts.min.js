!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t,n){if(pe.isFunction(t))return pe.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return pe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(Se.test(t))return pe.filter(t,e,n);t=pe.filter(t,e)}return pe.grep(e,function(e){return pe.inArray(e,t)>-1!==n})}function o(e,t){do{e=e[t]}while(e&&1!==e.nodeType);return e}function r(e){var t={};return pe.each(e.match(Ae)||[],function(e,n){t[n]=!0}),t}function s(){ie.addEventListener?(ie.removeEventListener("DOMContentLoaded",a),e.removeEventListener("load",a)):(ie.detachEvent("onreadystatechange",a),e.detachEvent("onload",a))}function a(){(ie.addEventListener||"load"===e.event.type||"complete"===ie.readyState)&&(s(),pe.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(Le,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Pe.test(n)?pe.parseJSON(n):n)}catch(e){}pe.data(e,t,n)}else n=void 0}return n}function c(e){var t;for(t in e)if(("data"!==t||!pe.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function d(e,t,n,i){if(De(e)){var o,r,s=pe.expando,a=e.nodeType,l=a?pe.cache:e,c=a?e[s]:e[s]&&s;if(c&&l[c]&&(i||l[c].data)||void 0!==n||"string"!=typeof t)return c||(c=a?e[s]=ne.pop()||pe.guid++:s),l[c]||(l[c]=a?{}:{toJSON:pe.noop}),"object"!=typeof t&&"function"!=typeof t||(i?l[c]=pe.extend(l[c],t):l[c].data=pe.extend(l[c].data,t)),r=l[c],i||(r.data||(r.data={}),r=r.data),void 0!==n&&(r[pe.camelCase(t)]=n),"string"==typeof t?null==(o=r[t])&&(o=r[pe.camelCase(t)]):o=r,o}}function u(e,t,n){if(De(e)){var i,o,r=e.nodeType,s=r?pe.cache:e,a=r?e[pe.expando]:pe.expando;if(s[a]){if(t&&(i=n?s[a]:s[a].data)){pe.isArray(t)?t=t.concat(pe.map(t,pe.camelCase)):t in i?t=[t]:(t=pe.camelCase(t),t=t in i?[t]:t.split(" ")),o=t.length;for(;o--;)delete i[t[o]];if(n?!c(i):!pe.isEmptyObject(i))return}(n||(delete s[a].data,c(s[a])))&&(r?pe.cleanData([e],!0):ue.deleteExpando||s!=s.window?delete s[a]:s[a]=void 0)}}}function p(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return pe.css(e,t,"")},l=a(),c=n&&n[3]||(pe.cssNumber[t]?"":"px"),d=(pe.cssNumber[t]||"px"!==c&&+l)&&Me.exec(pe.css(e,t));if(d&&d[3]!==c){c=c||d[3],n=n||[],d=+l||1;do{r=r||".5",d/=r,pe.style(e,t,d+c)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}function h(e){var t=Re.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function f(e,t){var n,i,o=0,r=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!r)for(r=[],n=e.childNodes||e;null!=(i=n[o]);o++)!t||pe.nodeName(i,t)?r.push(i):pe.merge(r,f(i,t));return void 0===t||t&&pe.nodeName(e,t)?pe.merge([e],r):r}function g(e,t){for(var n,i=0;null!=(n=e[i]);i++)pe._data(n,"globalEval",!t||pe._data(t[i],"globalEval"))}function m(e){Ne.test(e.type)&&(e.defaultChecked=e.checked)}function v(e,t,n,i,o){for(var r,s,a,l,c,d,u,p=e.length,v=h(t),y=[],b=0;b<p;b++)if((s=e[b])||0===s)if("object"===pe.type(s))pe.merge(y,s.nodeType?[s]:s);else if(Be.test(s)){for(l=l||v.appendChild(t.createElement("div")),c=(qe.exec(s)||["",""])[1].toLowerCase(),u=We[c]||We._default,l.innerHTML=u[1]+pe.htmlPrefilter(s)+u[2],r=u[0];r--;)l=l.lastChild;if(!ue.leadingWhitespace&&Fe.test(s)&&y.push(t.createTextNode(Fe.exec(s)[0])),!ue.tbody)for(s="table"!==c||Xe.test(s)?"<table>"!==u[1]||Xe.test(s)?0:l:l.firstChild,r=s&&s.childNodes.length;r--;)pe.nodeName(d=s.childNodes[r],"tbody")&&!d.childNodes.length&&s.removeChild(d);for(pe.merge(y,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else y.push(t.createTextNode(s));for(l&&v.removeChild(l),ue.appendChecked||pe.grep(f(y,"input"),m),b=0;s=y[b++];)if(i&&pe.inArray(s,i)>-1)o&&o.push(s);else if(a=pe.contains(s.ownerDocument,s),l=f(v.appendChild(s),"script"),a&&g(l),n)for(r=0;s=l[r++];)ze.test(s.type||"")&&n.push(s);return l=null,v}function y(){return!0}function b(){return!1}function x(){try{return ie.activeElement}catch(e){}}function w(e,t,n,i,o,r){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)w(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=b;else if(!o)return e;return 1===r&&(s=o,o=function(e){return pe().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,o,i,n)})}function S(e,t){return pe.nodeName(e,"table")&&pe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function T(e){return e.type=(null!==pe.find.attr(e,"type"))+"/"+e.type,e}function $(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function C(e,t){if(1===t.nodeType&&pe.hasData(e)){var n,i,o,r=pe._data(e),s=pe._data(t,r),a=r.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,o=a[n].length;i<o;i++)pe.event.add(t,n,a[n][i])}s.data&&(s.data=pe.extend({},s.data))}}function k(e,t){var n,i,o;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ue.noCloneEvent&&t[pe.expando]){o=pe._data(t);for(i in o.events)pe.removeEvent(t,i,o.handle);t.removeAttribute(pe.expando)}"script"===n&&t.text!==e.text?(T(t).text=e.text,$(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ue.html5Clone&&e.innerHTML&&!pe.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Ne.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function A(e,t,n,i){t=re.apply([],t);var o,r,s,a,l,c,d=0,u=e.length,p=u-1,h=t[0],g=pe.isFunction(h);if(g||u>1&&"string"==typeof h&&!ue.checkClone&&tt.test(h))return e.each(function(o){var r=e.eq(o);g&&(t[0]=h.call(this,o,r.html())),A(r,t,n,i)});if(u&&(c=v(t,e[0].ownerDocument,!1,e,i),o=c.firstChild,1===c.childNodes.length&&(c=o),o||i)){for(a=pe.map(f(c,"script"),T),s=a.length;d<u;d++)r=c,d!==p&&(r=pe.clone(r,!0,!0),s&&pe.merge(a,f(r,"script"))),n.call(e[d],r,d);if(s)for(l=a[a.length-1].ownerDocument,pe.map(a,$),d=0;d<s;d++)r=a[d],ze.test(r.type||"")&&!pe._data(r,"globalEval")&&pe.contains(l,r)&&(r.src?pe._evalUrl&&pe._evalUrl(r.src):pe.globalEval((r.text||r.textContent||r.innerHTML||"").replace(it,"")));c=o=null}return e}function _(e,t,n){for(var i,o=t?pe.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||pe.cleanData(f(i)),i.parentNode&&(n&&pe.contains(i.ownerDocument,i)&&g(f(i,"script")),i.parentNode.removeChild(i));return e}function E(e,t){var n=pe(t.createElement(e)).appendTo(t.body),i=pe.css(n[0],"display");return n.detach(),i}function D(e){var t=ie,n=at[e];return n||(n=E(e,t),"none"!==n&&n||(st=(st||pe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(st[0].contentWindow||st[0].contentDocument).document,t.write(),t.close(),n=E(e,t),st.detach()),at[e]=n),n}function P(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function L(e){if(e in St)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=wt.length;n--;)if((e=wt[n]+t)in St)return e}function O(e,t){for(var n,i,o,r=[],s=0,a=e.length;s<a;s++)i=e[s],i.style&&(r[s]=pe._data(i,"olddisplay"),n=i.style.display,t?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&He(i)&&(r[s]=pe._data(i,"olddisplay",D(i.nodeName)))):(o=He(i),(n&&"none"!==n||!o)&&pe._data(i,"olddisplay",o?n:pe.css(i,"display"))));for(s=0;s<a;s++)i=e[s],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?r[s]||"":"none"));return e}function M(e,t,n){var i=yt.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function j(e,t,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===t?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=pe.css(e,n+je[r],!0,o)),i?("content"===n&&(s-=pe.css(e,"padding"+je[r],!0,o)),"margin"!==n&&(s-=pe.css(e,"border"+je[r]+"Width",!0,o))):(s+=pe.css(e,"padding"+je[r],!0,o),"padding"!==n&&(s+=pe.css(e,"border"+je[r]+"Width",!0,o)));return s}function H(e,t,n){var i=!0,o="width"===t?e.offsetWidth:e.offsetHeight,r=pt(e),s=ue.boxSizing&&"border-box"===pe.css(e,"boxSizing",!1,r);if(o<=0||null==o){if(o=ht(e,t,r),(o<0||null==o)&&(o=e.style[t]),ct.test(o))return o;i=s&&(ue.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+j(e,t,n||(s?"border":"content"),i,r)+"px"}function I(e,t,n,i,o){return new I.prototype.init(e,t,n,i,o)}function N(){return e.setTimeout(function(){Tt=void 0}),Tt=pe.now()}function q(e,t){var n,i={height:e},o=0;for(t=t?1:0;o<4;o+=2-t)n=je[o],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function z(e,t,n){for(var i,o=(W.tweeners[t]||[]).concat(W.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function F(e,t,n){var i,o,r,s,a,l,c,d=this,u={},p=e.style,h=e.nodeType&&He(e),f=pe._data(e,"fxshow");n.queue||(a=pe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,pe.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=pe.css(e,"display"),"inline"===("none"===c?pe._data(e,"olddisplay")||D(e.nodeName):c)&&"none"===pe.css(e,"float")&&(ue.inlineBlockNeedsLayout&&"inline"!==D(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",ue.shrinkWrapBlocks()||d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in t)if(o=t[i],Ct.exec(o)){if(delete t[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!f||void 0===f[i])continue;h=!0}u[i]=f&&f[i]||pe.style(e,i)}else c=void 0;if(pe.isEmptyObject(u))"inline"===("none"===c?D(e.nodeName):c)&&(p.display=c);else{f?"hidden"in f&&(h=f.hidden):f=pe._data(e,"fxshow",{}),r&&(f.hidden=!h),h?pe(e).show():d.done(function(){pe(e).hide()}),d.done(function(){var t;pe._removeData(e,"fxshow");for(t in u)pe.style(e,t,u[t])});for(i in u)s=z(h?f[i]:0,i,d),i in f||(f[i]=s.start,h&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function R(e,t){var n,i,o,r,s;for(n in e)if(i=pe.camelCase(n),o=t[i],r=e[n],pe.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=pe.cssHooks[i])&&"expand"in s){r=s.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=o)}else t[i]=o}function W(e,t,n){var i,o,r=0,s=W.prefilters.length,a=pe.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=Tt||N(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,r=1-i,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(r);return a.notifyWith(e,[c,r,n]),r<1&&l?n:(a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Tt||N(),duration:n.duration,tweens:[],createTween:function(t,n){var i=pe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),d=c.props;for(R(d,c.opts.specialEasing);r<s;r++)if(i=W.prefilters[r].call(c,e,d,c.opts))return pe.isFunction(i.stop)&&(pe._queueHooks(c.elem,c.opts.queue).stop=pe.proxy(i.stop,i)),i;return pe.map(d,z,c),pe.isFunction(c.opts.start)&&c.opts.start.call(e,c),pe.fx.timer(pe.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function B(e){return pe.attr(e,"class")||""}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Ae)||[];if(pe.isFunction(n))for(;i=r[o++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function U(e,t,n,i){function o(a){var l;return r[a]=!0,pe.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),l}var r={},s=e===Zt;return o(t.dataTypes[0])||!r["*"]&&o("*")}function Y(e,t){var n,i,o=pe.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n||(n={}))[i]=t[i]);return n&&pe.extend(!0,e,n),e}function G(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(s in a)if(a[s]&&a[s].test(o)){l.unshift(s);break}if(l[0]in n)r=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){r=s;break}i||(i=s)}r=r||i}if(r)return r!==l[0]&&l.unshift(r),n[r]}function V(e,t,n,i){var o,r,s,a,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if(a=o.split(" "),a[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}function Z(e){return e.style&&e.style.display||pe.css(e,"display")}function Q(e){if(!pe.contains(e.ownerDocument||ie,e))return!0;for(;e&&1===e.nodeType;){if("none"===Z(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}function K(e,t,n,i){var o;if(pe.isArray(t))pe.each(t,function(t,o){n||tn.test(e)?i(e,o):K(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)});else if(n||"object"!==pe.type(t))i(e,t);else for(o in t)K(e+"["+o+"]",t[o],n,i)}function J(){try{return new e.XMLHttpRequest}catch(e){}}function ee(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function te(e){return pe.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var ne=[],ie=e.document,oe=ne.slice,re=ne.concat,se=ne.push,ae=ne.indexOf,le={},ce=le.toString,de=le.hasOwnProperty,ue={},pe=function(e,t){return new pe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,fe=/^-ms-/,ge=/-([\da-z])/gi,me=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:"1.12.4",constructor:pe,selector:"",length:0,toArray:function(){return oe.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:oe.call(this)},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(oe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:ne.sort,splice:ne.splice},pe.extend=pe.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||pe.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(o=arguments[a]))for(i in o)e=s[i],n=o[i],s!==n&&(c&&n&&(pe.isPlainObject(n)||(t=pe.isArray(n)))?(t?(t=!1,r=e&&pe.isArray(e)?e:[]):r=e&&pe.isPlainObject(e)?e:{},s[i]=pe.extend(c,r,n)):void 0!==n&&(s[i]=n));return s},pe.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isArray:Array.isArray||function(e){return"array"===pe.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!pe.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==pe.type(e)||e.nodeType||pe.isWindow(e))return!1;try{if(e.constructor&&!de.call(e,"constructor")&&!de.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!ue.ownFirst)for(t in e)return de.call(e,t);for(t in e);return void 0===t||de.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(t){t&&pe.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(fe,"ms-").replace(ge,me)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var i,o=0;if(n(e))for(i=e.length;o<i&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?pe.merge(i,"string"==typeof e?[e]:e):se.call(i,e)),i},inArray:function(e,t,n){var i;if(t){if(ae)return ae.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;)e[o++]=t[i++];if(n!==n)for(;void 0!==t[i];)e[o++]=t[i++];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,i){var o,r,s=0,a=[];if(n(e))for(o=e.length;s<o;s++)null!=(r=t(e[s],s,i))&&a.push(r);else for(s in e)null!=(r=t(e[s],s,i))&&a.push(r);return re.apply([],a)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(o=e[t],t=e,e=o),pe.isFunction(e))return n=oe.call(arguments,2),i=function(){return e.apply(t||this,n.concat(oe.call(arguments)))},i.guid=e.guid=e.guid||pe.guid++,i},now:function(){return+new Date},support:ue}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=ne[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var ve=function(e){function t(e,t,n,i){var o,r,s,a,c,u,p,h,f=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!i&&((t?t.ownerDocument||t:N)!==D&&E(t),t=t||D,L)){if(11!==g&&(u=ge.exec(e)))if(o=u[1]){if(9===g){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(f&&(s=f.getElementById(o))&&H(t,s)&&s.id===o)return n.push(s),n}else{if(u[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((o=u[3])&&b.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(o)),n}if(b.qsa&&!W[e+" "]&&(!O||!O.test(e))){if(1!==g)f=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(ve,"\\$&"):t.setAttribute("id",a=I),p=T(e),r=p.length,c=de.test(a)?"#"+a:"[id='"+a+"']";r--;)p[r]=c+" "+d(p[r]);h=p.join(","),f=me.test(e)&&l(t.parentNode)||t}if(h)try{return Z.apply(n,f.querySelectorAll(h)),n}catch(e){}finally{a===I&&t.removeAttribute("id")}}}return C(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[I]=!0,e}function o(e){var t=D.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return i(function(t){return t=+t,i(function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function u(e,t,n){var i=t.dir,o=n&&"parentNode"===i,r=z++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var a,l,c,d=[q,r];if(s){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||o){if(c=t[I]||(t[I]={}),l=c[t.uniqueID]||(c[t.uniqueID]={}),(a=l[i])&&a[0]===q&&a[1]===r)return d[2]=a[2];if(l[i]=d,d[2]=e(t,n,s))return!0}}}function p(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var o=0,r=n.length;o<r;o++)t(e,n[o],i);return i}function f(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function g(e,t,n,o,r,s){return o&&!o[I]&&(o=g(o)),r&&!r[I]&&(r=g(r,s)),i(function(i,s,a,l){var c,d,u,p=[],g=[],m=s.length,v=i||h(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?v:f(v,p,e,a,l),b=n?r||(i?e:m||o)?[]:s:y;if(n&&n(y,b,a,l),o)for(c=f(b,g),o(c,[],a,l),d=c.length;d--;)(u=c[d])&&(b[g[d]]=!(y[g[d]]=u));if(i){if(r||e){if(r){for(c=[],d=b.length;d--;)(u=b[d])&&c.push(y[d]=u);r(null,b=[],c,l)}for(d=b.length;d--;)(u=b[d])&&(c=r?K(i,u):p[d])>-1&&(i[c]=!(s[c]=u))}}else b=f(b===s?b.splice(m,b.length):b),r?r(null,s,b,l):Z.apply(s,b)})}function m(e){for(var t,n,i,o=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],a=r?1:0,l=u(function(e){return e===t},s,!0),c=u(function(e){return K(t,e)>-1},s,!0),h=[function(e,n,i){var o=!r&&(i||n!==k)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,o}];a<o;a++)if(n=x.relative[e[a].type])h=[u(p(h),n)];else{if(n=x.filter[e[a].type].apply(null,e[a].matches),n[I]){for(i=++a;i<o&&!x.relative[e[i].type];i++);return g(a>1&&p(h),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(re,"$1"),n,a<i&&m(e.slice(a,i)),i<o&&m(e=e.slice(i)),i<o&&d(e))}h.push(n)}return p(h)}function v(e,n){var o=n.length>0,r=e.length>0,s=function(i,s,a,l,c){var d,u,p,h=0,g="0",m=i&&[],v=[],y=k,b=i||r&&x.find.TAG("*",c),w=q+=null==y?1:Math.random()||.1,S=b.length;for(c&&(k=s===D||s||c);g!==S&&null!=(d=b[g]);g++){if(r&&d){for(u=0,s||d.ownerDocument===D||(E(d),a=!L);p=e[u++];)if(p(d,s||D,a)){l.push(d);break}c&&(q=w)}o&&((d=!p&&d)&&h--,i&&m.push(d))}if(h+=g,o&&g!==h){for(u=0;p=n[u++];)p(m,v,s,a);if(i){if(h>0)for(;g--;)m[g]||v[g]||(v[g]=G.call(l));v=f(v)}Z.apply(l,v),c&&!i&&v.length>0&&h+n.length>1&&t.uniqueSort(l)}return c&&(q=w,k=y),m};return o?i(s):s}var y,b,x,w,S,T,$,C,k,A,_,E,D,P,L,O,M,j,H,I="sizzle"+1*new Date,N=e.document,q=0,z=0,F=n(),R=n(),W=n(),B=function(e,t){return e===t&&(_=!0),0},X=1<<31,U={}.hasOwnProperty,Y=[],G=Y.pop,V=Y.push,Z=Y.push,Q=Y.slice,K=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),de=new RegExp("^"+te+"$"),ue={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,he=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=/'|\\/g,ye=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),be=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},xe=function(){E()};try{Z.apply(Y=Q.call(N.childNodes),N.childNodes),Y[N.childNodes.length].nodeType}catch(e){Z={apply:Y.length?function(e,t){V.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}b=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},E=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:N;return i!==D&&9===i.nodeType&&i.documentElement?(D=i,P=D.documentElement,L=!S(D),(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),b.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),b.getElementsByTagName=o(function(e){return e.appendChild(D.createComment("")),!e.getElementsByTagName("*").length}),b.getElementsByClassName=fe.test(D.getElementsByClassName),b.getById=o(function(e){return P.appendChild(e).id=I,!D.getElementsByName||!D.getElementsByName(I).length}),b.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}},x.filter.ID=function(e){var t=e.replace(ye,be);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(ye,be);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),x.find.TAG=b.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):b.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=b.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},M=[],O=[],(b.qsa=fe.test(D.querySelectorAll))&&(o(function(e){P.appendChild(e).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+I+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+I+"+*").length||O.push(".#.+[+~]")}),o(function(e){var t=D.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ee+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(b.matchesSelector=fe.test(j=P.matches||P.webkitMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector||P.msMatchesSelector))&&o(function(e){b.disconnectedMatch=j.call(e,"div"),j.call(e,"[s!='']:x"),M.push("!=",ie)}),O=O.length&&new RegExp(O.join("|")),M=M.length&&new RegExp(M.join("|")),t=fe.test(P.compareDocumentPosition),H=t||fe.test(P.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return _=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!b.sortDetached&&t.compareDocumentPosition(e)===n?e===D||e.ownerDocument===N&&H(N,e)?-1:t===D||t.ownerDocument===N&&H(N,t)?1:A?K(A,e)-K(A,t):0:4&n?-1:1)}:function(e,t){if(e===t)return _=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],l=[t];if(!o||!r)return e===D?-1:t===D?1:o?-1:r?1:A?K(A,e)-K(A,t):0;if(o===r)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===N?-1:l[i]===N?1:0},D):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&E(e),n=n.replace(le,"='$1']"),b.matchesSelector&&L&&!W[n+" "]&&(!M||!M.test(n))&&(!O||!O.test(n)))try{var i=j.call(e,n);if(i||b.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&E(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&E(e);var n=x.attrHandle[t.toLowerCase()],i=n&&U.call(x.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:b.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,o=0;if(_=!b.detectDuplicates,A=!b.sortStable&&e.slice(0),e.sort(B),_){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return A=null,e},w=t.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=w(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=w(t);return n},x=t.selectors={cacheLength:50,createPseudo:i,match:ue,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,be),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ue.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=F[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&F(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(o){var r=t.attr(o,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,h,f,g=r!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(p=m,u=p[I]||(p[I]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],h=c[0]===q&&c[1],b=h&&c[2],p=h&&m.childNodes[h];p=++h&&p&&p[g]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){d[e]=[q,h,b];break}}else if(y&&(p=t,u=p[I]||(p[I]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],h=c[0]===q&&c[1],b=h),
!1===b)for(;(p=++h&&p&&p[g]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&(u=p[I]||(p[I]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),d[e]=[q,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var o,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[I]?r(n):r.length>1?(o=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,o=r(e,n),s=o.length;s--;)i=K(e,o[s]),e[i]=!(t[i]=o[s])}):function(e){return r(e,0,o)}):r}},pseudos:{not:i(function(e){var t=[],n=[],o=$(e.replace(re,"$1"));return o[I]?i(function(e,t,n,i){for(var r,s=o(e,null,i,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))}):function(e,i,r){return t[0]=e,o(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ye,be),function(t){return(t.textContent||t.innerText||w(t)).indexOf(e)>-1}}),lang:i(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,be).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===P},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return he.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:a(function(){return[0]}),last:a(function(e,t){return[t-1]}),eq:a(function(e,t,n){return[n<0?n+t:n]}),even:a(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:a(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:a(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:a(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},x.pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(y);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,T=t.tokenize=function(e,n){var i,o,r,s,a,l,c,d=R[e+" "];if(d)return n?0:d.slice(0);for(a=e,l=[],c=x.preFilter;a;){i&&!(o=se.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=ae.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(re," ")}),a=a.slice(i.length));for(s in x.filter)!(o=ue[s].exec(a))||c[s]&&!(o=c[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):R(e,l).slice(0)},$=t.compile=function(e,t){var n,i=[],o=[],r=W[e+" "];if(!r){for(t||(t=T(e)),n=t.length;n--;)r=m(t[n]),r[I]?i.push(r):o.push(r);r=W(e,v(o,i)),r.selector=e}return r},C=t.select=function(e,t,n,i){var o,r,s,a,c,u="function"==typeof e&&e,p=!i&&T(e=u.selector||e);if(n=n||[],1===p.length){if(r=p[0]=p[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&b.getById&&9===t.nodeType&&L&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ye,be),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=ue.needsContext.test(e)?0:r.length;o--&&(s=r[o],!x.relative[a=s.type]);)if((c=x.find[a])&&(i=c(s.matches[0].replace(ye,be),me.test(r[0].type)&&l(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&d(r)))return Z.apply(n,i),n;break}}return(u||$(e,p))(i,t,!L,n,!t||me.test(e)&&l(t.parentNode)||t),n},b.sortStable=I.split("").sort(B).join("")===I,b.detectDuplicates=!!_,E(),b.sortDetached=o(function(e){return 1&e.compareDocumentPosition(D.createElement("div"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),b.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);pe.find=ve,pe.expr=ve.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=ve.uniqueSort,pe.text=ve.getText,pe.isXMLDoc=ve.isXML,pe.contains=ve.contains;var ye=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&pe(e).is(n))break;i.push(e)}return i},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},xe=pe.expr.match.needsContext,we=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Se=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?pe.find.matchesSelector(i,e)?[i]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n=[],i=this,o=i.length;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<o;t++)if(pe.contains(i[t],this))return!0}));for(t=0;t<o;t++)pe.find(e,i[t],n);return n=this.pushStack(o>1?pe.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&xe.test(e)?pe(e):e||[],!1).length}});var Te,$e=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(pe.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:$e.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ie,!0)),we.test(i[1])&&pe.isPlainObject(t))for(i in t)pe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}if((o=ie.getElementById(i[2]))&&o.parentNode){if(o.id!==i[2])return Te.find(e);this.length=1,this[0]=o}return this.context=ie,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==n.ready?n.ready(e):e(pe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),pe.makeArray(e,this))}).prototype=pe.fn,Te=pe(ie);var Ce=/^(?:parents|prev(?:Until|All))/,ke={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t,n=pe(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(pe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,o=this.length,r=[],s=xe.test(e)||"string"!=typeof e?pe(e,t||this.context):0;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?pe.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?pe.inArray(this[0],pe(e)):pe.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ye(e,"parentNode")},parentsUntil:function(e,t,n){return ye(e,"parentNode",n)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return ye(e,"nextSibling")},prevAll:function(e){return ye(e,"previousSibling")},nextUntil:function(e,t,n){return ye(e,"nextSibling",n)},prevUntil:function(e,t,n){return ye(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return pe.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:pe.merge([],e.childNodes)}},function(e,t){pe.fn[e]=function(n,i){var o=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=pe.filter(i,o)),this.length>1&&(ke[e]||(o=pe.uniqueSort(o)),Ce.test(e)&&(o=o.reverse())),this.pushStack(o)}});var Ae=/\S+/g;pe.Callbacks=function(e){e="string"==typeof e?r(e):pe.extend({},e);var t,n,i,o,s=[],a=[],l=-1,c=function(){for(o=e.once,i=t=!0;a.length;l=-1)for(n=a.shift();++l<s.length;)!1===s[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=s.length,n=!1);e.memory||(n=!1),t=!1,o&&(s=n?[]:"")},d={add:function(){return s&&(n&&!t&&(l=s.length-1,a.push(n)),function t(n){pe.each(n,function(n,i){pe.isFunction(i)?e.unique&&d.has(i)||s.push(i):i&&i.length&&"string"!==pe.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,s,n))>-1;)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?pe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return o=!0,n||d.disable(),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},pe.extend({Deferred:function(e){var t=[["resolve","done",pe.Callbacks("once memory"),"resolved"],["reject","fail",pe.Callbacks("once memory"),"rejected"],["notify","progress",pe.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var e=arguments;return pe.Deferred(function(n){pe.each(t,function(t,r){var s=pe.isFunction(e[t])&&e[t];o[r[1]](function(){var e=s&&s.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?pe.extend(e,i):i}},o={};return i.pipe=i.then,pe.each(t,function(e,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t,n,i,o=0,r=oe.call(arguments),s=r.length,a=1!==s||e&&pe.isFunction(e.promise)?s:0,l=1===a?e:pe.Deferred(),c=function(e,n,i){return function(o){n[e]=this,i[e]=arguments.length>1?oe.call(arguments):o,i===t?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);o<s;o++)r[o]&&pe.isFunction(r[o].promise)?r[o].promise().progress(c(o,n,t)).done(c(o,i,r)).fail(l.reject):--a;return a||l.resolveWith(i,r),l.promise()}});var _e;pe.fn.ready=function(e){return pe.ready.promise().done(e),this},pe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?pe.readyWait++:pe.ready(!0)},ready:function(e){(!0===e?--pe.readyWait:pe.isReady)||(pe.isReady=!0,!0!==e&&--pe.readyWait>0||(_e.resolveWith(ie,[pe]),pe.fn.triggerHandler&&(pe(ie).triggerHandler("ready"),pe(ie).off("ready"))))}}),pe.ready.promise=function(t){if(!_e)if(_e=pe.Deferred(),"complete"===ie.readyState||"loading"!==ie.readyState&&!ie.documentElement.doScroll)e.setTimeout(pe.ready);else if(ie.addEventListener)ie.addEventListener("DOMContentLoaded",a),e.addEventListener("load",a);else{ie.attachEvent("onreadystatechange",a),e.attachEvent("onload",a);var n=!1;try{n=null==e.frameElement&&ie.documentElement}catch(e){}n&&n.doScroll&&function t(){if(!pe.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}s(),pe.ready()}}()}return _e.promise(t)},pe.ready.promise();var Ee;for(Ee in pe(ue))break;ue.ownFirst="0"===Ee,ue.inlineBlockNeedsLayout=!1,pe(function(){var e,t,n,i;(n=ie.getElementsByTagName("body")[0])&&n.style&&(t=ie.createElement("div"),i=ie.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),void 0!==t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ue.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=ie.createElement("div");ue.deleteExpando=!0;try{delete e.test}catch(e){ue.deleteExpando=!1}e=null}();var De=function(e){var t=pe.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)},Pe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Le=/([A-Z])/g;pe.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?pe.cache[e[pe.expando]]:e[pe.expando])&&!c(e)},data:function(e,t,n){return d(e,t,n)},removeData:function(e,t){return u(e,t)},_data:function(e,t,n){return d(e,t,n,!0)},_removeData:function(e,t){return u(e,t,!0)}}),pe.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=pe.data(r),1===r.nodeType&&!pe._data(r,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=pe.camelCase(i.slice(5)),l(r,i,o[i])));pe._data(r,"parsedAttrs",!0)}return o}return"object"==typeof e?this.each(function(){pe.data(this,e)}):arguments.length>1?this.each(function(){pe.data(this,e,t)}):r?l(r,e,pe.data(r,e)):void 0},removeData:function(e){return this.each(function(){pe.removeData(this,e)})}}),pe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=pe._data(e,t),n&&(!i||pe.isArray(n)?i=pe._data(e,t,pe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),i=n.length,o=n.shift(),r=pe._queueHooks(e,t),s=function(){pe.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return pe._data(e,n)||pe._data(e,n,{empty:pe.Callbacks("once memory").add(function(){pe._removeData(e,t+"queue"),pe._removeData(e,n)})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=pe.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=pe._data(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}}),function(){var e;ue.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,i;return(n=ie.getElementsByTagName("body")[0])&&n.style?(t=ie.createElement("div"),i=ie.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),void 0!==t.style.zoom&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(ie.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(i),e):void 0}}();var Oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Me=new RegExp("^(?:([+-])=|)("+Oe+")([a-z%]*)$","i"),je=["Top","Right","Bottom","Left"],He=function(e,t){return e=t||e,"none"===pe.css(e,"display")||!pe.contains(e.ownerDocument,e)},Ie=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===pe.type(n)){o=!0;for(a in n)Ie(e,t,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,pe.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(pe(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},Ne=/^(?:checkbox|radio)$/i,qe=/<([\w:-]+)/,ze=/^$|\/(?:java|ecma)script/i,Fe=/^\s+/,Re="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var e=ie.createElement("div"),t=ie.createDocumentFragment(),n=ie.createElement("input");e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ue.leadingWhitespace=3===e.firstChild.nodeType,ue.tbody=!e.getElementsByTagName("tbody").length,ue.htmlSerialize=!!e.getElementsByTagName("link").length,ue.html5Clone="<:nav></:nav>"!==ie.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,t.appendChild(n),ue.appendChecked=n.checked,e.innerHTML="<textarea>x</textarea>",ue.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=ie.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),ue.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.noCloneEvent=!!e.addEventListener,e[pe.expando]=1,ue.attributes=!e.getAttribute(pe.expando)}();var We={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ue.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};We.optgroup=We.option,We.tbody=We.tfoot=We.colgroup=We.caption=We.thead,We.th=We.td;var Be=/<|&#?\w+;/,Xe=/<tbody/i;!function(){var t,n,i=ie.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ue[t]=n in e)||(i.setAttribute(n,"t"),ue[t]=!1===i.attributes[n].expando);i=null}();var Ue=/^(?:input|select|textarea)$/i,Ye=/^key/,Ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ve=/^(?:focusinfocus|focusoutblur)$/,Ze=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,h,f,g,m=pe._data(e);if(m){for(n.handler&&(l=n,n=l.handler,o=l.selector),n.guid||(n.guid=pe.guid++),(s=m.events)||(s=m.events={}),(d=m.handle)||(d=m.handle=function(e){return void 0===pe||e&&pe.event.triggered===e.type?void 0:pe.event.dispatch.apply(d.elem,arguments)},d.elem=e),t=(t||"").match(Ae)||[""],a=t.length;a--;)r=Ze.exec(t[a])||[],h=g=r[1],f=(r[2]||"").split(".").sort(),h&&(c=pe.event.special[h]||{},h=(o?c.delegateType:c.bindType)||h,c=pe.event.special[h]||{},u=pe.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&pe.expr.match.needsContext.test(o),namespace:f.join(".")},l),(p=s[h])||(p=s[h]=[],p.delegateCount=0,c.setup&&!1!==c.setup.call(e,i,f,d)||(e.addEventListener?e.addEventListener(h,d,!1):e.attachEvent&&e.attachEvent("on"+h,d))),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),pe.event.global[h]=!0);e=null}},remove:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,h,f,g,m=pe.hasData(e)&&pe._data(e);if(m&&(d=m.events)){for(t=(t||"").match(Ae)||[""],c=t.length;c--;)if(a=Ze.exec(t[c])||[],h=g=a[1],f=(a[2]||"").split(".").sort(),h){for(u=pe.event.special[h]||{},h=(i?u.delegateType:u.bindType)||h,p=d[h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=r=p.length;r--;)s=p[r],!o&&g!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(p.splice(r,1),s.selector&&p.delegateCount--,u.remove&&u.remove.call(e,s));l&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,f,m.handle)||pe.removeEvent(e,h,m.handle),delete d[h])}else for(h in d)pe.event.remove(e,h+t[c],n,i,!0);pe.isEmptyObject(d)&&(delete m.handle,pe._removeData(e,"events"))}},trigger:function(t,n,i,o){var r,s,a,l,c,d,u,p=[i||ie],h=de.call(t,"type")?t.type:t,f=de.call(t,"namespace")?t.namespace.split("."):[];if(a=d=i=i||ie,3!==i.nodeType&&8!==i.nodeType&&!Ve.test(h+pe.event.triggered)&&(h.indexOf(".")>-1&&(f=h.split("."),h=f.shift(),f.sort()),s=h.indexOf(":")<0&&"on"+h,t=t[pe.expando]?t:new pe.Event(h,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:pe.makeArray(n,[t]),c=pe.event.special[h]||{},o||!c.trigger||!1!==c.trigger.apply(i,n))){if(!o&&!c.noBubble&&!pe.isWindow(i)){for(l=c.delegateType||h,Ve.test(l+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),d=a;d===(i.ownerDocument||ie)&&p.push(d.defaultView||d.parentWindow||e)}for(u=0;(a=p[u++])&&!t.isPropagationStopped();)t.type=u>1?l:c.bindType||h,r=(pe._data(a,"events")||{})[t.type]&&pe._data(a,"handle"),r&&r.apply(a,n),(r=s&&a[s])&&r.apply&&De(a)&&(t.result=r.apply(a,n),!1===t.result&&t.preventDefault());if(t.type=h,!o&&!t.isDefaultPrevented()&&(!c._default||!1===c._default.apply(p.pop(),n))&&De(i)&&s&&i[h]&&!pe.isWindow(i)){d=i[s],d&&(i[s]=null),pe.event.triggered=h;try{i[h]()}catch(e){}pe.event.triggered=void 0,d&&(i[s]=d)}return t.result}},dispatch:function(e){e=pe.event.fix(e);var t,n,i,o,r,s=[],a=oe.call(arguments),l=(pe._data(this,"events")||{})[e.type]||[],c=pe.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(s=pe.event.handlers.call(this,e,l),t=0;(o=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(r.namespace)||(e.handleObj=r,e.data=r.data,void 0!==(i=((pe.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,o,r,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<a;n++)r=t[n],o=r.selector+" ",void 0===i[o]&&(i[o]=r.needsContext?pe(o,this).index(l)>-1:pe.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[pe.expando])return e;var t,n,i,o=e.type,r=e,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=Ge.test(o)?this.mouseHooks:Ye.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new pe.Event(r),t=i.length;t--;)n=i[t],e[n]=r[n];return e.target||(e.target=r.srcElement||ie),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,r):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,r=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(i=e.target.ownerDocument||ie,o=i.documentElement,n=i.body,e.pageX=t.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===r||(e.which=1&r?1:2&r?3:4&r?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(pe.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return pe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var i=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(i,null,t),i.isDefaultPrevented()&&n.preventDefault()}},pe.removeEvent=ie.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var i="on"+t;e.detachEvent&&(void 0===e[i]&&(e[i]=null),e.detachEvent(i,n))},pe.Event=function(e,t){if(!(this instanceof pe.Event))return new pe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?y:b):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),this[pe.expando]=!0},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=y,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=y,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=y,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||pe.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),ue.submit||(pe.event.special.submit={setup:function(){if(pe.nodeName(this,"form"))return!1;pe.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=pe.nodeName(t,"input")||pe.nodeName(t,"button")?pe.prop(t,"form"):void 0;n&&!pe._data(n,"submit")&&(pe.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),pe._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&pe.event.simulate("submit",this.parentNode,e))},teardown:function(){if(pe.nodeName(this,"form"))return!1;pe.event.remove(this,"._submit")}}),ue.change||(pe.event.special.change={setup:function(){if(Ue.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(pe.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),pe.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),pe.event.simulate("change",this,e)})),!1;pe.event.add(this,"beforeactivate._change",function(e){var t=e.target;Ue.test(t.nodeName)&&!pe._data(t,"change")&&(pe.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||pe.event.simulate("change",this.parentNode,e)}),pe._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return pe.event.remove(this,"._change"),!Ue.test(this.nodeName)}}),ue.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=pe._data(i,t);o||i.addEventListener(e,n,!0),pe._data(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=pe._data(i,t)-1;o?pe._data(i,t,o):(i.removeEventListener(e,n,!0),pe._removeData(i,t))}}}),pe.fn.extend({on:function(e,t,n,i){return w(this,e,t,n,i)},one:function(e,t,n,i){return w(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,pe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=b),this.each(function(){pe.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return pe.event.trigger(e,t,n,!0)}});var Qe=/ jQuery\d+="(?:null|\d+)"/g,Ke=new RegExp("<(?:"+Re+")[\\s/>]","i"),Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ot=h(ie),rt=ot.appendChild(ie.createElement("div"));pe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a,l=pe.contains(e.ownerDocument,e);if(ue.html5Clone||pe.isXMLDoc(e)||!Ke.test("<"+e.nodeName+">")?r=e.cloneNode(!0):(rt.innerHTML=e.outerHTML,rt.removeChild(r=rt.firstChild)),!(ue.noCloneEvent&&ue.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(i=f(r),a=f(e),s=0;null!=(o=a[s]);++s)i[s]&&k(o,i[s]);if(t)if(n)for(a=a||f(e),i=i||f(r),s=0;null!=(o=a[s]);s++)C(o,i[s]);else C(e,r);return i=f(r,"script"),i.length>0&&g(i,!l&&f(e,"script")),i=a=o=null,r},cleanData:function(e,t){for(var n,i,o,r,s=0,a=pe.expando,l=pe.cache,c=ue.attributes,d=pe.event.special;null!=(n=e[s]);s++)if((t||De(n))&&(o=n[a],r=o&&l[o])){if(r.events)for(i in r.events)d[i]?pe.event.remove(n,i):pe.removeEvent(n,i,r.handle);l[o]&&(delete l[o],c||void 0===n.removeAttribute?n[a]=void 0:n.removeAttribute(a),ne.push(o))}}}),pe.fn.extend({domManip:A,detach:function(e){return _(this,e,!0)},remove:function(e){return _(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?pe.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ie).createTextNode(e))},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){S(this,e).appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=S(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&pe.cleanData(f(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&pe.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Qe,""):void 0;if("string"==typeof e&&!et.test(e)&&(ue.htmlSerialize||!Ke.test(e))&&(ue.leadingWhitespace||!Fe.test(e))&&!We[(qe.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(pe.cleanData(f(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(f(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",
replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,i=0,o=[],r=pe(e),s=r.length-1;i<=s;i++)n=i===s?this:this.clone(!0),pe(r[i])[t](n),se.apply(o,n.get());return this.pushStack(o)}});var st,at={HTML:"block",BODY:"block"},lt=/^margin/,ct=new RegExp("^("+Oe+")(?!px)[a-z%]+$","i"),dt=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];o=n.apply(e,i||[]);for(r in t)e.style[r]=s[r];return o},ut=ie.documentElement;!function(){function t(){var t,d,u=ie.documentElement;u.appendChild(l),c.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=o=a=!1,i=s=!0,e.getComputedStyle&&(d=e.getComputedStyle(c),n="1%"!==(d||{}).top,a="2px"===(d||{}).marginLeft,o="4px"===(d||{width:"4px"}).width,c.style.marginRight="50%",i="4px"===(d||{marginRight:"4px"}).marginRight,t=c.appendChild(ie.createElement("div")),t.style.cssText=c.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",c.style.width="1px",s=!parseFloat((e.getComputedStyle(t)||{}).marginRight),c.removeChild(t)),c.style.display="none",r=0===c.getClientRects().length,r&&(c.style.display="",c.innerHTML="<table><tr><td></td><td>t</td></tr></table>",c.childNodes[0].style.borderCollapse="separate",t=c.getElementsByTagName("td"),t[0].style.cssText="margin:0;border:0;padding:0;display:none",(r=0===t[0].offsetHeight)&&(t[0].style.display="",t[1].style.display="none",r=0===t[0].offsetHeight)),u.removeChild(l)}var n,i,o,r,s,a,l=ie.createElement("div"),c=ie.createElement("div");c.style&&(c.style.cssText="float:left;opacity:.5",ue.opacity="0.5"===c.style.opacity,ue.cssFloat=!!c.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",ue.clearCloneStyle="content-box"===c.style.backgroundClip,l=ie.createElement("div"),l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",c.innerHTML="",l.appendChild(c),ue.boxSizing=""===c.style.boxSizing||""===c.style.MozBoxSizing||""===c.style.WebkitBoxSizing,pe.extend(ue,{reliableHiddenOffsets:function(){return null==n&&t(),r},boxSizingReliable:function(){return null==n&&t(),o},pixelMarginRight:function(){return null==n&&t(),i},pixelPosition:function(){return null==n&&t(),n},reliableMarginRight:function(){return null==n&&t(),s},reliableMarginLeft:function(){return null==n&&t(),a}}))}();var pt,ht,ft=/^(top|right|bottom|left)$/;e.getComputedStyle?(pt=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},ht=function(e,t,n){var i,o,r,s,a=e.style;return n=n||pt(e),s=n?n.getPropertyValue(t)||n[t]:void 0,""!==s&&void 0!==s||pe.contains(e.ownerDocument,e)||(s=pe.style(e,t)),n&&!ue.pixelMarginRight()&&ct.test(s)&&lt.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0===s?s:s+""}):ut.currentStyle&&(pt=function(e){return e.currentStyle},ht=function(e,t,n){var i,o,r,s,a=e.style;return n=n||pt(e),s=n?n[t]:void 0,null==s&&a&&a[t]&&(s=a[t]),ct.test(s)&&!ft.test(t)&&(i=a.left,o=e.runtimeStyle,r=o&&o.left,r&&(o.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=i,r&&(o.left=r)),void 0===s?s:s+""||"auto"});var gt=/alpha\([^)]*\)/i,mt=/opacity\s*=\s*([^)]*)/i,vt=/^(none|table(?!-c[ea]).+)/,yt=new RegExp("^("+Oe+")(.*)$","i"),bt={position:"absolute",visibility:"hidden",display:"block"},xt={letterSpacing:"0",fontWeight:"400"},wt=["Webkit","O","Moz","ms"],St=ie.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ht(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ue.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=pe.camelCase(t),l=e.style;if(t=pe.cssProps[a]||(pe.cssProps[a]=L(a)||a),s=pe.cssHooks[t]||pe.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:l[t];if(r=typeof n,"string"===r&&(o=Me.exec(n))&&o[1]&&(n=p(e,t,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(pe.cssNumber[a]?"":"px")),ue.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var o,r,s,a=pe.camelCase(t);return t=pe.cssProps[a]||(pe.cssProps[a]=L(a)||a),s=pe.cssHooks[t]||pe.cssHooks[a],s&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=ht(e,t,i)),"normal"===r&&t in xt&&(r=xt[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,i){if(n)return vt.test(pe.css(e,"display"))&&0===e.offsetWidth?dt(e,bt,function(){return H(e,t,i)}):H(e,t,i)},set:function(e,n,i){var o=i&&pt(e);return M(e,n,i?j(e,t,i,ue.boxSizing&&"border-box"===pe.css(e,"boxSizing",!1,o),o):0)}}}),ue.opacity||(pe.cssHooks.opacity={get:function(e,t){return mt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,o=pe.isNumeric(t)?"alpha(opacity="+100*t+")":"",r=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===pe.trim(r.replace(gt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=gt.test(r)?r.replace(gt,o):r+" "+o)}}),pe.cssHooks.marginRight=P(ue.reliableMarginRight,function(e,t){if(t)return dt(e,{display:"inline-block"},ht,[e,"marginRight"])}),pe.cssHooks.marginLeft=P(ue.reliableMarginLeft,function(e,t){if(t)return(parseFloat(ht(e,"marginLeft"))||(pe.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-dt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+je[i]+t]=r[i]||r[i-2]||r[0];return o}},lt.test(e)||(pe.cssHooks[e+t].set=M)}),pe.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var i,o,r={},s=0;if(pe.isArray(t)){for(i=pt(e),o=t.length;s<o;s++)r[t[s]]=pe.css(e,t[s],!1,i);return r}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)},show:function(){return O(this,!0)},hide:function(){return O(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){He(this)?pe(this).show():pe(this).hide()})}}),pe.Tween=I,I.prototype={constructor:I,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(pe.cssNumber[n]?"":"px")},cur:function(){var e=I.propHooks[this.prop];return e&&e.get?e.get(this):I.propHooks._default.get(this)},run:function(e){var t,n=I.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=I.prototype.init,pe.fx.step={};var Tt,$t,Ct=/^(?:toggle|show|hide)$/,kt=/queueHooks$/;pe.Animation=pe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return p(n.elem,e,Me.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ae);for(var n,i=0,o=e.length;i<o;i++)n=e[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[F],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),pe.speed=function(e,t,n){var i=e&&"object"==typeof e?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return i.duration=pe.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in pe.fx.speeds?pe.fx.speeds[i.duration]:pe.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){pe.isFunction(i.old)&&i.old.call(this),i.queue&&pe.dequeue(this,i.queue)},i},pe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(He).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=pe.isEmptyObject(e),r=pe.speed(t,n,i),s=function(){var t=W(this,pe.extend({},e),r);(o||pe._data(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=pe.timers,s=pe._data(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&kt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||pe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=pe._data(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=pe.timers,s=i?i.length:0;for(n.finish=!0,pe.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(q(t,!0),e,i,o)}}),pe.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),pe.timers=[],pe.fx.tick=function(){var e,t=pe.timers,n=0;for(Tt=pe.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||pe.fx.stop(),Tt=void 0},pe.fx.timer=function(e){pe.timers.push(e),e()?pe.fx.start():pe.timers.pop()},pe.fx.interval=13,pe.fx.start=function(){$t||($t=e.setInterval(pe.fx.tick,pe.fx.interval))},pe.fx.stop=function(){e.clearInterval($t),$t=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})},function(){var e,t=ie.createElement("input"),n=ie.createElement("div"),i=ie.createElement("select"),o=i.appendChild(ie.createElement("option"));n=ie.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),e=n.getElementsByTagName("a")[0],e.style.cssText="top:1px",ue.getSetAttribute="t"!==n.className,ue.style=/top/.test(e.getAttribute("style")),ue.hrefNormalized="/a"===e.getAttribute("href"),ue.checkOn=!!t.value,ue.optSelected=o.selected,ue.enctype=!!ie.createElement("form").enctype,i.disabled=!0,ue.optDisabled=!o.disabled,t=ie.createElement("input"),t.setAttribute("value",""),ue.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),ue.radioValue="t"===t.value}();var At=/\r/g,_t=/[\x20\t\r\n\f]+/g;pe.fn.extend({val:function(e){var t,n,i,o=this[0];{if(arguments.length)return i=pe.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,pe(this).val()):e,null==o?o="":"number"==typeof o?o+="":pe.isArray(o)&&(o=pe.map(o,function(e){return null==e?"":e+""})),(t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return(t=pe.valHooks[o.type]||pe.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(At,""):null==n?"":n)}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:pe.trim(pe.text(e)).replace(_t," ")}},select:{get:function(e){for(var t,n,i=e.options,o=e.selectedIndex,r="select-one"===e.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(n=i[l],(n.selected||l===o)&&(ue.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!pe.nodeName(n.parentNode,"optgroup"))){if(t=pe(n).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,o=e.options,r=pe.makeArray(t),s=o.length;s--;)if(i=o[s],pe.inArray(pe.valHooks.option.get(i),r)>-1)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),o}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(pe.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},ue.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Et,Dt,Pt=pe.expr.attrHandle,Lt=/^(?:checked|selected)$/i,Ot=ue.getSetAttribute,Mt=ue.input;pe.fn.extend({attr:function(e,t){return Ie(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?pe.prop(e,t,n):(1===r&&pe.isXMLDoc(e)||(t=t.toLowerCase(),o=pe.attrHooks[t]||(pe.expr.match.bool.test(t)?Dt:Et)),void 0!==n?null===n?void pe.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:(i=pe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!ue.radioValue&&"radio"===t&&pe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,o=0,r=t&&t.match(Ae);if(r&&1===e.nodeType)for(;n=r[o++];)i=pe.propFix[n]||n,pe.expr.match.bool.test(n)?Mt&&Ot||!Lt.test(n)?e[i]=!1:e[pe.camelCase("default-"+n)]=e[i]=!1:pe.attr(e,n,""),e.removeAttribute(Ot?n:i)}}),Dt={set:function(e,t,n){return!1===t?pe.removeAttr(e,n):Mt&&Ot||!Lt.test(n)?e.setAttribute(!Ot&&pe.propFix[n]||n,n):e[pe.camelCase("default-"+n)]=e[n]=!0,n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Pt[t]||pe.find.attr;Mt&&Ot||!Lt.test(t)?Pt[t]=function(e,t,i){var o,r;return i||(r=Pt[t],Pt[t]=o,o=null!=n(e,t,i)?t.toLowerCase():null,Pt[t]=r),o}:Pt[t]=function(e,t,n){if(!n)return e[pe.camelCase("default-"+t)]?t.toLowerCase():null}}),Mt&&Ot||(pe.attrHooks.value={set:function(e,t,n){if(!pe.nodeName(e,"input"))return Et&&Et.set(e,t,n);e.defaultValue=t}}),Ot||(Et={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},Pt.id=Pt.name=Pt.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},pe.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:Et.set},pe.attrHooks.contenteditable={set:function(e,t,n){Et.set(e,""!==t&&t,n)}},pe.each(["width","height"],function(e,t){pe.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),ue.style||(pe.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var jt=/^(?:input|select|textarea|button|object)$/i,Ht=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Ie(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return e=pe.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),pe.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,o=pe.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):jt.test(e.nodeName)||Ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ue.hrefNormalized||pe.each(["href","src"],function(e,t){pe.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ue.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),ue.enctype||(pe.propFix.enctype="encoding");var It=/[\t\r\n\f]/g;pe.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,B(this)))});if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(o=B(n),i=1===n.nodeType&&(" "+o+" ").replace(It," ")){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=pe.trim(i),o!==a&&pe.attr(n,"class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(o=B(n),i=1===n.nodeType&&(" "+o+" ").replace(It," ")){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a=pe.trim(i),o!==a&&pe.attr(n,"class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,B(this),t),t)}):this.each(function(){var t,i,o,r;if("string"===n)for(i=0,o=pe(this),r=e.match(Ae)||[];t=r[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||(t=B(this),t&&pe._data(this,"__className__",t),pe.attr(this,"class",t||!1===e?"":pe._data(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+B(n)+" ").replace(It," ").indexOf(t)>-1)return!0;return!1}}),pe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Nt=e.location,qt=pe.now(),zt=/\?/,Ft=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;pe.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,o=pe.trim(t+"");return o&&!pe.trim(o.replace(Ft,function(e,t,o,r){return n&&t&&(i=0),0===i?e:(n=o||t,i+=!r-!o,"")}))?Function("return "+o)():pe.error("Invalid JSON: "+t)},pe.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new e.DOMParser,n=i.parseFromString(t,"text/xml")):(n=new e.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Rt=/#.*$/,Wt=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Xt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ut=/^(?:GET|HEAD)$/,Yt=/^\/\//,Gt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Vt={},Zt={},Qt="*/".concat("*"),Kt=Nt.href,Jt=Gt.exec(Kt.toLowerCase())||[];pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Kt,type:"GET",isLocal:Xt.test(Jt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":pe.parseJSON,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Y(Y(e,pe.ajaxSettings),t):Y(pe.ajaxSettings,e)},ajaxPrefilter:X(Vt),ajaxTransport:X(Zt),ajax:function(t,n){function i(t,n,i,o){var r,u,y,b,w,T=n;2!==x&&(x=2,l&&e.clearTimeout(l),d=void 0,a=o||"",S.readyState=t>0?4:0,r=t>=200&&t<300||304===t,i&&(b=G(p,S,i)),b=V(p,b,S,r),r?(p.ifModified&&(w=S.getResponseHeader("Last-Modified"),w&&(pe.lastModified[s]=w),(w=S.getResponseHeader("etag"))&&(pe.etag[s]=w)),204===t||"HEAD"===p.type?T="nocontent":304===t?T="notmodified":(T=b.state,u=b.data,y=b.error,r=!y)):(y=T,!t&&T||(T="error",t<0&&(t=0))),S.status=t,S.statusText=(n||T)+"",r?g.resolveWith(h,[u,T,S]):g.rejectWith(h,[S,T,y]),S.statusCode(v),v=void 0,c&&f.trigger(r?"ajaxSuccess":"ajaxError",[S,p,r?u:y]),m.fireWith(h,[S,T]),c&&(f.trigger("ajaxComplete",[S,p]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,r,s,a,l,c,d,u,p=pe.ajaxSetup({},n),h=p.context||p,f=p.context&&(h.nodeType||h.jquery)?pe(h):pe.event,g=pe.Deferred(),m=pe.Callbacks("once memory"),v=p.statusCode||{},y={},b={},x=0,w="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!u)for(u={};t=Bt.exec(a);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=b[n]=b[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)v[t]=[v[t],e[t]];else S.always(e[S.status]);return this},abort:function(e){var t=e||w;return d&&d.abort(t),i(0,t),this}};if(g.promise(S).complete=m.add,S.success=S.done,S.error=S.fail,p.url=((t||p.url||Kt)+"").replace(Rt,"").replace(Yt,Jt[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=pe.trim(p.dataType||"*").toLowerCase().match(Ae)||[""],null==p.crossDomain&&(o=Gt.exec(p.url.toLowerCase()),p.crossDomain=!(!o||o[1]===Jt[1]&&o[2]===Jt[2]&&(o[3]||("http:"===o[1]?"80":"443"))===(Jt[3]||("http:"===Jt[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=pe.param(p.data,p.traditional)),U(Vt,p,n,S),2===x)return S;c=pe.event&&p.global,c&&0==pe.active++&&pe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ut.test(p.type),s=p.url,p.hasContent||(p.data&&(s=p.url+=(zt.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(p.url=Wt.test(s)?s.replace(Wt,"$1_="+qt++):s+(zt.test(s)?"&":"?")+"_="+qt++)),p.ifModified&&(pe.lastModified[s]&&S.setRequestHeader("If-Modified-Since",pe.lastModified[s]),pe.etag[s]&&S.setRequestHeader("If-None-Match",pe.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Qt+"; q=0.01":""):p.accepts["*"]);for(r in p.headers)S.setRequestHeader(r,p.headers[r]);if(p.beforeSend&&(!1===p.beforeSend.call(h,S,p)||2===x))return S.abort();w="abort";for(r in{success:1,error:1,complete:1})S[r](p[r]);if(d=U(Zt,p,n,S)){if(S.readyState=1,c&&f.trigger("ajaxSend",[S,p]),2===x)return S;p.async&&p.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},p.timeout));try{x=1,d.send(y,i)}catch(e){if(!(x<2))throw e;i(-1,e)}}else i(-1,"No Transport");return S},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,i,o){return pe.isFunction(n)&&(o=o||i,i=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:o,data:n,success:i},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){if(pe.isFunction(e))return this.each(function(t){pe(this).wrapAll(e.call(this,t))});if(this[0]){var t=pe(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){pe.nodeName(this,"body")||pe(this).replaceWith(this.childNodes)}).end()}}),pe.expr.filters.hidden=function(e){return ue.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Q(e)},pe.expr.filters.visible=function(e){return!pe.expr.filters.hidden(e)};var en=/%20/g,tn=/\[\]$/,nn=/\r?\n/g,on=/^(?:submit|button|image|reset|file)$/i,rn=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,i=[],o=function(e,t){t=pe.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=pe.ajaxSettings&&pe.ajaxSettings.traditional),pe.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){o(this.name,this.value)});else for(n in e)K(n,e[n],t,o);return i.join("&").replace(en,"+")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&rn.test(this.nodeName)&&!on.test(e)&&(this.checked||!Ne.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:pe.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(nn,"\r\n")}}):{name:t.name,value:n.replace(nn,"\r\n")}}).get()}}),pe.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ee():ie.documentMode>8?J():/^(get|post|head|put|delete|options)$/i.test(this.type)&&J()||ee()}:J;var sn=0,an={},ln=pe.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in an)an[e](void 0,!0)}),ue.cors=!!ln&&"withCredentials"in ln,ln=ue.ajax=!!ln,ln&&pe.ajaxTransport(function(t){if(!t.crossDomain||ue.cors){var n;return{send:function(i,o){var r,s=t.xhr(),a=++sn;if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)s[r]=t.xhrFields[r];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(r in i)void 0!==i[r]&&s.setRequestHeader(r,i[r]+"");s.send(t.hasContent&&t.data||null),n=function(e,i){var r,l,c;if(n&&(i||4===s.readyState))if(delete an[a],n=void 0,s.onreadystatechange=pe.noop,i)4!==s.readyState&&s.abort();else{c={},r=s.status,"string"==typeof s.responseText&&(c.text=s.responseText);try{l=s.statusText}catch(e){l=""}r||!t.isLocal||t.crossDomain?1223===r&&(r=204):r=c.text?200:404}c&&o(r,l,c,s.getAllResponseHeaders())},t.async?4===s.readyState?e.setTimeout(n):s.onreadystatechange=an[a]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=ie.head||pe("head")[0]||ie.documentElement;return{send:function(i,o){t=ie.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||o(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var cn=[],dn=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=cn.pop()||pe.expando+"_"+qt++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,s,a=!1!==t.jsonp&&(dn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&dn.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,"$1"+o):!1!==t.jsonp&&(t.url+=(zt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||pe.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){s=arguments},i.always(function(){void 0===r?pe(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,cn.push(o)),s&&pe.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),pe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||ie;var i=we.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=v([e],t,o),o&&o.length&&pe(o).remove(),pe.merge([],i.childNodes))};var un=pe.fn.load;pe.fn.load=function(e,t,n){if("string"!=typeof e&&un)return un.apply(this,arguments);var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=pe.trim(e.slice(a,e.length)),e=e.slice(0,a)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&pe.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?pe("<div>").append(pe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.filters.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c,d=pe.css(e,"position"),u=pe(e),p={};"static"===d&&(e.style.position="relative"),a=u.offset(),r=pe.css(e,"top"),l=pe.css(e,"left"),c=("absolute"===d||"fixed"===d)&&pe.inArray("auto",[r,l])>-1,c?(i=u.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+o),"using"in t?t.using.call(e,p):u.css(p)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},o=this[0],r=o&&o.ownerDocument;if(r)return t=r.documentElement,pe.contains(t,o)?(void 0!==o.getBoundingClientRect&&(i=o.getBoundingClientRect()),n=te(r),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===pe.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),pe.nodeName(e[0],"html")||(n=e.offset()),n.top+=pe.css(e[0],"borderTopWidth",!0),n.left+=pe.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-pe.css(i,"marginTop",!0),left:t.left-n.left-pe.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){
for(var e=this.offsetParent;e&&!pe.nodeName(e,"html")&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||ut})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);pe.fn[e]=function(i){return Ie(this,function(e,i,o){var r=te(e);if(void 0===o)return r?t in r?r[t]:r.document.documentElement[i]:e[i];r?r.scrollTo(n?pe(r).scrollLeft():o,n?o:pe(r).scrollTop()):e[i]=o},e,i,arguments.length,null)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=P(ue.pixelPosition,function(e,n){if(n)return n=ht(e,t),ct.test(n)?pe(e).position()[t]+"px":n})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){pe.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Ie(this,function(t,n,i){var o;return pe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?pe.css(t,n,s):pe.style(t,n,i,s)},t,r?i:void 0,r,null)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.fn.size=function(){return this.length},pe.fn.andSelf=pe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var pn=e.jQuery,hn=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=hn),t&&e.jQuery===pe&&(e.jQuery=pn),pe},t||(e.jQuery=e.$=pe),pe}),function(e,t,n,i){"use strict";function o(e){var t=n(e.currentTarget),i=e.data?e.data.options:{},o=t.attr("data-fancybox")||"",r=0,s=[];e.isDefaultPrevented()||(e.preventDefault(),o?(s=i.selector?n(i.selector):e.data?e.data.items:[],s=s.length?s.filter('[data-fancybox="'+o+'"]'):n('[data-fancybox="'+o+'"]'),(r=s.index(t))<0&&(r=0)):s=[t],n.fancybox.open(s,i,r))}if(n){if(n.fn.fancybox)return void("console"in e&&console.log("fancyBox already initialized"));var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!0,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","share","close"],idleTime:3,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},defaultType:"image",animationEffect:"zoom",animationDuration:500,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}"><svg viewBox="0 0 40 40"><path d="M20,23 L20,8 L20,23 L13,16 L20,23 L27,16 L20,23 M26,28 L13,28 L27,28 L14,28" /></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg viewBox="0 0 40 40"><path d="M 18,17 m-8,0 a 8,8 0 1,0 16,0 a 8,8 0 1,0 -16,0 M25,23 L31,29 L25,23" /></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg viewBox="0 0 40 40"><path d="M10,10 L30,30 M30,10 L10,30" /></svg></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><svg viewBox="0 0 40 40"><path d="M10,20 L30,20 L10,20 L18,28 L10,20 L18,12 L10,20"></path></svg></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><svg viewBox="0 0 40 40"><path d="M30,20 L10,20 L30,20 L22,28 L30,20 L22,12 L30,20"></path></svg></button>'},parentEl:"body",autoFocus:!1,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{idleTime:!1,margin:0,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},s=n(e),a=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},d=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),u=function(){var e,n=t.createElement("fakeelement"),o={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in o)if(n.style[e]!==i)return o[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},h=function(e,i,o){var r=this;r.opts=n.extend(!0,{index:o},n.fancybox.defaults,i||{}),n.fancybox.isMobile&&(r.opts=n.extend(!0,{},r.opts,r.opts.mobile)),i&&n.isArray(i.buttons)&&(r.opts.buttons=i.buttons),r.id=r.opts.id||++l,r.group=[],r.currIndex=parseInt(r.opts.index,10)||0,r.prevIndex=null,r.prevPos=null,r.currPos=0,r.firstRun=null,r.createGroup(e),r.group.length&&(r.$lastFocus=n(t.activeElement).blur(),r.slides={},r.init())};n.extend(h.prototype,{init:function(){var o,r,s,l=this,c=l.group[l.currIndex],d=c.opts,u=n.fancybox.scrollbarWidth;l.scrollTop=a.scrollTop(),l.scrollLeft=a.scrollLeft(),n.fancybox.getInstance()||(n("body").addClass("fancybox-active"),/iPad|iPhone|iPod/.test(navigator.userAgent)&&!e.MSStream?"image"!==c.type&&n("body").css("top",-1*n("body").scrollTop()).addClass("fancybox-iosfix"):!n.fancybox.isMobile&&t.body.scrollHeight>e.innerHeight&&(u===i&&(o=n('<div style="width:50px;height:50px;overflow:scroll;" />').appendTo("body"),u=n.fancybox.scrollbarWidth=o[0].offsetWidth-o[0].clientWidth,o.remove()),n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+u+"px; }</style>"),n("body").addClass("compensate-for-scrollbar"))),s="",n.each(d.buttons,function(e,t){s+=d.btnTpl[t]||""}),r=n(l.translate(l,d.baseTpl.replace("{{buttons}}",s).replace("{{arrows}}",d.btnTpl.arrowLeft+d.btnTpl.arrowRight))).attr("id","fancybox-container-"+l.id).addClass("fancybox-is-hidden").addClass(d.baseClass).data("FancyBox",l).appendTo(d.parentEl),l.$refs={container:r},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){l.$refs[e]=r.find(".fancybox-"+e)}),l.trigger("onInit"),l.activate(),l.jumpTo(l.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var o=n[t];return o===i?e:o})},createGroup:function(e){var t=this,o=n.makeArray(e);n.each(o,function(e,o){var r,s,a,l,c,d={},u={};n.isPlainObject(o)?(d=o,u=o.opts||o):"object"===n.type(o)&&n(o).length?(r=n(o),u=r.data(),u=n.extend({},u,u.options||{}),u.$orig=r,d.src=u.src||r.attr("href"),d.type||d.src||(d.type="inline",d.src=o)):d={type:"html",src:o+""},d.opts=n.extend(!0,{},t.opts,u),n.isArray(u.buttons)&&(d.opts.buttons=u.buttons),s=d.type||d.opts.type,l=d.src||"",!s&&l&&(l.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":l.match(/\.(pdf)((\?|#).*)?$/i)?s="pdf":(a=l.match(/\.(mp4|mov|ogv)((\?|#).*)?$/i))?(s="video",d.opts.videoFormat||(d.opts.videoFormat="video/"+("ogv"===a[1]?"ogg":a[1]))):"#"===l.charAt(0)&&(s="inline")),s?d.type=s:t.trigger("objectNeedsType",d),d.index=t.group.length,d.opts.$orig&&!d.opts.$orig.length&&delete d.opts.$orig,!d.opts.$thumb&&d.opts.$orig&&(d.opts.$thumb=d.opts.$orig.find("img:first")),d.opts.$thumb&&!d.opts.$thumb.length&&delete d.opts.$thumb,"function"===n.type(d.opts.caption)&&(d.opts.caption=d.opts.caption.apply(o,[t,d])),"function"===n.type(t.opts.caption)&&(d.opts.caption=t.opts.caption.apply(o,[t,d])),d.opts.caption instanceof n||(d.opts.caption=d.opts.caption===i?"":d.opts.caption+""),"ajax"===s&&(c=l.split(/\s+/,2),c.length>1&&(d.src=c.shift(),d.opts.filter=c.shift())),"auto"==d.opts.smallBtn&&(n.inArray(s,["html","inline","ajax"])>-1?(d.opts.toolbar=!1,d.opts.smallBtn=!0):d.opts.smallBtn=!1),"pdf"===s&&(d.type="iframe",d.opts.iframe.preload=!1),d.opts.modal&&(d.opts=n.extend(!0,d.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(d)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?d(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},600))}),a.on("focusin.fb",function(e){var o=n.fancybox?n.fancybox.getInstance():null;o.isClosing||!o.current||!o.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||o&&"fixed"!==n(e.target).css("position")&&!o.$refs.container.has(e.target).length&&(e.stopPropagation(),o.focus(),s.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),a.on("keydown.fb",function(e){var t=i.current,o=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===o||27===o?(e.preventDefault(),void i.close(e)):37===o||38===o?(e.preventDefault(),void i.previous()):39===o||40===o?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,o)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;s.off("orientationchange.fb resize.fb"),a.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,o){var r,s,a,l,c,d,u,h=this,f=h.group.length;if(!(h.isDragging||h.isClosing||h.isAnimating&&h.firstRun)){if(e=parseInt(e,10),!(s=h.current?h.current.opts.loop:h.opts.loop)&&(e<0||e>=f))return!1;if(r=h.firstRun=null===h.firstRun,!(f<2&&!r&&h.isDragging)){if(l=h.current,h.prevIndex=h.currIndex,h.prevPos=h.currPos,a=h.createSlide(e),f>1&&((s||a.index>0)&&h.createSlide(e-1),(s||a.index<f-1)&&h.createSlide(e+1)),h.current=a,h.currIndex=a.index,h.currPos=a.pos,h.trigger("beforeShow",r),h.updateControls(),d=n.fancybox.getTranslate(a.$slide),a.isMoved=(0!==d.left||0!==d.top)&&!a.$slide.hasClass("fancybox-animated"),a.forcedDuration=i,n.isNumeric(t)?a.forcedDuration=t:t=a.opts[r?"animationDuration":"transitionDuration"],t=parseInt(t,10),r)return a.opts.animationEffect&&t&&h.$refs.container.css("transition-duration",t+"ms"),h.$refs.container.removeClass("fancybox-is-hidden"),p(h.$refs.container),h.$refs.container.addClass("fancybox-is-open"),a.$slide.addClass("fancybox-slide--current"),h.loadSlide(a),void h.preload("image");n.each(h.slides,function(e,t){n.fancybox.stop(t.$slide)}),a.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a.isMoved?(c=Math.round(a.$slide.width()),n.each(h.slides,function(e,i){var o=i.pos-a.pos;n.fancybox.animate(i.$slide,{top:0,left:o*c+o*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===h.currPos&&(a.isMoved=!1,h.complete())})})):h.$refs.stage.children().removeAttr("style"),a.isLoaded?h.revealContent(a):h.loadSlide(a),h.preload("image"),l.pos!==a.pos&&(u="fancybox-slide--"+(l.pos>a.pos?"next":"previous"),l.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),l.isComplete=!1,t&&(a.isMoved||a.opts.transitionEffect)&&(a.isMoved?l.$slide.addClass(u):(u="fancybox-animated "+u+" fancybox-fx-"+a.opts.transitionEffect,n.fancybox.animate(l.$slide,u,t,function(){l.$slide.removeClass(u).removeAttr("style")}))))}}},createSlide:function(e){var t,i,o=this;return i=e%o.group.length,i=i<0?o.group.length+i:i,!o.slides[e]&&o.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[e]=n.extend(!0,{},o.group[i],{pos:e,$slide:t,isLoaded:!1}),o.updateSlide(o.slides[e])),o.slides[e]},scaleToActual:function(e,t,o){var r,s,a,l,c,d=this,u=d.current,p=u.$content,h=parseInt(u.$slide.width(),10),f=parseInt(u.$slide.height(),10),g=u.width,m=u.height;"image"!=u.type||u.hasError||!p||d.isAnimating||(n.fancybox.stop(p),d.isAnimating=!0,e=e===i?.5*h:e,t=t===i?.5*f:t,r=n.fancybox.getTranslate(p),l=g/r.width,c=m/r.height,s=.5*h-.5*g,a=.5*f-.5*m,g>h&&(s=r.left*l-(e*l-e),s>0&&(s=0),s<h-g&&(s=h-g)),m>f&&(a=r.top*c-(t*c-t),a>0&&(a=0),a<f-m&&(a=f-m)),d.updateCursor(g,m),n.fancybox.animate(p,{top:a,left:s,scaleX:l,scaleY:c},o||330,function(){d.isAnimating=!1}),d.SlideShow&&d.SlideShow.isActive&&d.SlideShow.stop())},scaleToFit:function(e){var t,i=this,o=i.current,r=o.$content;"image"!=o.type||o.hasError||!r||i.isAnimating||(n.fancybox.stop(r),i.isAnimating=!0,t=i.getFitPos(o),i.updateCursor(t.width,t.height),n.fancybox.animate(r,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,o,r,s,a=this,l=e.$content,c=e.width,d=e.height,u=e.opts.margin;return!(!l||!l.length||!c&&!d)&&("number"===n.type(u)&&(u=[u,u]),2==u.length&&(u=[u[0],u[1],u[0],u[1]]),t=parseInt(a.$refs.stage.width(),10)-(u[1]+u[3]),i=parseInt(a.$refs.stage.height(),10)-(u[0]+u[2]),o=Math.min(1,t/c,i/d),r=Math.floor(o*c),s=Math.floor(o*d),{top:Math.floor(.5*(i-s))+u[0],left:Math.floor(.5*(t-r))+u[3],width:r,height:s})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e,t){var i=this,o=e&&e.$content;o&&(e.width||e.height)&&(i.isAnimating=!1,n.fancybox.stop(o),n.fancybox.setTranslate(o,i.getFitPos(e)),e.pos===i.currPos&&i.updateCursor()),e.$slide.trigger("refresh"),i.trigger("onUpdate",e)},centerSlide:function(e,t){var o,r,s=this;s.current&&(o=Math.round(e.$slide.width()),r=e.pos-s.current.pos,n.fancybox.animate(e.$slide,{top:0,left:r*o+r*e.opts.gutter,opacity:1},t===i?0:t,null,!1))},updateCursor:function(e,t){var n,o=this,r=o.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");o.current&&!o.isClosing&&(o.isZoomable()?(r.addClass("fancybox-is-zoomable"),n=e!==i&&t!==i?e<o.current.width&&t<o.current.height:o.isScaledDown(),n?r.addClass("fancybox-can-zoomIn"):o.current.opts.touch?r.addClass("fancybox-can-drag"):r.addClass("fancybox-can-zoomOut")):o.current.opts.touch&&r.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,i=t.current;if(i&&!t.isClosing)return!!("image"===i.type&&i.isLoaded&&!i.hasError&&("zoom"===i.opts.clickContent||n.isFunction(i.opts.clickContent)&&"zoom"===i.opts.clickContent(i))&&(e=t.getFitPos(i),i.width>e.width||i.height>e.height))},isScaledDown:function(){var e=this,t=e.current,i=t.$content,o=!1;return i&&(o=n.fancybox.getTranslate(i),o=o.width<t.width||o.height<t.height),o},canPan:function(){var e=this,t=e.current,n=t.$content,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},loadSlide:function(e){var t,i,o,r=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),o=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),i.one("onReset",function(){o.abort()});break;case"video":r.setContent(e,'<video controls><source src="'+e.src+'" type="'+e.opts.videoFormat+"\">Your browser doesn't support HTML5 video</video>");break;default:r.setError(e)}return!0}},setImage:function(t){var i,o,r,s,a=this,l=t.opts.srcset||t.opts.image.srcset;if(l){r=e.devicePixelRatio||1,s=e.innerWidth*r,o=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);return 0===n?t.url=e:void(i&&(t.value=i,t.postfix=e[e.length-1]))}),t}),o.sort(function(e,t){return e.value-t.value});for(var c=0;c<o.length;c++){var d=o[c];if("w"===d.postfix&&d.value>=s||"x"===d.postfix&&d.value>=r){i=d;break}}!i&&o.length&&(i=o[o.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,a.setBigImage(t)}).one("load",function(){a.afterLoad(t),a.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):a.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=e.opts.width||this.naturalWidth,e.height=e.opts.height||this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(i[0].complete||"complete"==i[0].readyState)&&i[0].naturalWidth&&i[0].naturalHeight?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,o=this,r=e.opts.iframe,s=e.$slide;e.$content=n('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(s),t=n(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(e.$content),r.preload?(o.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),o.afterLoad(e)}),s.on("refresh.fb",function(){var n,o,s,a=e.$content,l=r.css.width,c=r.css.height;if(1===t[0].isReady){try{o=t.contents(),s=o.find("body")}catch(e){}s&&s.length&&(l===i&&(n=t[0].contentWindow.document.documentElement.scrollWidth,l=Math.ceil(s.outerWidth(!0)+(a.width()-n)),l+=a.outerWidth()-a.innerWidth()),c===i&&(c=Math.ceil(s.outerHeight(!0)),c+=a.outerHeight()-a.innerHeight()),l&&a.width(l),c&&a.height(c)),a.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(o.translate(e,e.opts.btnTpl.smallBtn)),s.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div,form").first())),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,o,r,s,a,l=this,c=e.$slide,d=!1;return t=e.opts[l.firstRun?"animationEffect":"transitionEffect"],r=e.opts[l.firstRun?"animationDuration":"transitionDuration"],r=parseInt(e.forcedDuration===i?r:e.forcedDuration,10),!e.isMoved&&e.pos===l.currPos&&r||(t=!1),"zoom"!==t||e.pos===l.currPos&&r&&"image"===e.type&&!e.hasError&&(d=l.getThumbPos(e))||(t="fade"),"zoom"===t?(a=l.getFitPos(e),a.scaleX=a.width/d.width,a.scaleY=a.height/d.height,delete a.width,delete a.height,s=e.opts.zoomOpacity,"auto"==s&&(s=Math.abs(e.width/e.height-d.width/d.height)>.1),s&&(d.opacity=.1,a.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),d),p(e.$content),void n.fancybox.animate(e.$content,a,r,function(){l.complete()})):(l.updateSlide(e),t?(n.fancybox.stop(c),o="fancybox-animated fancybox-slide--"+(e.pos>=l.prevPos?"next":"previous")+" fancybox-fx-"+t,c.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(o),e.$content.removeClass("fancybox-is-hidden"),p(c),void n.fancybox.animate(c,"fancybox-slide--current",r,function(t){c.removeClass(o).removeAttr("style"),e.pos===l.currPos&&l.complete()},!0)):(p(c),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===l.currPos&&l.complete())))},getThumbPos:function(i){var o,r=this,s=!1,a=i.opts.$thumb,l=a?a.offset():0;return l&&a[0].ownerDocument===t&&function(t){for(var i=t[0],o=i.getBoundingClientRect(),r=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||r.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return r.every(function(e){var t=Math.min(o.right,e.right)-Math.max(o.left,e.left),n=Math.min(o.bottom,e.bottom)-Math.max(o.top,e.top);return t>0&&n>0})&&o.bottom>0&&o.right>0&&o.left<n(e).width()&&o.top<n(e).height()}(a)&&(o=r.$refs.stage.offset(),s={top:l.top-o.top+parseFloat(a.css("border-top-width")||0),left:l.left-o.left+parseFloat(a.css("border-left-width")||0),width:a.width(),height:a.height(),scaleX:1,scaleY:1}),s},complete:function(){var e=this,i=e.current,o={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),e.preload("inline"),p(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=o,e.updateCursor(),e.trigger("afterShow"),i.$slide.find("video,audio").first().trigger("play"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(e){var t=this,n=t.slides[t.currPos+1],i=t.slides[t.currPos-1];n&&n.type===e&&t.loadSlide(n),i&&i.type===e&&t.loadSlide(i)},focus:function(){var e,t=this.current;this.isClosing||(t&&t.isComplete&&(e=t.$slide.find("input[autofocus]:enabled:visible:first"),e.length||(e=t.$slide.find("button,:input,[tabindex],a").filter(":enabled:visible:first"))),e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,o,r,s,a,l,c=this,h=c.current,f=function(){c.cleanUp(e)};return!(c.isClosing||(c.isClosing=!0,!1===c.trigger("beforeClose",e)?(c.isClosing=!1,d(function(){c.update()}),1):(c.removeEvents(),h.timouts&&clearTimeout(h.timouts),r=h.$content,i=h.opts.animationEffect,o=n.isNumeric(t)?t:i?h.opts.animationDuration:0,h.$slide.off(u).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),h.$slide.siblings().trigger("onReset").remove(),o&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),c.hideLoading(h),c.hideControls(),c.updateCursor(),"zoom"!==i||!0!==e&&r&&o&&"image"===h.type&&!h.hasError&&(l=c.getThumbPos(h))||(i="fade"),"zoom"===i?(n.fancybox.stop(r),a=n.fancybox.getTranslate(r),a.width=a.width*a.scaleX,a.height=a.height*a.scaleY,s=h.opts.zoomOpacity,"auto"==s&&(s=Math.abs(h.width/h.height-l.width/l.height)>.1),s&&(l.opacity=0),a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,a.width=l.width,a.height=l.height,n.fancybox.setTranslate(h.$content,a),p(h.$content),n.fancybox.animate(h.$content,l,o,f),0):(i&&o?!0===e?setTimeout(f,o):n.fancybox.animate(h.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,o,f):f(),0))))},cleanUp:function(e){var i,o,r=this,a=n("body");r.current.$slide.trigger("onReset"),r.$refs.container.empty().remove(),r.trigger("afterClose",e),r.$lastFocus&&r.current.opts.backFocus&&r.$lastFocus.focus(),r.current=null,i=n.fancybox.getInstance(),i?i.activate():(s.scrollTop(r.scrollTop).scrollLeft(r.scrollLeft),a.removeClass("fancybox-active compensate-for-scrollbar"),a.hasClass("fancybox-iosfix")&&(o=parseInt(t.body.style.top,10),a.removeClass("fancybox-iosfix").css("top","").scrollTop(-1*o)),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,o=Array.prototype.slice.call(arguments,1),r=this,s=t&&t.opts?t:r.current;return s?o.unshift(s):s=r,o.unshift(r),n.isFunction(s.opts[e])&&(i=s.opts[e].apply(s,o)),!1===i?i:void("afterClose"!==e&&r.$refs?r.$refs.container.trigger(e+".fb",o):a.trigger(e+".fb",o))},updateControls:function(e){var t=this,n=t.current,i=n.index,o=n.opts.caption,r=t.$refs.container,s=t.$refs.caption;n.$slide.trigger("refresh"),t.$caption=o&&o.length?s.html(o):null,t.isHiddenControls||t.isIdle||t.showControls(),r.find("[data-fancybox-count]").html(t.group.length),r.find("[data-fancybox-index]").html(i+1),r.find("[data-fancybox-prev]").prop("disabled",!n.opts.loop&&i<=0),r.find("[data-fancybox-next]").prop("disabled",!n.opts.loop&&i>=t.group.length-1),"image"===n.type?r.find("[data-fancybox-download]").attr("href",n.opts.image.src||n.src).show():r.find("[data-fancybox-download],[data-fancybox-zoom]").hide()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.2.10",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof h&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new h(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),a.off("click.fb-start")},isMobile:t.createTouch!==i&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,i=n.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",o={};if(e&&t)return t.left===i&&t.top===i||(n=(t.left===i?e.position().left:t.left)+"px, "+(t.top===i?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==i&&t.scaleY!==i&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(o.transform=n),t.opacity!==i&&(o.opacity=t.opacity),t.width!==i&&(o.width=t.width),t.height!==i&&(o.height=t.height),e.css(o)},animate:function(e,t,o,r,s){n.isFunction(o)&&(r=o,o=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(u,function(o){
(!o||!o.originalEvent||e.is(o.originalEvent.target)&&"z-index"!=o.originalEvent.propertyName)&&(n.fancybox.stop(e),n.isPlainObject(t)?(t.scaleX!==i&&t.scaleY!==i&&(e.css("transition-duration",""),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)),!1===s&&e.removeAttr("style")):!0!==s&&e.removeClass(t),n.isFunction(r)&&r(o))}),n.isNumeric(o)&&e.css("transition-duration",o+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),t.scaleX&&e.hasClass("fancybox-image-wrap")&&e.parent().addClass("fancybox-is-scaling"),e.data("timer",setTimeout(function(){e.trigger("transitionend")},o+16))},stop:function(e){clearTimeout(e.data("timer")),e.off("transitionend").css("transition-duration",""),e.hasClass("fancybox-image-wrap")&&e.parent().removeClass("fancybox-is-scaling")}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},o):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},o),this},a.on("click.fb-start","[data-fancybox]",o)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("objectNeedsType.fb",function(i,o,r){var s,a,l,c,d,u,p,h=r.src||"",f=!1;s=e.extend(!0,{},n,r.opts.media),e.each(s,function(n,i){if(l=h.match(i.matcher)){if(f=i.type,u={},i.paramPlace&&l[i.paramPlace]){d=l[i.paramPlace],"?"==d[0]&&(d=d.substring(1)),d=d.split("&");for(var o=0;o<d.length;++o){var s=d[o].split("=",2);2==s.length&&(u[s[0]]=decodeURIComponent(s[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},i.params,r.opts[n],u),h="function"===e.type(i.url)?i.url.call(this,l,c,r):t(i.url,l,c),a="function"===e.type(i.thumb)?i.thumb.call(this,l,c,r):t(i.thumb,l),"vimeo"===n&&(h=h.replace("&%23","#")),!1}}),f?(r.src=h,r.type=f,r.opts.thumb||r.opts.$thumb&&r.opts.$thumb.length||(r.opts.thumb=a),"iframe"===f&&(e.extend(!0,r.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),r.contentProvider=p,r.opts.slideClass+=" fancybox-slide--video")):h&&(r.type=r.opts.defaultType)})}(window.jQuery||jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),o=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),r=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},s=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},a=function(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea')||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,o=i.length;t<o;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],o=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return o||r},c=function(e){for(var t=!1;!(t=l(e.get(0)))&&(e=e.parent(),e.length&&!e.hasClass("fancybox-stage")&&!e.is("body")););return t},d=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};d.prototype.destroy=function(){this.$container.off(".fb.touch")},d.prototype.ontouchstart=function(i){var o=this,l=n(i.target),d=o.instance,u=d.current,p=u.$content,h="touchstart"==i.type;if(h&&o.$container.off("mousedown.fb.touch"),(!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!a(l)&&!a(l.parent())&&(l.is("img")||!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left))){if(!u||o.instance.isAnimating||o.instance.isClosing)return i.stopPropagation(),void i.preventDefault();if(o.realPoints=o.startPoints=r(i),o.startPoints){if(i.stopPropagation(),o.startEvent=i,o.canTap=!0,o.$target=l,o.$content=p,o.opts=u.opts.touch,o.isPanning=!1,o.isSwiping=!1,o.isZooming=!1,o.isScrolling=!1,o.sliderStartPos=o.sliderLastPos||{top:0,left:0},o.contentStartPos=n.fancybox.getTranslate(o.$content),o.contentLastPos=null,o.startTime=(new Date).getTime(),o.distanceX=o.distanceY=o.distance=0,o.canvasWidth=Math.round(u.$slide[0].clientWidth),o.canvasHeight=Math.round(u.$slide[0].clientHeight),n(t).off(".fb.touch").on(h?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(o,"ontouchend")).on(h?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(o,"ontouchmove")),n.fancybox.isMobile&&t.addEventListener("scroll",o.onscroll,!0),!o.opts&&!d.canPan()||!l.is(o.$stage)&&!o.$stage.find(l).length)return void(l.is("img")&&i.preventDefault());n.fancybox.isMobile&&(c(l)||c(l.parent()))||i.preventDefault(),1===o.startPoints.length&&("image"===u.type&&(o.contentStartPos.width>o.canvasWidth+1||o.contentStartPos.height>o.canvasHeight+1)?(n.fancybox.stop(o.$content),o.$content.css("transition-duration",""),o.isPanning=!0):o.isSwiping=!0,o.$container.addClass("fancybox-controls--isGrabbing")),2!==o.startPoints.length||d.isAnimating||u.hasError||"image"!==u.type||!u.isLoaded&&!u.$ghost||(o.canTap=!1,o.isSwiping=!1,o.isPanning=!1,o.isZooming=!0,n.fancybox.stop(o.$content),o.$content.css("transition-duration",""),o.centerPointStartX=.5*(o.startPoints[0].x+o.startPoints[1].x)-n(e).scrollLeft(),o.centerPointStartY=.5*(o.startPoints[0].y+o.startPoints[1].y)-n(e).scrollTop(),o.percentageOfImageAtPinchPointX=(o.centerPointStartX-o.contentStartPos.left)/o.contentStartPos.width,o.percentageOfImageAtPinchPointY=(o.centerPointStartY-o.contentStartPos.top)/o.contentStartPos.height,o.startDistanceBetweenFingers=s(o.startPoints[0],o.startPoints[1]))}}},d.prototype.onscroll=function(e){self.isScrolling=!0},d.prototype.ontouchmove=function(e){var t=this,i=n(e.target);return t.isScrolling||!i.is(t.$stage)&&!t.$stage.find(i).length?void(t.canTap=!1):(t.newPoints=r(e),void((t.opts||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=s(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=s(t.newPoints[0],t.startPoints[0],"y"),t.distance=s(t.newPoints[0],t.startPoints[0]),t.distance>0&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))))},d.prototype.onSwipe=function(t){var r,s=this,a=s.isSwiping,l=s.sliderStartPos.left||0;if(!0!==a)"x"==a&&(s.distanceX>0&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?l+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?l-=Math.pow(-s.distanceX,.8):l+=s.distanceX),s.sliderLastPos={top:"x"==a?0:s.sliderStartPos.top+s.distanceY,left:l},s.requestId&&(o(s.requestId),s.requestId=null),s.requestId=i(function(){s.sliderLastPos&&(n.each(s.instance.slides,function(e,t){var i=t.pos-s.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+i*s.canvasWidth+i*t.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(s.distance)>10){if(s.canTap=!1,s.instance.group.length<2&&s.opts.vertical?s.isSwiping="y":s.instance.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&n(e).width()>800?s.isSwiping="x":(r=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=r>45&&r<135?"y":"x"),s.canTap=!1,"y"===s.isSwiping&&n.fancybox.isMobile&&(c(s.$target)||c(s.$target.parent())))return void(s.isScrolling=!0);s.instance.isDragging=s.isSwiping,s.startPoints=s.newPoints,n.each(s.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration",""),t.inTransition=!1,t.pos===s.instance.current.pos&&(s.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),s.instance.SlideShow&&s.instance.SlideShow.isActive&&s.instance.SlideShow.stop()}},d.prototype.onPan=function(){var e=this;return s(e.newPoints[0],e.realPoints[0])<(n.fancybox.isMobile?10:5)?void(e.startPoints=e.newPoints):(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&(o(e.requestId),e.requestId=null),void(e.requestId=i(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})))},d.prototype.limitMovement=function(){var e,t,n,i,o,r,s=this,a=s.canvasWidth,l=s.canvasHeight,c=s.distanceX,d=s.distanceY,u=s.contentStartPos,p=u.left,h=u.top,f=u.width,g=u.height;return o=f>a?p+c:p,r=h+d,e=Math.max(0,.5*a-.5*f),t=Math.max(0,.5*l-.5*g),n=Math.min(a-f,.5*a-.5*f),i=Math.min(l-g,.5*l-.5*g),f>a&&(c>0&&o>e&&(o=e-1+Math.pow(-e+p+c,.8)||0),c<0&&o<n&&(o=n+1-Math.pow(n-p-c,.8)||0)),g>l&&(d>0&&r>t&&(r=t-1+Math.pow(-t+h+d,.8)||0),d<0&&r<i&&(r=i+1-Math.pow(i-h-d,.8)||0)),{top:r,left:o,scaleX:u.scaleX,scaleY:u.scaleY}},d.prototype.limitPosition=function(e,t,n,i){var o=this,r=o.canvasWidth,s=o.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),i>s?(t=t>0?0:t,t=t<s-i?s-i:t):t=Math.max(0,s/2-i/2),{top:t,left:e}},d.prototype.onZoom=function(){var t=this,r=t.contentStartPos.width,a=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,d=s(t.newPoints[0],t.newPoints[1]),u=d/t.startDistanceBetweenFingers,p=Math.floor(r*u),h=Math.floor(a*u),f=(r-p)*t.percentageOfImageAtPinchPointX,g=(a-h)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),y=m-t.centerPointStartX,b=v-t.centerPointStartY,x=l+(f+y),w=c+(g+b),S={top:w,left:x,scaleX:t.contentStartPos.scaleX*u,scaleY:t.contentStartPos.scaleY*u};t.canTap=!1,t.newWidth=p,t.newHeight=h,t.contentLastPos=S,t.requestId&&(o(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},d.prototype.ontouchend=function(e){var i=this,s=Math.max((new Date).getTime()-i.startTime,1),a=i.isSwiping,l=i.isPanning,c=i.isZooming,d=i.isScrolling;return i.endPoints=r(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),t.removeEventListener("scroll",i.onscroll,!0),i.requestId&&(o(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.isScrolling=!1,i.instance.isDragging=!1,i.canTap?i.onTap(e):(i.speed=366,i.velocityX=i.distanceX/s*.5,i.velocityY=i.distanceY/s*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),void(l?i.endPanning():c?i.endZooming():i.endSwiping(a,d)))},d.prototype.endSwiping=function(e,t){var i=this,o=!1,r=i.instance.group.length;i.sliderLastPos=null,"y"==e&&!t&&Math.abs(i.distanceY)>50?(n.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},150),o=i.instance.close(!0,300)):"x"==e&&i.distanceX>50&&r>1?o=i.instance.previous(i.speedX):"x"==e&&i.distanceX<-50&&r>1&&(o=i.instance.next(i.speedX)),!1!==o||"x"!=e&&"y"!=e||(t||r<2?i.instance.centerSlide(i.instance.current,150):i.instance.jumpTo(i.instance.current.index)),i.$container.removeClass("fancybox-is-sliding")},d.prototype.endPanning=function(){var e,t,i,o=this;o.contentLastPos&&(!1===o.opts.momentum?(e=o.contentLastPos.left,t=o.contentLastPos.top):(e=o.contentLastPos.left+o.velocityX*o.speed,t=o.contentLastPos.top+o.velocityY*o.speed),i=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,i,330))},d.prototype.endZooming=function(){var e,t,i,o,r=this,s=r.instance.current,a=r.newWidth,l=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,o={top:t,left:e,width:a,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,o),a<r.canvasWidth&&l<r.canvasHeight?r.instance.scaleToFit(150):a>s.width||l>s.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(i=r.limitPosition(e,t,a,l),n.fancybox.setTranslate(r.content,n.fancybox.getTranslate(r.$content)),n.fancybox.animate(r.$content,i,150)))},d.prototype.onTap=function(e){var t,i=this,o=n(e.target),s=i.instance,a=s.current,l=e&&r(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,d=l[0]?l[0].y-i.$stage.offset().top:0,u=function(t){var o=a.opts[t];if(n.isFunction(o)&&(o=o.apply(s,[a,e])),o)switch(o){case"close":s.close(i.startEvent);break;case"toggleControls":s.toggleControls(!0);break;case"next":s.next();break;case"nextOrClose":s.group.length>1?s.next():s.close(i.startEvent);break;case"zoom":"image"==a.type&&(a.isLoaded||a.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(c,d):s.group.length<2&&s.close(i.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(o.is("img")||!(c>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(o.is(".fancybox-slide"))t="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(d-i.tapY)>50)return this;u("dblclick"+t)}else i.tapX=c,i.tapY=d,a.opts["dblclick"+t]&&a.opts["dblclick"+t]!==a.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,u("click"+t)},500):u("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new d(t))})}(window,document,window.jQuery||jQuery),function(e,t){"use strict";t.extend(!0,t.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg viewBox="0 0 40 40"><path d="M13,12 L27,20 L13,27 Z" /><path d="M15,10 v19 M23,10 v19" /></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(e){var t=this;t.instance&&t.instance.current&&(!0===e||t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.isActive&&t.instance.jumpTo((t.instance.currIndex+1)%t.instance.group.length)},t.instance.current.opts.slideShow.speed):(t.stop(),t.instance.idleSecondsCounter=0,t.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;t&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.set(!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,r,s){var a=i&&i.SlideShow;!a||!o.opts.slideShow||80!==s&&32!==s||t(e.activeElement).is("button,a,input")||(r.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery||jQuery),function(e,t){"use strict";var n=function(){var t,n,i,o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r={};for(n=0;n<o.length;n++)if((t=o[n])&&t[1]in e){for(i=0;i<t.length;i++)r[o[0][i]]=t[i];return r}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t.extend(!0,t.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"><svg viewBox="0 0 40 40"><path d="M9,12 h22 v16 h-22 v-16 v16 h22 v-16 Z" /></svg></button>'},fullScreen:{autoStart:!1}}),t(e).on({"onInit.fb":function(e,t){var n;t&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(e,t,n,i,o){t&&t.FullScreen&&70===o&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=i.isFullscreen(),n=t.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",e),n.$refs.container.toggleClass("fancybox-is-fullscreen",e))})}(document,window.jQuery||jQuery),function(e,t){"use strict";t.fancybox.defaults=t.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg viewBox="0 0 120 120"><path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" /></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},t.fancybox.defaults);var n=function(e){this.init(e)};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this;t.instance=e,e.Thumbs=t;var n=e.group[0],i=e.group[1];t.opts=e.group[e.currIndex].opts.thumbs,t.$button=e.$refs.toolbar.find("[data-fancybox-thumbs]"),t.opts&&n&&i&&("image"==n.type||n.opts.thumb||n.opts.$thumb)&&("image"==i.type||i.opts.thumb||i.opts.$thumb)?(t.$button.show().on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var e,n,i=this,o=i.instance,r=i.opts.parentEl;i.$grid=t('<div class="fancybox-thumbs fancybox-thumbs-'+i.opts.axis+'"></div>').appendTo(o.$refs.container.find(r).addBack().filter(r)),e="<ul>",t.each(o.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",i.$list=t(e).appendTo(i.$grid).on("click","li",function(){o.jumpTo(t(this).data("index"))}),i.$list.find("img").hide().one("load",function(){var e,n,i,o,r=t(this).parent().removeClass("fancybox-thumbs-loading"),s=r.outerWidth(),a=r.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/s,o=n/a,i>=1&&o>=1&&(i>o?(e/=o,n=a):(e=s,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":n>a?Math.floor(.3*a-.3*n):Math.floor(.5*a-.5*n),"margin-left":Math.floor(.5*s-.5*e)}).show()}).each(function(){this.src=t(this).data("src")}),"x"===i.opts.axis&&i.$list.width(parseInt(i.$grid.css("padding-right"))+o.group.length*i.$list.children().eq(0).outerWidth(!0)+"px")},focus:function(e){var t,n,i=this,o=i.$list;i.instance.current&&(t=o.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+i.instance.current.index+'"]').addClass("fancybox-thumbs-active"),n=t.position(),"y"===i.opts.axis&&(n.top<0||n.top>o.height()-t.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+n.top},e):"x"===i.opts.axis&&(n.left<o.parent().scrollLeft()||n.left>o.parent().scrollLeft()+(o.parent().width()-t.outerWidth()))&&o.parent().stop().animate({scrollLeft:n.left},e))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t),i.isActive&&!0===i.opts.autoStart&&i.show())},"beforeShow.fb":function(e,t,n,i){var o=t&&t.Thumbs;o&&o.isVisible&&o.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,o){var r=t&&t.Thumbs;r&&r.isActive&&71===o&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,window.jQuery),function(e,t){"use strict";function n(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(e).replace(/[&<>"'`=\/]/g,function(e){return t[e]})}t.extend(!0,t.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg viewBox="0 0 40 40"><path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z"></svg></button>'},share:{tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p class="fancybox-share__links"><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" /></p></div>'}}),t(e).on("click","[data-fancybox-share]",function(){var e,i,o=t.fancybox.getInstance();o&&(e=!1===o.current.opts.hash?o.current.src:window.location,i=o.current.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===o.current.type?encodeURIComponent(o.current.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,n(e)).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),t.fancybox.open({src:o.translate(o,i),type:"html",opts:{animationEffect:"fade",animationDuration:250,afterLoad:function(e,t){t.$content.find(".fancybox-share__links a").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})}}}))})}(document,window.jQuery||jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,o=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:o}}function o(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(s=!1,t.trigger("click")))}function r(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var s=!0,a=null,l=null;n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(o=r(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o){var c;o&&!1!==o.opts.hash&&(c=r(i))&&""!==c&&(t.location.hash.indexOf(c)<0&&(i.opts.origHash=t.location.hash),a=c+(i.group.length>1?"-"+(o.index+1):""),"replaceState"in t.history?(l&&clearTimeout(l),l=setTimeout(function(){t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+a),l=null,s=!1},300)):t.location.hash=a)},"beforeClose.fb":function(i,o,s){var c,d;l&&clearTimeout(l),!1!==s.opts.hash&&(c=r(o),d=o&&o.opts.origHash?o.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+d):(t.location.hash=d,n(t).scrollTop(o.scrollTop).scrollLeft(o.scrollLeft))),a=null)}}),n(t).on("hashchange.fb",function(){var e=i();n.fancybox.getInstance()?!a||a===e.gallery+"-"+e.index||1===e.index&&a==e.gallery||(a=null,n.fancybox.close()):""!==e.gallery&&o(e)}),setTimeout(function(){o(i())},50))})}(document,window,window.jQuery||jQuery),function(e,t){"use strict";var n=(new Date).getTime();t(e).on({"onInit.fb":function(e,t,i){t.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var i=t.current,o=(new Date).getTime();t.group.length<1||!1===i.opts.wheel||"auto"===i.opts.wheel&&"image"!==i.type||(e.preventDefault(),e.stopPropagation(),i.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,o-n<250||(n=o,t[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,window.jQuery||jQuery),function(e,t){"function"==typeof define&&define.amd?define(["jquery"],t):t(e.jQuery)}(this,function(e){"use strict";function t(t){if(o.webkit&&!t)return{height:0,width:0};if(!o.data.outer){var n={border:"none","box-sizing":"content-box",height:"200px",margin:"0",padding:"0",width:"200px"};o.data.inner=e("<div>").css(e.extend({},n)),o.data.outer=e("<div>").css(e.extend({left:"-1000px",overflow:"scroll",position:"absolute",top:"-1000px"},n)).append(o.data.inner).appendTo("body")}return o.data.outer.scrollLeft(1e3).scrollTop(1e3),{height:Math.ceil(o.data.outer.offset().top-o.data.inner.offset().top||0),width:Math.ceil(o.data.outer.offset().left-o.data.inner.offset().left||0)}}function n(){var e=t(!0);return!(e.height||e.width)}function i(e){var t=e.originalEvent;return(!t.axis||t.axis!==t.HORIZONTAL_AXIS)&&!t.wheelDeltaX}var o={data:{index:0,name:"scrollbar"},firefox:/firefox/i.test(navigator.userAgent),macosx:/mac/i.test(navigator.platform),msedge:/edge\/\d+/i.test(navigator.userAgent),msie:/(msie|trident)/i.test(navigator.userAgent),mobile:/android|webos|iphone|ipad|ipod|blackberry/i.test(navigator.userAgent),overlay:null,scroll:null,scrolls:[],webkit:/webkit/i.test(navigator.userAgent)&&!/edge\/\d+/i.test(navigator.userAgent)};o.scrolls.add=function(e){this.remove(e).push(e)},o.scrolls.remove=function(t){for(;e.inArray(t,this)>=0;)this.splice(e.inArray(t,this),1);return this};var r={autoScrollSize:!0,autoUpdate:!0,debug:!1,disableBodyScroll:!1,duration:200,ignoreMobile:!1,ignoreOverlay:!1,isRtl:!1,scrollStep:30,showArrows:!1,stepScrolling:!0,scrollx:null,scrolly:null,onDestroy:null,onFallback:null,onInit:null,onScroll:null,onUpdate:null},s=function(i){o.scroll||(o.overlay=n(),o.scroll=t(),l(),e(window).resize(function(){var e=!1;if(o.scroll&&(o.scroll.height||o.scroll.width)){var n=t();n.height===o.scroll.height&&n.width===o.scroll.width||(o.scroll=n,e=!0)}l(e)})),this.container=i,this.namespace=".scrollbar_"+o.data.index++,this.options=e.extend({},r,window.jQueryScrollbarOptions||{}),this.scrollTo=null,this.scrollx={},this.scrolly={},i.data(o.data.name,this),o.scrolls.add(this)};s.prototype={destroy:function(){if(this.wrapper){this.container.removeData(o.data.name),o.scrolls.remove(this);var t=this.container.scrollLeft(),n=this.container.scrollTop();this.container.insertBefore(this.wrapper).css({height:"",margin:"","max-height":""}).removeClass("scroll-content scroll-scrollx_visible scroll-scrolly_visible").off(this.namespace).scrollLeft(t).scrollTop(n),this.scrollx.scroll.removeClass("scroll-scrollx_visible").find("div").addBack().off(this.namespace),this.scrolly.scroll.removeClass("scroll-scrolly_visible").find("div").addBack().off(this.namespace),this.wrapper.remove(),e(document).add("body").off(this.namespace),e.isFunction(this.options.onDestroy)&&this.options.onDestroy.apply(this,[this.container])}},init:function(t){
var n=this,r=this.container,s=this.containerWrapper||r,a=this.namespace,l=e.extend(this.options,t||{}),c={x:this.scrollx,y:this.scrolly},d=this.wrapper,u={},p={scrollLeft:r.scrollLeft(),scrollTop:r.scrollTop()};if(o.mobile&&l.ignoreMobile||o.overlay&&l.ignoreOverlay||o.macosx&&!o.webkit)return e.isFunction(l.onFallback)&&l.onFallback.apply(this,[r]),!1;if(d)u={height:"auto","margin-bottom":-1*o.scroll.height+"px","max-height":""},u[l.isRtl?"margin-left":"margin-right"]=-1*o.scroll.width+"px",s.css(u);else{if(this.wrapper=d=e("<div>").addClass("scroll-wrapper").addClass(r.attr("class")).css("position","absolute"===r.css("position")?"absolute":"relative").insertBefore(r).append(r),l.isRtl&&d.addClass("scroll--rtl"),r.is("textarea")&&(this.containerWrapper=s=e("<div>").insertBefore(r).append(r),d.addClass("scroll-textarea")),u={height:"auto","margin-bottom":-1*o.scroll.height+"px","max-height":""},u[l.isRtl?"margin-left":"margin-right"]=-1*o.scroll.width+"px",s.addClass("scroll-content").css(u),r.on("scroll"+a,function(t){var i=r.scrollLeft(),s=r.scrollTop();if(l.isRtl)switch(!0){case o.firefox:i=Math.abs(i);case o.msedge||o.msie:i=r[0].scrollWidth-r[0].clientWidth-i}e.isFunction(l.onScroll)&&l.onScroll.call(n,{maxScroll:c.y.maxScrollOffset,scroll:s,size:c.y.size,visible:c.y.visible},{maxScroll:c.x.maxScrollOffset,scroll:i,size:c.x.size,visible:c.x.visible}),c.x.isVisible&&c.x.scroll.bar.css("left",i*c.x.kx+"px"),c.y.isVisible&&c.y.scroll.bar.css("top",s*c.y.kx+"px")}),d.on("scroll"+a,function(){d.scrollTop(0).scrollLeft(0)}),l.disableBodyScroll){var h=function(e){i(e)?c.y.isVisible&&c.y.mousewheel(e):c.x.isVisible&&c.x.mousewheel(e)};d.on("MozMousePixelScroll"+a,h),d.on("mousewheel"+a,h),o.mobile&&d.on("touchstart"+a,function(t){var n=t.originalEvent.touches&&t.originalEvent.touches[0]||t,i={pageX:n.pageX,pageY:n.pageY},o={left:r.scrollLeft(),top:r.scrollTop()};e(document).on("touchmove"+a,function(e){var t=e.originalEvent.targetTouches&&e.originalEvent.targetTouches[0]||e;r.scrollLeft(o.left+i.pageX-t.pageX),r.scrollTop(o.top+i.pageY-t.pageY),e.preventDefault()}),e(document).on("touchend"+a,function(){e(document).off(a)})})}e.isFunction(l.onInit)&&l.onInit.apply(this,[r])}e.each(c,function(t,s){var d=null,u=1,p="x"===t?"scrollLeft":"scrollTop",h=l.scrollStep,f=function(){var e=r[p]();r[p](e+h),1==u&&e+h>=g&&(e=r[p]()),-1==u&&e+h<=g&&(e=r[p]()),r[p]()==e&&d&&d()},g=0;s.scroll||(s.scroll=n._getScroll(l["scroll"+t]).addClass("scroll-"+t),l.showArrows&&s.scroll.addClass("scroll-element_arrows_visible"),s.mousewheel=function(e){if(!s.isVisible||"x"===t&&i(e))return!0;if("y"===t&&!i(e))return c.x.mousewheel(e),!0;var o=-1*e.originalEvent.wheelDelta||e.originalEvent.detail,a=s.size-s.visible-s.offset;return o||("x"===t&&e.originalEvent.deltaX?o=40*e.originalEvent.deltaX:"y"===t&&e.originalEvent.deltaY&&(o=40*e.originalEvent.deltaY)),(o>0&&g<a||o<0&&g>0)&&(g+=o,g<0&&(g=0),g>a&&(g=a),n.scrollTo=n.scrollTo||{},n.scrollTo[p]=g,setTimeout(function(){n.scrollTo&&(r.stop().animate(n.scrollTo,240,"linear",function(){g=r[p]()}),n.scrollTo=null)},1)),e.preventDefault(),!1},s.scroll.on("MozMousePixelScroll"+a,s.mousewheel).on("mousewheel"+a,s.mousewheel).on("mouseenter"+a,function(){g=r[p]()}),s.scroll.find(".scroll-arrow, .scroll-element_track").on("mousedown"+a,function(i){if(1!=i.which)return!0;u=1;var a={eventOffset:i["x"===t?"pageX":"pageY"],maxScrollValue:s.size-s.visible-s.offset,scrollbarOffset:s.scroll.bar.offset()["x"===t?"left":"top"],scrollbarSize:s.scroll.bar["x"===t?"outerWidth":"outerHeight"]()},c=0,m=0;if(e(this).hasClass("scroll-arrow")){if(u=e(this).hasClass("scroll-arrow_more")?1:-1,h=l.scrollStep*u,g=u>0?a.maxScrollValue:0,l.isRtl)switch(!0){case o.firefox:g=u>0?0:-1*a.maxScrollValue;break;case o.msie||o.msedge:}}else u=a.eventOffset>a.scrollbarOffset+a.scrollbarSize?1:a.eventOffset<a.scrollbarOffset?-1:0,"x"===t&&l.isRtl&&(o.msie||o.msedge)&&(u*=-1),h=Math.round(.75*s.visible)*u,g=a.eventOffset-a.scrollbarOffset-(l.stepScrolling?1==u?a.scrollbarSize:0:Math.round(a.scrollbarSize/2)),g=r[p]()+g/s.kx;return n.scrollTo=n.scrollTo||{},n.scrollTo[p]=l.stepScrolling?r[p]()+h:g,l.stepScrolling&&(d=function(){g=r[p](),clearInterval(m),clearTimeout(c),c=0,m=0},c=setTimeout(function(){m=setInterval(f,40)},l.duration+100)),setTimeout(function(){n.scrollTo&&(r.animate(n.scrollTo,l.duration),n.scrollTo=null)},1),n._handleMouseDown(d,i)}),s.scroll.bar.on("mousedown"+a,function(i){if(1!=i.which)return!0;var c=i["x"===t?"pageX":"pageY"],d=r[p]();return s.scroll.addClass("scroll-draggable"),e(document).on("mousemove"+a,function(e){var n=parseInt((e["x"===t?"pageX":"pageY"]-c)/s.kx,10);"x"===t&&l.isRtl&&(o.msie||o.msedge)&&(n*=-1),r[p](d+n)}),n._handleMouseDown(function(){s.scroll.removeClass("scroll-draggable"),g=r[p]()},i)}))}),e.each(c,function(e,t){var n="scroll-scroll"+e+"_visible",i="x"==e?c.y:c.x;t.scroll.removeClass(n),i.scroll.removeClass(n),s.removeClass(n)}),e.each(c,function(t,n){e.extend(n,"x"==t?{offset:parseInt(r.css("left"),10)||0,size:r.prop("scrollWidth"),visible:d.width()}:{offset:parseInt(r.css("top"),10)||0,size:r.prop("scrollHeight"),visible:d.height()})}),this._updateScroll("x",this.scrollx),this._updateScroll("y",this.scrolly),e.isFunction(l.onUpdate)&&l.onUpdate.apply(this,[r]),e.each(c,function(e,t){var n="x"===e?"left":"top",i="x"===e?"outerWidth":"outerHeight",o="x"===e?"width":"height",s=parseInt(r.css(n),10)||0,a=t.size,c=t.visible+s,d=t.scroll.size[i]()+(parseInt(t.scroll.size.css(n),10)||0);l.autoScrollSize&&(t.scrollbarSize=parseInt(d*c/a,10),t.scroll.bar.css(o,t.scrollbarSize+"px")),t.scrollbarSize=t.scroll.bar[i](),t.kx=(d-t.scrollbarSize)/(a-c)||1,t.maxScrollOffset=a-c}),r.scrollLeft(p.scrollLeft).scrollTop(p.scrollTop).trigger("scroll")},_getScroll:function(t){var n={advanced:['<div class="scroll-element">','<div class="scroll-element_corner"></div>','<div class="scroll-arrow scroll-arrow_less"></div>','<div class="scroll-arrow scroll-arrow_more"></div>','<div class="scroll-element_outer">','<div class="scroll-element_size"></div>','<div class="scroll-element_inner-wrapper">','<div class="scroll-element_inner scroll-element_track">','<div class="scroll-element_inner-bottom"></div>',"</div>","</div>",'<div class="scroll-bar">','<div class="scroll-bar_body">','<div class="scroll-bar_body-inner"></div>',"</div>",'<div class="scroll-bar_bottom"></div>','<div class="scroll-bar_center"></div>',"</div>","</div>","</div>"].join(""),simple:['<div class="scroll-element">','<div class="scroll-element_outer">','<div class="scroll-element_size"></div>','<div class="scroll-element_track"></div>','<div class="scroll-bar"></div>',"</div>","</div>"].join("")};return n[t]&&(t=n[t]),t||(t=n.simple),t="string"==typeof t?e(t).appendTo(this.wrapper):e(t),e.extend(t,{bar:t.find(".scroll-bar"),size:t.find(".scroll-element_size"),track:t.find(".scroll-element_track")}),t},_handleMouseDown:function(t,n){var i=this.namespace;return e(document).on("blur"+i,function(){e(document).add("body").off(i),t&&t()}),e(document).on("dragstart"+i,function(e){return e.preventDefault(),!1}),e(document).on("mouseup"+i,function(){e(document).add("body").off(i),t&&t()}),e("body").on("selectstart"+i,function(e){return e.preventDefault(),!1}),n&&n.preventDefault(),!1},_updateScroll:function(t,n){var i=this.container,r=this.containerWrapper||i,s="scroll-scroll"+t+"_visible",a="x"===t?this.scrolly:this.scrollx,l=parseInt(this.container.css("x"===t?"left":"top"),10)||0,c=this.wrapper,d=n.size,u=n.visible+l;n.isVisible=d-u>1,n.isVisible?(n.scroll.addClass(s),a.scroll.addClass(s),r.addClass(s)):(n.scroll.removeClass(s),a.scroll.removeClass(s),r.removeClass(s)),"y"===t&&(i.is("textarea")||d<u?r.css({height:u+o.scroll.height+"px","max-height":"none"}):r.css({"max-height":u+o.scroll.height+"px"})),n.size==i.prop("scrollWidth")&&a.size==i.prop("scrollHeight")&&n.visible==c.width()&&a.visible==c.height()&&n.offset==(parseInt(i.css("left"),10)||0)&&a.offset==(parseInt(i.css("top"),10)||0)||(e.extend(this.scrollx,{offset:parseInt(i.css("left"),10)||0,size:i.prop("scrollWidth"),visible:c.width()}),e.extend(this.scrolly,{offset:parseInt(i.css("top"),10)||0,size:this.container.prop("scrollHeight"),visible:c.height()}),this._updateScroll("x"===t?"y":"x",a))}};var a=s;e.fn.scrollbar=function(t,n){return"string"!=typeof t&&(n=t,t="init"),void 0===n&&(n=[]),e.isArray(n)||(n=[n]),this.not("body, .scroll-wrapper").each(function(){var i=e(this),r=i.data(o.data.name);(r||"init"===t)&&(r||(r=new a(i)),r[t]&&r[t].apply(r,n))}),this},e.fn.scrollbar.options=r;var l=function(){var e=0,t=0;return function(n){var i,r,s,a,c,d,u;for(i=0;i<o.scrolls.length;i++)a=o.scrolls[i],r=a.container,s=a.options,c=a.wrapper,d=a.scrollx,u=a.scrolly,(n||s.autoUpdate&&c&&c.is(":visible")&&(r.prop("scrollWidth")!=d.size||r.prop("scrollHeight")!=u.size||c.width()!=d.visible||c.height()!=u.visible))&&(a.init(),s.debug&&(window.console&&console.log({scrollHeight:r.prop("scrollHeight")+":"+a.scrolly.size,scrollWidth:r.prop("scrollWidth")+":"+a.scrollx.size,visibleHeight:c.height()+":"+a.scrolly.visible,visibleWidth:c.width()+":"+a.scrollx.visible},!0),t++));clearTimeout(e),e=setTimeout(l,300)}}();window.angular&&function(e){e.module("jQueryScrollbar",[]).provider("jQueryScrollbar",function(){var t=r;return{setOptions:function(n){e.extend(t,n)},$get:function(){return{options:e.copy(t)}}}}).directive("jqueryScrollbar",["jQueryScrollbar","$parse",function(e,t){return{restrict:"AC",link:function(n,i,o){var r=t(o.jqueryScrollbar),s=r(n);i.scrollbar(s||e.options).on("$destroy",function(){i.scrollbar("destroy")})}}}])}(window.angular)}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=function(t,n){return void 0===n&&(n="undefined"!=typeof window?require("jquery"):require("jquery")(t)),e(n),n}:e(jQuery)}(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd)var t=e.fn.select2.amd;var t;return function(){if(!t||!t.requirejs){t?n=t:t={};var e,n,i;!function(t){function o(e,t){return w.call(e,t)}function r(e,t){var n,i,o,r,s,a,l,c,d,u,p,h,f=t&&t.split("/"),g=b.map,m=g&&g["*"]||{};if(e){for(e=e.split("/"),s=e.length-1,b.nodeIdCompat&&T.test(e[s])&&(e[s]=e[s].replace(T,"")),"."===e[0].charAt(0)&&f&&(h=f.slice(0,f.length-1),e=h.concat(e)),d=0;d<e.length;d++)if("."===(p=e[d]))e.splice(d,1),d-=1;else if(".."===p){if(0===d||1===d&&".."===e[2]||".."===e[d-1])continue;d>0&&(e.splice(d-1,2),d-=2)}e=e.join("/")}if((f||m)&&g){for(n=e.split("/"),d=n.length;d>0;d-=1){if(i=n.slice(0,d).join("/"),f)for(u=f.length;u>0;u-=1)if((o=g[f.slice(0,u).join("/")])&&(o=o[i])){r=o,a=d;break}if(r)break;!l&&m&&m[i]&&(l=m[i],c=d)}!r&&l&&(r=l,a=c),r&&(n.splice(0,a,r),e=n.join("/"))}return e}function s(e,n){return function(){var i=S.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),f.apply(t,i.concat([e,n]))}}function a(e){return function(t){return r(t,e)}}function l(e){return function(t){v[e]=t}}function c(e){if(o(y,e)){var n=y[e];delete y[e],x[e]=!0,h.apply(t,n)}if(!o(v,e)&&!o(x,e))throw new Error("No "+e);return v[e]}function d(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function u(e){return e?d(e):[]}function p(e){return function(){return b&&b.config&&b.config[e]||{}}}var h,f,g,m,v={},y={},b={},x={},w=Object.prototype.hasOwnProperty,S=[].slice,T=/\.js$/;g=function(e,t){var n,i=d(e),o=i[0],s=t[1];return e=i[1],o&&(o=r(o,s),n=c(o)),o?e=n&&n.normalize?n.normalize(e,a(s)):r(e,s):(e=r(e,s),i=d(e),o=i[0],e=i[1],o&&(n=c(o))),{f:o?o+"!"+e:e,n:e,pr:o,p:n}},m={require:function(e){return s(e)},exports:function(e){var t=v[e];return void 0!==t?t:v[e]={}},module:function(e){return{id:e,uri:"",exports:v[e],config:p(e)}}},h=function(e,n,i,r){var a,d,p,h,f,b,w,S=[],T=typeof i;if(r=r||e,b=u(r),"undefined"===T||"function"===T){for(n=!n.length&&i.length?["require","exports","module"]:n,f=0;f<n.length;f+=1)if(h=g(n[f],b),"require"===(d=h.f))S[f]=m.require(e);else if("exports"===d)S[f]=m.exports(e),w=!0;else if("module"===d)a=S[f]=m.module(e);else if(o(v,d)||o(y,d)||o(x,d))S[f]=c(d);else{if(!h.p)throw new Error(e+" missing "+d);h.p.load(h.n,s(r,!0),l(d),{}),S[f]=v[d]}p=i?i.apply(v[e],S):void 0,e&&(a&&a.exports!==t&&a.exports!==v[e]?v[e]=a.exports:p===t&&w||(v[e]=p))}else e&&(v[e]=i)},e=n=f=function(e,n,i,o,r){if("string"==typeof e)return m[e]?m[e](n):c(g(e,u(n)).f);if(!e.splice){if(b=e,b.deps&&f(b.deps,b.callback),!n)return;n.splice?(e=n,n=i,i=null):e=t}return n=n||function(){},"function"==typeof i&&(i=o,o=r),o?h(t,e,n,i):setTimeout(function(){h(t,e,n,i)},4),f},f.config=function(e){return f(e)},e._defined=v,i=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),o(v,e)||o(y,e)||(y[e]=[e,t,n])},i.amd={jQuery:!0}}(),t.requirejs=e,t.require=n,t.define=i}}(),t.define("almond",function(){}),t.define("jquery",[],function(){var t=e||$;return null==t&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),t}),t.define("select2/utils",["jquery"],function(e){function t(e){var t=e.prototype,n=[];for(var i in t){"function"==typeof t[i]&&("constructor"!==i&&n.push(i))}return n}var n={};n.Extend=function(e,t){function n(){this.constructor=e}var i={}.hasOwnProperty;for(var o in t)i.call(t,o)&&(e[o]=t[o]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},n.Decorate=function(e,n){function i(){var t=Array.prototype.unshift,i=n.prototype.constructor.length,o=e.prototype.constructor;i>0&&(t.call(arguments,e.prototype.constructor),o=n.prototype.constructor),o.apply(this,arguments)}function o(){this.constructor=i}var r=t(n),s=t(e);n.displayName=e.displayName,i.prototype=new o;for(var a=0;a<s.length;a++){var l=s[a];i.prototype[l]=e.prototype[l]}for(var c=0;c<r.length;c++){var d=r[c];i.prototype[d]=function(e){var t=function(){};e in i.prototype&&(t=i.prototype[e]);var o=n.prototype[e];return function(){return Array.prototype.unshift.call(arguments,t),o.apply(this,arguments)}}(d)}return i};var i=function(){this.listeners={}};i.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},i.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},null==n&&(n=[]),0===n.length&&n.push({}),n[0]._type=e,e in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},n.Observable=i,n.generateChars=function(e){for(var t="",n=0;n<e;n++){t+=Math.floor(36*Math.random()).toString(36)}return t},n.bind=function(e,t){return function(){e.apply(t,arguments)}},n._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var o=0;o<n.length;o++){var r=n[o];r=r.substring(0,1).toLowerCase()+r.substring(1),r in i||(i[r]={}),o==n.length-1&&(i[r]=e[t]),i=i[r]}delete e[t]}}return e},n.hasScroll=function(t,n){var i=e(n),o=n.style.overflowX,r=n.style.overflowY;return(o!==r||"hidden"!==r&&"visible"!==r)&&("scroll"===o||"scroll"===r||(i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth))},n.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},n.appendMany=function(t,n){if("1.7"===e.fn.jquery.substr(0,3)){var i=e();e.map(n,function(e){i=i.add(e)}),n=i}t.append(n)},n.__cache={};var o=0;return n.GetUniqueElementId=function(e){var t=e.getAttribute("data-select2-id");return null==t&&(e.id?(t=e.id,e.setAttribute("data-select2-id",t)):(e.setAttribute("data-select2-id",++o),t=o.toString())),t},n.StoreData=function(e,t,i){var o=n.GetUniqueElementId(e);n.__cache[o]||(n.__cache[o]={}),n.__cache[o][t]=i},n.GetData=function(t,i){var o=n.GetUniqueElementId(t);return i?n.__cache[o]&&null!=n.__cache[o][i]?n.__cache[o][i]:e(t).data(i):n.__cache[o]},n.RemoveData=function(e){var t=n.GetUniqueElementId(e);null!=n.__cache[t]&&delete n.__cache[t],e.removeAttribute("data-select2-id")},n}),t.define("select2/results",["jquery","./utils"],function(e,t){function n(e,t,i){this.$element=e,this.data=i,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple")&&t.attr("aria-multiselectable","true"),this.$results=t,t},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(t){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=e('<li role="alert" aria-live="assertive" class="select2-results__option"></li>'),o=this.options.get("translations").get(t.message);i.append(n(o(t.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(e){this.hideLoading();var t=[];if(null==e.results||0===e.results.length)return void(0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"}));e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],o=this.option(i);t.push(o)}this.$results.append(t)},n.prototype.position=function(e,t){t.find(".select2-results").append(e)},n.prototype.sort=function(e){return this.options.get("sorter")(e)},n.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]"),t=e.filter("[aria-selected=true]");t.length>0?t.first().trigger("mouseenter"):e.first().trigger("mouseenter"),this.ensureHighlightVisible()},n.prototype.setClasses=function(){var n=this;this.data.current(function(i){var o=e.map(i,function(e){return e.id.toString()});n.$results.find(".select2-results__option[aria-selected]").each(function(){var n=e(this),i=t.GetData(this,"data"),r=""+i.id;null!=i.element&&i.element.selected||null==i.element&&e.inArray(r,o)>-1?n.attr("aria-selected","true"):n.attr("aria-selected","false")})})},n.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:t(e)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(n){var i=document.createElement("li");i.className="select2-results__option";var o={role:"option","aria-selected":"false"},r=window.Element.prototype.matches||window.Element.prototype.msMatchesSelector||window.Element.prototype.webkitMatchesSelector;(null!=n.element&&r.call(n.element,":disabled")||null==n.element&&n.disabled)&&(delete o["aria-selected"],o["aria-disabled"]="true"),null==n.id&&delete o["aria-selected"],null!=n._resultId&&(i.id=n._resultId),n.title&&(i.title=n.title),n.children&&(o.role="group",o["aria-label"]=n.text,delete o["aria-selected"]);for(var s in o){var a=o[s];i.setAttribute(s,a)}if(n.children){var l=e(i),c=document.createElement("strong");c.className="select2-results__group";e(c);this.template(n,c);for(var d=[],u=0;u<n.children.length;u++){var p=n.children[u],h=this.option(p);d.push(h)}var f=e("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});f.append(d),l.append(c),l.append(f)}else this.template(n,i);return t.StoreData(i,"data",n),i},n.prototype.bind=function(n,i){var o=this,r=n.id+"-results";this.$results.attr("id",r),n.on("results:all",function(e){o.clear(),o.append(e.data),n.isOpen()&&(o.setClasses(),o.highlightFirstItem())}),n.on("results:append",function(e){o.append(e.data),n.isOpen()&&o.setClasses()}),n.on("query",function(e){o.hideMessages(),o.showLoading(e)}),n.on("select",function(){n.isOpen()&&(o.setClasses(),o.options.get("scrollAfterSelect")&&o.highlightFirstItem())}),n.on("unselect",function(){n.isOpen()&&(o.setClasses(),o.options.get("scrollAfterSelect")&&o.highlightFirstItem())}),n.on("open",function(){o.$results.attr("aria-expanded","true"),o.$results.attr("aria-hidden","false"),o.setClasses(),o.ensureHighlightVisible()}),n.on("close",function(){o.$results.attr("aria-expanded","false"),o.$results.attr("aria-hidden","true"),o.$results.removeAttr("aria-activedescendant")}),n.on("results:toggle",function(){var e=o.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),n.on("results:select",function(){var e=o.getHighlightedResults();if(0!==e.length){var n=t.GetData(e[0],"data");"true"==e.attr("aria-selected")?o.trigger("close",{}):o.trigger("select",{data:n})}}),n.on("results:previous",function(){var e=o.getHighlightedResults(),t=o.$results.find("[aria-selected]"),n=t.index(e);if(!(n<=0)){var i=n-1;0===e.length&&(i=0);var r=t.eq(i);r.trigger("mouseenter");var s=o.$results.offset().top,a=r.offset().top,l=o.$results.scrollTop()+(a-s);0===i?o.$results.scrollTop(0):a-s<0&&o.$results.scrollTop(l)}}),n.on("results:next",function(){var e=o.getHighlightedResults(),t=o.$results.find("[aria-selected]"),n=t.index(e),i=n+1;if(!(i>=t.length)){var r=t.eq(i);r.trigger("mouseenter");var s=o.$results.offset().top+o.$results.outerHeight(!1),a=r.offset().top+r.outerHeight(!1),l=o.$results.scrollTop()+a-s;0===i?o.$results.scrollTop(0):a>s&&o.$results.scrollTop(l)}}),n.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),n.on("results:message",function(e){o.displayMessage(e)}),e.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=o.$results.scrollTop(),n=o.$results.get(0).scrollHeight-t+e.deltaY,i=e.deltaY>0&&t-e.deltaY<=0,r=e.deltaY<0&&n<=o.$results.height();i?(o.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):r&&(o.$results.scrollTop(o.$results.get(0).scrollHeight-o.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(n){var i=e(this),r=t.GetData(this,"data");if("true"===i.attr("aria-selected"))return void(o.options.get("multiple")?o.trigger("unselect",{originalEvent:n,data:r}):o.trigger("close",{}));o.trigger("select",{originalEvent:n,data:r})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(n){var i=t.GetData(this,"data");o.getHighlightedResults().removeClass("select2-results__option--highlighted"),o.trigger("results:focus",{data:i,element:e(this)})})},n.prototype.getHighlightedResults=function(){return this.$results.find(".select2-results__option--highlighted")},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(0!==e.length){var t=this.$results.find("[aria-selected]"),n=t.index(e),i=this.$results.offset().top,o=e.offset().top,r=this.$results.scrollTop()+(o-i),s=o-i;r-=2*e.outerHeight(!1),n<=2?this.$results.scrollTop(0):(s>this.$results.outerHeight()||s<0)&&this.$results.scrollTop(r)}},n.prototype.template=function(t,n){var i=this.options.get("templateResult"),o=this.options.get("escapeMarkup"),r=i(t,n);null==r?n.style.display="none":"string"==typeof r?n.innerHTML=o(r):e(n).append(r)},n}),t.define("select2/keys",[],function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}}),t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,t.Observable),i.prototype.render=function(){var n=e('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=t.GetData(this.$element[0],"old-tabindex")?this._tabindex=t.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),n.attr("title",this.$element.attr("title")),n.attr("tabindex",this._tabindex),n.attr("aria-disabled","false"),this.$selection=n,n},i.prototype.bind=function(e,t){var i=this,o=e.id+"-results";this.container=e,this.$selection.on("focus",function(e){i.trigger("focus",e)}),this.$selection.on("blur",function(e){i._handleBlur(e)}),this.$selection.on("keydown",function(e){i.trigger("keypress",e),e.which===n.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){i.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){i.update(e.data)}),e.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",o),i._attachCloseHandler(e)}),e.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.trigger("focus"),i._detachCloseHandler(e)}),e.on("enable",function(){i.$selection.attr("tabindex",i._tabindex),i.$selection.attr("aria-disabled","false")}),e.on("disable",function(){i.$selection.attr("tabindex","-1"),i.$selection.attr("aria-disabled","true")})},i.prototype._handleBlur=function(t){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||e.contains(n.$selection[0],document.activeElement)||n.trigger("blur",t)},1)},i.prototype._attachCloseHandler=function(n){e(document.body).on("mousedown.select2."+n.id,function(n){var i=e(n.target),o=i.closest(".select2");e(".select2.select2-container--open").each(function(){this!=o[0]&&t.GetData(this,"element").select2("close")})})},i.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)},i.prototype.position=function(e,t){t.find(".selection").append(e)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},i.prototype.isEnabled=function(){return!this.isDisabled()},i.prototype.isDisabled=function(){return this.options.get("disabled")},i}),t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function o(){o.__super__.constructor.apply(this,arguments)}return n.Extend(o,t),o.prototype.render=function(){var e=o.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},o.prototype.bind=function(e,t){var n=this;o.__super__.bind.apply(this,arguments);var i=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),e.on("focus",function(t){e.isOpen()||n.$selection.trigger("focus")})},o.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},o.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},o.prototype.selectionContainer=function(){return e("<span></span>")},o.prototype.update=function(e){if(0===e.length)return void this.clear();var t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n);n.empty().append(i);var o=t.title||t.text;o?n.attr("title",o):n.removeAttr("title")},o}),t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,n){function i(e,t){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,t),i.prototype.render=function(){var e=i.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},i.prototype.bind=function(t,o){var r=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){r.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(t){if(!r.isDisabled()){var i=e(this),o=i.parent(),s=n.GetData(o[0],"data");r.trigger("unselect",{originalEvent:t,data:s})}})},i.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},i.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},i.prototype.selectionContainer=function(){return e('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>')},i.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],i=0;i<e.length;i++){var o=e[i],r=this.selectionContainer(),s=this.display(o,r);r.append(s);var a=o.title||o.text;a&&r.attr("title",a),n.StoreData(r[0],"data",o),t.push(r)}var l=this.$selection.find(".select2-selection__rendered");n.appendMany(l,t)}},i}),t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id;if(t.length>1||n)return e.call(this,t);this.clear();var i=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(i)},t}),t.define("select2/selection/allowClear",["jquery","../keys","../utils"],function(e,t,n){function i(){}return i.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},i.prototype._handleClear=function(e,t){if(!this.isDisabled()){var i=this.$selection.find(".select2-selection__clear");if(0!==i.length){t.stopPropagation();var o=n.GetData(i[0],"data"),r=this.$element.val();this.$element.val(this.placeholder.id);var s={data:o};if(this.trigger("clear",s),s.prevented)return void this.$element.val(r);for(var a=0;a<o.length;a++)if(s={data:o[a]},this.trigger("unselect",s),s.prevented)return void this.$element.val(r);this.$element.trigger("input").trigger("change"),this.trigger("toggle",{})}}},i.prototype._handleKeyboardClear=function(e,n,i){i.isOpen()||n.which!=t.DELETE&&n.which!=t.BACKSPACE||this._handleClear(n)},i.prototype.update=function(t,i){if(t.call(this,i),!(this.$selection.find(".select2-selection__placeholder").length>0||0===i.length)){var o=this.options.get("translations").get("removeAllItems"),r=e('<span class="select2-selection__clear" title="'+o()+'">&times;</span>');n.StoreData(r[0],"data",i),this.$selection.find(".select2-selection__rendered").prepend(r)}},i}),t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,n){function i(e,t,n){e.call(this,t,n)}return i.prototype.render=function(t){var n=e('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=t.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(e,i,o){var r=this,s=i.id+"-results"
;e.call(this,i,o),i.on("open",function(){r.$search.attr("aria-controls",s),r.$search.trigger("focus")}),i.on("close",function(){r.$search.val(""),r.$search.removeAttr("aria-controls"),r.$search.removeAttr("aria-activedescendant"),r.$search.trigger("focus")}),i.on("enable",function(){r.$search.prop("disabled",!1),r._transferTabIndex()}),i.on("disable",function(){r.$search.prop("disabled",!0)}),i.on("focus",function(e){r.$search.trigger("focus")}),i.on("results:focus",function(e){e.data._resultId?r.$search.attr("aria-activedescendant",e.data._resultId):r.$search.removeAttr("aria-activedescendant")}),this.$selection.on("focusin",".select2-search--inline",function(e){r.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){r._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){if(e.stopPropagation(),r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented(),e.which===n.BACKSPACE&&""===r.$search.val()){var i=r.$searchContainer.prev(".select2-selection__choice");if(i.length>0){var o=t.GetData(i[0],"data");r.searchRemoveChoice(o),e.preventDefault()}}}),this.$selection.on("click",".select2-search--inline",function(e){r.$search.val()&&e.stopPropagation()});var a=document.documentMode,l=a&&a<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){if(l)return void r.$selection.off("input.search input.searchcheck");r.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(l&&"input"===e.type)return void r.$selection.off("input.search input.searchcheck");var t=e.which;t!=n.SHIFT&&t!=n.CTRL&&t!=n.ALT&&t!=n.TAB&&r.handleSearch(e)})},i.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},i.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.trigger("focus")},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(""!==this.$search.attr("placeholder"))e=this.$selection.find(".select2-selection__rendered").width();else{e=.75*(this.$search.val().length+1)+"em"}this.$search.css("width",e)},i}),t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}return t.prototype.bind=function(t,n,i){var o=this,r=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],s=["opening","closing","selecting","unselecting","clearing"];t.call(this,n,i),n.on("*",function(t,n){if(-1!==e.inArray(t,r)){n=n||{};var i=e.Event("select2:"+t,{params:n});o.$element.trigger(i),-1!==e.inArray(t,s)&&(n.prevented=i.isDefaultPrevented())}})},t}),t.define("select2/translation",["jquery","require"],function(e,t){function n(e){this.dict=e||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(e){return this.dict[e]},n.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)},n._cache={},n.loadPath=function(e){if(!(e in n._cache)){var i=t(e);n._cache[e]=i}return new n(n._cache[e])},n}),t.define("select2/diacritics",[],function(){return{"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Œ":"OE","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","œ":"oe","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ώ":"ω","ς":"σ","’":"'"}}),t.define("select2/data/base",["../utils"],function(e){function t(e,n){t.__super__.constructor.call(this)}return e.Extend(t,e.Observable),t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},t.prototype.bind=function(e,t){},t.prototype.destroy=function(){},t.prototype.generateResultId=function(t,n){var i=t.id+"-result-";return i+=e.generateChars(4),null!=n.id?i+="-"+n.id.toString():i+="-"+e.generateChars(4),i},t}),t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,e),i.prototype.current=function(e){var t=[],i=this;this.$element.find(":selected").each(function(){var e=n(this),o=i.item(e);t.push(o)}),e(t)},i.prototype.select=function(e){var t=this;if(e.selected=!0,n(e.element).is("option"))return e.element.selected=!0,void this.$element.trigger("input").trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var o=[];e=[e],e.push.apply(e,i);for(var r=0;r<e.length;r++){var s=e[r].id;-1===n.inArray(s,o)&&o.push(s)}t.$element.val(o),t.$element.trigger("input").trigger("change")});else{var i=e.id;this.$element.val(i),this.$element.trigger("input").trigger("change")}},i.prototype.unselect=function(e){var t=this;if(this.$element.prop("multiple")){if(e.selected=!1,n(e.element).is("option"))return e.element.selected=!1,void this.$element.trigger("input").trigger("change");this.current(function(i){for(var o=[],r=0;r<i.length;r++){var s=i[r].id;s!==e.id&&-1===n.inArray(s,o)&&o.push(s)}t.$element.val(o),t.$element.trigger("input").trigger("change")})}},i.prototype.bind=function(e,t){var n=this;this.container=e,e.on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){t.RemoveData(this)})},i.prototype.query=function(e,t){var i=[],o=this;this.$element.children().each(function(){var t=n(this);if(t.is("option")||t.is("optgroup")){var r=o.item(t),s=o.matches(e,r);null!==s&&i.push(s)}}),t({results:i})},i.prototype.addOptions=function(e){t.appendMany(this.$element,e)},i.prototype.option=function(e){var i;e.children?(i=document.createElement("optgroup"),i.label=e.text):(i=document.createElement("option"),void 0!==i.textContent?i.textContent=e.text:i.innerText=e.text),void 0!==e.id&&(i.value=e.id),e.disabled&&(i.disabled=!0),e.selected&&(i.selected=!0),e.title&&(i.title=e.title);var o=n(i),r=this._normalizeItem(e);return r.element=i,t.StoreData(i,"data",r),o},i.prototype.item=function(e){var i={};if(null!=(i=t.GetData(e[0],"data")))return i;if(e.is("option"))i={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){i={text:e.prop("label"),children:[],title:e.prop("title")};for(var o=e.children("option"),r=[],s=0;s<o.length;s++){var a=n(o[s]),l=this.item(a);r.push(l)}i.children=r}return i=this._normalizeItem(i),i.element=e[0],t.StoreData(e[0],"data",i),i},i.prototype._normalizeItem=function(e){e!==Object(e)&&(e={id:e,text:e}),e=n.extend({},{text:""},e);var t={selected:!1,disabled:!1};return null!=e.id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),n.extend({},t,e)},i.prototype.matches=function(e,t){return this.options.get("matcher")(e,t)},i}),t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,n){function i(e,t){this._dataToConvert=t.get("data")||[],i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype.bind=function(e,t){i.__super__.bind.call(this,e,t),this.addOptions(this.convertToOptions(this._dataToConvert))},i.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,n){return n.value==e.id.toString()});0===t.length&&(t=this.option(e),this.addOptions(t)),i.__super__.select.call(this,e)},i.prototype.convertToOptions=function(e){for(var i=this,o=this.$element.find("option"),r=o.map(function(){return i.item(n(this)).id}).get(),s=[],a=0;a<e.length;a++){var l=this._normalizeItem(e[a]);if(n.inArray(l.id,r)>=0){var c=o.filter(function(e){return function(){return n(this).val()==e.id}}(l)),d=this.item(c),u=n.extend(!0,{},l,d),p=this.option(u);c.replaceWith(p)}else{var h=this.option(l);if(l.children){var f=this.convertToOptions(l.children);t.appendMany(h,f)}s.push(h)}}return s},i}),t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,n){function i(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype._applyDefaults=function(e){var t={data:function(e){return n.extend({},e,{q:e.term})},transport:function(e,t,i){var o=n.ajax(e);return o.then(t),o.fail(i),o}};return n.extend({},t,e,!0)},i.prototype.processResults=function(e){return e},i.prototype.query=function(e,t){function i(){var i=r.transport(r,function(i){var r=o.processResults(i,e);o.options.get("debug")&&window.console&&console.error&&(r&&r.results&&n.isArray(r.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),t(r)},function(){"status"in i&&(0===i.status||"0"===i.status)||o.trigger("results:message",{message:"errorLoading"})});o._request=i}var o=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var r=n.extend({type:"GET"},this.ajaxOptions);"function"==typeof r.url&&(r.url=r.url.call(this.$element,e)),"function"==typeof r.data&&(r.data=r.data.call(this.$element,e)),this.ajaxOptions.delay&&null!=e.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(i,this.ajaxOptions.delay)):i()},i}),t.define("select2/data/tags",["jquery"],function(e){function t(t,n,i){var o=i.get("tags"),r=i.get("createTag");void 0!==r&&(this.createTag=r);var s=i.get("insertTag");if(void 0!==s&&(this.insertTag=s),t.call(this,n,i),e.isArray(o))for(var a=0;a<o.length;a++){var l=o[a],c=this._normalizeItem(l),d=this.option(c);this.$element.append(d)}}return t.prototype.query=function(e,t,n){function i(e,r){for(var s=e.results,a=0;a<s.length;a++){var l=s[a],c=null!=l.children&&!i({results:l.children},!0);if((l.text||"").toUpperCase()===(t.term||"").toUpperCase()||c)return!r&&(e.data=s,void n(e))}if(r)return!0;var d=o.createTag(t);if(null!=d){var u=o.option(d);u.attr("data-select2-tag",!0),o.addOptions([u]),o.insertTag(s,d)}e.results=s,n(e)}var o=this;if(this._removeOldTags(),null==t.term||null!=t.page)return void e.call(this,t,n);e.call(this,t,i)},t.prototype.createTag=function(t,n){var i=e.trim(n.term);return""===i?null:{id:i,text:i}},t.prototype.insertTag=function(e,t,n){t.unshift(n)},t.prototype._removeOldTags=function(t){this.$element.find("option[data-select2-tag]").each(function(){this.selected||e(this).remove()})},t}),t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return t.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},t.prototype.query=function(t,n,i){function o(t){var n=s._normalizeItem(t);if(!s.$element.find("option").filter(function(){return e(this).val()===n.id}).length){var i=s.option(n);i.attr("data-select2-tag",!0),s._removeOldTags(),s.addOptions([i])}r(n)}function r(e){s.trigger("select",{data:e})}var s=this;n.term=n.term||"";var a=this.tokenizer(n,this.options,o);a.term!==n.term&&(this.$search.length&&(this.$search.val(a.term),this.$search.trigger("focus")),n.term=a.term),t.call(this,n,i)},t.prototype.tokenizer=function(t,n,i,o){for(var r=i.get("tokenSeparators")||[],s=n.term,a=0,l=this.createTag||function(e){return{id:e.term,text:e.term}};a<s.length;){var c=s[a];if(-1!==e.inArray(c,r)){var d=s.substr(0,a),u=e.extend({},n,{term:d}),p=l(u);null!=p?(o(p),s=s.substr(a+1)||"",a=0):a++}else a++}return{term:s}},t}),t.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){if(t.term=t.term||"",t.term.length<this.minimumInputLength)return void this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}});e.call(this,t,n)},e}),t.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){if(t.term=t.term||"",this.maximumInputLength>0&&t.term.length>this.maximumInputLength)return void this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}});e.call(this,t,n)},e}),t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(){i._checkIfMaximumSelected()})},e.prototype.query=function(e,t,n){var i=this;this._checkIfMaximumSelected(function(){e.call(i,t,n)})},e.prototype._checkIfMaximumSelected=function(e,t){var n=this;this.current(function(e){var i=null!=e?e.length:0;if(n.maximumSelectionLength>0&&i>=n.maximumSelectionLength)return void n.trigger("results:message",{message:"maximumSelected",args:{maximum:n.maximumSelectionLength}});t&&t()})},e}),t.define("select2/dropdown",["jquery","./utils"],function(e,t){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<span class="select2-dropdown"><span class="select2-results"></span></span>');return t.attr("dir",this.options.get("dir")),this.$dropdown=t,t},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function n(){}return n.prototype.render=function(t){var n=t.call(this),i=e('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(t,n,i){var o=this,r=n.id+"-results";t.call(this,n,i),this.$search.on("keydown",function(e){o.trigger("keypress",e),o._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(t){e(this).off("keyup")}),this.$search.on("keyup input",function(e){o.handleSearch(e)}),n.on("open",function(){o.$search.attr("tabindex",0),o.$search.attr("aria-controls",r),o.$search.trigger("focus"),window.setTimeout(function(){o.$search.trigger("focus")},0)}),n.on("close",function(){o.$search.attr("tabindex",-1),o.$search.removeAttr("aria-controls"),o.$search.removeAttr("aria-activedescendant"),o.$search.val(""),o.$search.trigger("blur")}),n.on("focus",function(){n.isOpen()||o.$search.trigger("focus")}),n.on("results:all",function(e){if(null==e.query.term||""===e.query.term){o.showSearch(e)?o.$searchContainer.removeClass("select2-search--hide"):o.$searchContainer.addClass("select2-search--hide")}}),n.on("results:focus",function(e){e.data._resultId?o.$search.attr("aria-activedescendant",e.data._resultId):o.$search.removeAttr("aria-activedescendant")})},n.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.showSearch=function(e,t){return!0},n}),t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;i>=0;i--){var o=t[i];this.placeholder.id===o.id&&n.splice(i,1)}return n},e}),t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return t.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&(this.$results.append(this.$loadingMore),this.loadMoreIfNeeded())},t.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("query",function(e){i.lastParams=e,i.loading=!0}),t.on("query:append",function(e){i.lastParams=e,i.loading=!0}),this.$results.on("scroll",this.loadMoreIfNeeded.bind(this))},t.prototype.loadMoreIfNeeded=function(){var t=e.contains(document.documentElement,this.$loadingMore[0]);if(!this.loading&&t){this.$results.offset().top+this.$results.outerHeight(!1)+50>=this.$loadingMore.offset().top+this.$loadingMore.outerHeight(!1)&&this.loadMore()}},t.prototype.loadMore=function(){this.loading=!0;var t=e.extend({},{page:1},this.lastParams);t.page++,this.trigger("query:append",t)},t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},t.prototype.createLoadingMore=function(){var t=e('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return t.html(n(this.lastParams)),t},t}),t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function n(t,n,i){this.$dropdownParent=e(i.get("dropdownParent")||document.body),t.call(this,n,i)}return n.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),i._bindContainerResultHandlers(t)}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},n.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(t){var n=e("<span></span>"),i=t.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},n.prototype._bindContainerResultHandlers=function(e,t){if(!this._containerResultsHandlersBound){var n=this;t.on("results:all",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:append",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:message",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("select",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("unselect",function(){n._positionDropdown(),n._resizeDropdown()}),this._containerResultsHandlersBound=!0}},n.prototype._attachPositioningHandler=function(n,i){var o=this,r="scroll.select2."+i.id,s="resize.select2."+i.id,a="orientationchange.select2."+i.id,l=this.$container.parents().filter(t.hasScroll);l.each(function(){t.StoreData(this,"select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})}),l.on(r,function(n){var i=t.GetData(this,"select2-scroll-position");e(this).scrollTop(i.y)}),e(window).on(r+" "+s+" "+a,function(e){o._positionDropdown(),o._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var o="scroll.select2."+i.id,r="resize.select2."+i.id,s="orientationchange.select2."+i.id;this.$container.parents().filter(t.hasScroll).off(o),e(window).off(o+" "+r+" "+s)},n.prototype._positionDropdown=function(){var t=e(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),o=null,r=this.$container.offset();r.bottom=r.top+this.$container.outerHeight(!1);var s={height:this.$container.outerHeight(!1)};s.top=r.top,s.bottom=r.top+s.height;var a={height:this.$dropdown.outerHeight(!1)},l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()},c=l.top<r.top-a.height,d=l.bottom>r.bottom+a.height,u={left:r.left,top:s.bottom},p=this.$dropdownParent;"static"===p.css("position")&&(p=p.offsetParent());var h={top:0,left:0};(e.contains(document.body,p[0])||p[0].isConnected)&&(h=p.offset()),u.top-=h.top,u.left-=h.left,n||i||(o="below"),d||!c||n?!c&&d&&n&&(o="below"):o="above",("above"==o||n&&"below"!==o)&&(u.top=s.top-h.top-a.height),null!=o&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+o),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+o)),this.$dropdownContainer.css(u)},n.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},n.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){for(var n=0,i=0;i<t.length;i++){var o=t[i];o.children?n+=e(o.children):n++}return n}function t(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return t.prototype.showSearch=function(t,n){return!(e(n.data.results)<this.minimumResultsForSearch)&&t.call(this,n)},t}),t.define("select2/dropdown/selectOnClose",["../utils"],function(e){function t(){}return t.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},t.prototype._handleSelectOnClose=function(t,n){if(n&&null!=n.originalSelect2Event){var i=n.originalSelect2Event;if("select"===i._type||"unselect"===i._type)return}var o=this.getHighlightedResults();if(!(o.length<1)){var r=e.GetData(o[0],"data");null!=r.element&&r.element.selected||null==r.element&&r.selected||this.trigger("select",{data:r})}},t}),t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&(n.ctrlKey||n.metaKey)||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){return"Please enter "+(e.minimum-e.input.length)+" or more characters"},loadingMore:function(){return"Loading more results…"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searching…"},removeAllItems:function(){return"Remove all items"}}}),t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,n,i,o,r,s,a,l,c,d,u,p,h,f,g,m,v,y,b,x,w,S,T,$,C,k,A,_){function E(){this.reset()}return E.prototype.apply=function(d){if(d=e.extend(!0,{},this.defaults,d),null==d.dataAdapter){if(null!=d.ajax?d.dataAdapter=f:null!=d.data?d.dataAdapter=h:d.dataAdapter=p,d.minimumInputLength>0&&(d.dataAdapter=c.Decorate(d.dataAdapter,v)),d.maximumInputLength>0&&(d.dataAdapter=c.Decorate(d.dataAdapter,y)),d.maximumSelectionLength>0&&(d.dataAdapter=c.Decorate(d.dataAdapter,b)),d.tags&&(d.dataAdapter=c.Decorate(d.dataAdapter,g)),null==d.tokenSeparators&&null==d.tokenizer||(d.dataAdapter=c.Decorate(d.dataAdapter,m)),null!=d.query){var u=t(d.amdBase+"compat/query");d.dataAdapter=c.Decorate(d.dataAdapter,u)}if(null!=d.initSelection){var _=t(d.amdBase+"compat/initSelection");d.dataAdapter=c.Decorate(d.dataAdapter,_)}}if(null==d.resultsAdapter&&(d.resultsAdapter=n,null!=d.ajax&&(d.resultsAdapter=c.Decorate(d.resultsAdapter,T)),null!=d.placeholder&&(d.resultsAdapter=c.Decorate(d.resultsAdapter,S)),d.selectOnClose&&(d.resultsAdapter=c.Decorate(d.resultsAdapter,k))),null==d.dropdownAdapter){if(d.multiple)d.dropdownAdapter=x;else{var E=c.Decorate(x,w);d.dropdownAdapter=E}if(0!==d.minimumResultsForSearch&&(d.dropdownAdapter=c.Decorate(d.dropdownAdapter,C)),d.closeOnSelect&&(d.dropdownAdapter=c.Decorate(d.dropdownAdapter,A)),
null!=d.dropdownCssClass||null!=d.dropdownCss||null!=d.adaptDropdownCssClass){var D=t(d.amdBase+"compat/dropdownCss");d.dropdownAdapter=c.Decorate(d.dropdownAdapter,D)}d.dropdownAdapter=c.Decorate(d.dropdownAdapter,$)}if(null==d.selectionAdapter){if(d.multiple?d.selectionAdapter=o:d.selectionAdapter=i,null!=d.placeholder&&(d.selectionAdapter=c.Decorate(d.selectionAdapter,r)),d.allowClear&&(d.selectionAdapter=c.Decorate(d.selectionAdapter,s)),d.multiple&&(d.selectionAdapter=c.Decorate(d.selectionAdapter,a)),null!=d.containerCssClass||null!=d.containerCss||null!=d.adaptContainerCssClass){var P=t(d.amdBase+"compat/containerCss");d.selectionAdapter=c.Decorate(d.selectionAdapter,P)}d.selectionAdapter=c.Decorate(d.selectionAdapter,l)}d.language=this._resolveLanguage(d.language),d.language.push("en");for(var L=[],O=0;O<d.language.length;O++){var M=d.language[O];-1===L.indexOf(M)&&L.push(M)}return d.language=L,d.translations=this._processTranslations(d.language,d.debug),d},E.prototype.reset=function(){function t(e){function t(e){return u[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function n(i,o){if(""===e.trim(i.term))return o;if(o.children&&o.children.length>0){for(var r=e.extend(!0,{},o),s=o.children.length-1;s>=0;s--){null==n(i,o.children[s])&&r.children.splice(s,1)}return r.children.length>0?r:n(i,r)}var a=t(o.text).toUpperCase(),l=t(i.term).toUpperCase();return a.indexOf(l)>-1?o:null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:c.escapeMarkup,language:{},matcher:n,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,scrollAfterSelect:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},E.prototype.applyFromElement=function(e,t){var n=e.language,i=this.defaults.language,o=t.prop("lang"),r=t.closest("[lang]").prop("lang"),s=Array.prototype.concat.call(this._resolveLanguage(o),this._resolveLanguage(n),this._resolveLanguage(i),this._resolveLanguage(r));return e.language=s,e},E.prototype._resolveLanguage=function(t){if(!t)return[];if(e.isEmptyObject(t))return[];if(e.isPlainObject(t))return[t];var n;n=e.isArray(t)?t:[t];for(var i=[],o=0;o<n.length;o++)if(i.push(n[o]),"string"==typeof n[o]&&n[o].indexOf("-")>0){var r=n[o].split("-"),s=r[0];i.push(s)}return i},E.prototype._processTranslations=function(t,n){for(var i=new d,o=0;o<t.length;o++){var r=new d,s=t[o];if("string"==typeof s)try{r=d.loadPath(s)}catch(e){try{s=this.defaults.amdLanguageBase+s,r=d.loadPath(s)}catch(e){n&&window.console&&console.warn&&console.warn('Select2: The language file for "'+s+'" could not be automatically loaded. A fallback will be used instead.')}}else r=e.isPlainObject(s)?new d(s):s;i.extend(r)}return i},E.prototype.set=function(t,n){var i=e.camelCase(t),o={};o[i]=n;var r=c._convertData(o);e.extend(!0,this.defaults,r)},new E}),t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,n,i){function o(t,o){if(this.options=t,null!=o&&this.fromElement(o),null!=o&&(this.options=n.applyFromElement(this.options,o)),this.options=n.apply(this.options),o&&o.is("input")){var r=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,r)}}return o.prototype.fromElement=function(e){function n(e,t){return t.toUpperCase()}var o=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),i.GetData(e[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),i.StoreData(e[0],"data",i.GetData(e[0],"select2Tags")),i.StoreData(e[0],"tags",!0)),i.GetData(e[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",i.GetData(e[0],"ajaxUrl")),i.StoreData(e[0],"ajax-Url",i.GetData(e[0],"ajaxUrl")));for(var r={},s=0;s<e[0].attributes.length;s++){var a=e[0].attributes[s].name;if("data-"==a.substr(0,"data-".length)){var l=a.substring("data-".length),c=i.GetData(e[0],l);r[l.replace(/-([a-z])/g,n)]=c}}t.fn.jquery&&"1."==t.fn.jquery.substr(0,2)&&e[0].dataset&&(r=t.extend(!0,{},e[0].dataset,r));var d=t.extend(!0,{},i.GetData(e[0]),r);d=i._convertData(d);for(var u in d)t.inArray(u,o)>-1||(t.isPlainObject(this.options[u])?t.extend(this.options[u],d[u]):this.options[u]=d[u]);return this},o.prototype.get=function(e){return this.options[e]},o.prototype.set=function(e,t){this.options[e]=t},o}),t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,n,i){var o=function(e,i){null!=n.GetData(e[0],"select2")&&n.GetData(e[0],"select2").destroy(),this.$element=e,this.id=this._generateId(e),i=i||{},this.options=new t(i,e),o.__super__.constructor.call(this);var r=e.attr("tabindex")||0;n.StoreData(e[0],"old-tabindex",r),e.attr("tabindex","-1");var s=this.options.get("dataAdapter");this.dataAdapter=new s(e,this.options);var a=this.render();this._placeContainer(a);var l=this.options.get("selectionAdapter");this.selection=new l(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,a);var c=this.options.get("dropdownAdapter");this.dropdown=new c(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,a);var d=this.options.get("resultsAdapter");this.results=new d(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){u.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),n.StoreData(e[0],"select2",this),e.data("select2",this)};return n.Extend(o,n.Observable),o.prototype._generateId=function(e){var t="";return t=null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+n.generateChars(2):n.generateChars(4),t=t.replace(/(:|\.|\[|\]|,)/g,""),t="select2-"+t},o.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},o.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var o=e.outerWidth(!1);return o<=0?"auto":o+"px"}if("style"==t){var r=e.attr("style");if("string"!=typeof r)return null;for(var s=r.split(";"),a=0,l=s.length;a<l;a+=1){var c=s[a].replace(/\s/g,""),d=c.match(n);if(null!==d&&d.length>=1)return d[1]}return null}if("computedstyle"==t){return window.getComputedStyle(e[0]).width}return t},o.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},o.prototype._registerDomEvents=function(){var e=this;this.$element.on("change.select2",function(){e.dataAdapter.current(function(t){e.trigger("selection:update",{data:t})})}),this.$element.on("focus.select2",function(t){e.trigger("focus",t)}),this._syncA=n.bind(this._syncAttributes,this),this._syncS=n.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var t=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=t?(this._observer=new t(function(t){e._syncA(),e._syncS(null,t)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",e._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",e._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",e._syncS,!1))},o.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,n){e.trigger(t,n)})},o.prototype._registerSelectionEvents=function(){var t=this,n=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()}),this.selection.on("focus",function(e){t.focus(e)}),this.selection.on("*",function(i,o){-1===e.inArray(i,n)&&t.trigger(i,o)})},o.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,n){e.trigger(t,n)})},o.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,n){e.trigger(t,n)})},o.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")}),this.on("close",function(){e.$container.removeClass("select2-container--open")}),this.on("enable",function(){e.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){e.$container.addClass("select2-container--disabled")}),this.on("blur",function(){e.$container.removeClass("select2-container--focus")}),this.on("query",function(t){e.isOpen()||e.trigger("open",{}),this.dataAdapter.query(t,function(n){e.trigger("results:all",{data:n,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(n){e.trigger("results:append",{data:n,query:t})})}),this.on("keypress",function(t){var n=t.which;e.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&t.altKey?(e.close(t),t.preventDefault()):n===i.ENTER?(e.trigger("results:select",{}),t.preventDefault()):n===i.SPACE&&t.ctrlKey?(e.trigger("results:toggle",{}),t.preventDefault()):n===i.UP?(e.trigger("results:previous",{}),t.preventDefault()):n===i.DOWN&&(e.trigger("results:next",{}),t.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&t.altKey)&&(e.open(),t.preventDefault())})},o.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.isDisabled()?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},o.prototype._isChangeMutation=function(t,n){var i=!1,o=this;if(!t||!t.target||"OPTION"===t.target.nodeName||"OPTGROUP"===t.target.nodeName){if(n)if(n.addedNodes&&n.addedNodes.length>0)for(var r=0;r<n.addedNodes.length;r++){var s=n.addedNodes[r];s.selected&&(i=!0)}else n.removedNodes&&n.removedNodes.length>0?i=!0:e.isArray(n)&&e.each(n,function(e,t){if(o._isChangeMutation(e,t))return i=!0,!1});else i=!0;return i}},o.prototype._syncSubtree=function(e,t){var n=this;this._isChangeMutation(e,t)&&this.dataAdapter.current(function(e){n.trigger("selection:update",{data:e})})},o.prototype.trigger=function(e,t){var n=o.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if(void 0===t&&(t={}),e in i){var r=i[e],s={prevented:!1,name:e,args:t};if(n.call(this,r,s),s.prevented)return void(t.prevented=!0)}n.call(this,e,t)},o.prototype.toggleDropdown=function(){this.isDisabled()||(this.isOpen()?this.close():this.open())},o.prototype.open=function(){this.isOpen()||this.isDisabled()||this.trigger("query",{})},o.prototype.close=function(e){this.isOpen()&&this.trigger("close",{originalEvent:e})},o.prototype.isEnabled=function(){return!this.isDisabled()},o.prototype.isDisabled=function(){return this.options.get("disabled")},o.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},o.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},o.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},o.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=e&&0!==e.length||(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},o.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var e=[];return this.dataAdapter.current(function(t){e=t}),e},o.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==t||0===t.length)return this.$element.val();var n=t[0];e.isArray(n)&&(n=e.map(n,function(e){return e.toString()})),this.$element.val(n).trigger("input").trigger("change")},o.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",n.GetData(this.$element[0],"old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),n.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},o.prototype.render=function(){var t=e('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return t.attr("dir",this.options.get("dir")),this.$container=t,this.$container.addClass("select2-container--"+this.options.get("theme")),n.StoreData(t[0],"element",this.$element),t},o}),t.define("jquery-mousewheel",["jquery"],function(e){return e}),t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],function(e,t,n,i,o){if(null==e.fn.select2){var r=["open","close","destroy"];e.fn.select2=function(t){if("object"==typeof(t=t||{}))return this.each(function(){var i=e.extend(!0,{},t);new n(e(this),i)}),this;if("string"==typeof t){var i,s=Array.prototype.slice.call(arguments,1);return this.each(function(){var e=o.GetData(this,"select2");null==e&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),i=e[t].apply(e,s)}),e.inArray(t,r)>-1?this:i}throw new Error("Invalid arguments for Select2: "+t)}}return null==e.fn.select2.defaults&&(e.fn.select2.defaults=i),n}),{define:t.define,require:t.require}}(),n=t.require("jquery.select2");return e.fn.select2.amd=t,n}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var t=window.Slick||{};t=function(){function t(t,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return'<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">'+(t+1)+"</button>"},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!1,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.hidden="hidden",r.paused=!1,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(t),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(t).data("slick")||{},r.options=e.extend({},r.defaults,o,i),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.instanceUid=n++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0),r.checkResponsive(!0)}var n=0;return t}(),t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,n){e(n).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout(function(){o.disableTransition(),n.call()},o.options.speed))},t.prototype.asNavFor=function(t){var n=this,i=n.options.asNavFor;i&&null!==i&&(i=e(i).not(n.$slider)),null!==i&&"object"==typeof i&&i.each(function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)})},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer),e.slideCount>e.options.slidesToShow&&!0!==e.paused&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this;!1===e.options.infinite?1===e.direction?(e.currentSlide+1===e.slideCount-1&&(e.direction=0),e.slideHandler(e.currentSlide+e.options.slidesToScroll)):(e.currentSlide-1==0&&(e.direction=1),e.slideHandler(e.currentSlide-e.options.slidesToScroll)):e.slideHandler(e.currentSlide+e.options.slidesToScroll)},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(n='<ul class="'+i.options.dotsClass+'">',t=0;t<=i.getDotCount();t+=1)n+="<li>"+i.options.customPaging.call(this,i,t)+"</li>";n+="</ul>",i.$dots=e(n).appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>1){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var d=e*s+(t*a.options.slidesPerRow+n);r.get(d)&&c.appendChild(r.get(d))}l.appendChild(c)}i.appendChild(l)}a.$slider.html(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,o,r,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?r=c:"slider"===s.respondTo?r=l:"min"===s.respondTo&&(r=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){o=null;for(i in s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?r<s.breakpoints[i]&&(o=s.breakpoints[i]):r>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?(o!==s.activeBreakpoint||n)&&(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=o),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},t.prototype.changeSlide=function(t,n){var i,o,r,s=this,a=e(t.target);switch(a.is("a")&&t.preventDefault(),a.is("li")||(a=a.closest("li")),r=s.slideCount%s.options.slidesToScroll!=0,i=r?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":o=0===i?s.options.slidesToScroll:s.options.slidesToShow-i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,n);break;case"next":o=0===i?s.options.slidesToScroll:i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,n);break;case"index":var l=0===t.data.index?0:t.data.index||a.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(l),!1,n),a.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n,i=this;if(t=i.getNavigableIndexes(),n=0,e>t[t.length-1])e=t[t.length-1];else for(var o in t){if(e<t[o]){e=n;break}n=t[o]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide),!0===t.options.pauseOnDotsHover&&!0===t.options.autoplay&&e("li",t.$dots).off("mouseenter.slick",e.proxy(t.setPaused,t,!0)).off("mouseleave.slick",e.proxy(t.setPaused,t,!1))),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide)),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.$list.off("mouseenter.slick",e.proxy(t.setPaused,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.setPaused,t,!1)),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition),e(document).off("ready.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>1&&(e=t.$slides.children().children(),e.removeAttr("style"),t.$slider.html(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)for(;t<e.slideCount;)++i,t=n+e.options.slidesToShow,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToShow,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return i-1},t.prototype.getLeft=function(e){var t,n,i,o=this,r=0;return o.slideOffset=0,n=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,r=n*o.options.slidesToShow*-1),o.slideCount%o.options.slidesToScroll!=0&&e+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(e>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(e-o.slideCount))*o.slideWidth*-1,r=(o.options.slidesToShow-(e-o.slideCount))*n*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,r=o.slideCount%o.options.slidesToScroll*n*-1))):e+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(e+o.options.slidesToShow-o.slideCount)*o.slideWidth,r=(e+o.options.slidesToShow-o.slideCount)*n),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,r=0),!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),t=!1===o.options.vertical?e*o.slideWidth*-1+o.slideOffset:e*n*-1+r,!0===o.options.variableWidth&&(i=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow),t=i[0]?-1*i[0].offsetLeft:0,
!0===o.options.centerMode&&(i=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(e):o.$slideTrack.children(".slick-slide").eq(e+o.options.slidesToShow+1),t=i[0]?-1*i[0].offsetLeft:0,t+=(o.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1}),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.on("click.slick",{message:"next"},e.changeSlide))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&!0===t.options.autoplay&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.setPaused,t,!0)).on("mouseleave.slick",e.proxy(t.setPaused,t,!1))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),t.$list.on("mouseenter.slick",e.proxy(t.setPaused,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.setPaused,t,!1)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(document).on("ready.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show(),!0===e.options.autoplay&&e.autoPlay()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),n=e(this).attr("data-lazy"),i=document.createElement("img");i.onload=function(){t.animate({opacity:0},100,function(){t.attr("src",n).animate({opacity:1},200,function(){t.removeAttr("data-lazy").removeClass("slick-loading")})})},i.src=n})}var n,i,o,r,s=this;!0===s.options.centerMode?!0===s.options.infinite?(o=s.currentSlide+(s.options.slidesToShow/2+1),r=o+s.options.slidesToShow+2):(o=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),r=s.options.slidesToShow/2+1+2+s.currentSlide):(o=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,r=o+s.options.slidesToShow,!0===s.options.fade&&(o>0&&o--,r<=s.slideCount&&r++)),n=s.$slider.find(".slick-slide").slice(o,r),t(n),s.slideCount<=s.options.slidesToShow?(i=s.$slider.find(".slick-slide"),t(i)):s.currentSlide>=s.slideCount-s.options.slidesToShow?(i=s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow),t(i)):0===s.currentSlide&&(i=s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow),t(i))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.paused=!1,e.autoPlay()},t.prototype.postSlide=function(e){var t=this;t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.setPosition(),t.swipeLeft=null,!0===t.options.autoplay&&!1===t.paused&&t.autoPlay(),!0===t.options.accessibility&&t.initADA()},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(){var t,n,i=this;(t=e("img[data-lazy]",i.$slider).length)>0&&(n=e("img[data-lazy]",i.$slider).first(),n.attr("src",null),n.attr("src",n.attr("data-lazy")).removeClass("slick-loading").load(function(){n.removeAttr("data-lazy"),i.progressiveLazyLoad(),!0===i.options.adaptiveHeight&&i.setPosition()}).error(function(){n.removeAttr("data-lazy"),i.progressiveLazyLoad()}))},t.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,o.options.infinite||(o.slideCount<=o.options.slidesToShow?o.currentSlide=0:o.currentSlide>i&&(o.currentSlide=i)),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){o.respondTo=o.options.respondTo||"window";for(t in r)if(i=o.breakpoints.length-1,n=r[t].breakpoint,r.hasOwnProperty(t)){for(;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort(function(e,t){return o.options.mobileFirst?e-t:t-e})}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses(0),t.setPosition(),t.$slider.trigger("reInit",[t]),!0===t.options.autoplay&&t.focusHandler()},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if("boolean"==typeof e?(t=e,e=!0===t?0:i.slideCount-1):e=!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each(function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(t,n,i){var o,r,s=this;if("responsive"===t&&"array"===e.type(n))for(r in n)if("array"!==e.type(s.options.responsive))s.options.responsive=[n[r]];else{for(o=s.options.responsive.length-1;o>=0;)s.options.responsive[o].breakpoint===n[r].breakpoint&&s.options.responsive.splice(o,1),o--;s.options.responsive.push(n[r])}else s.options[t]=n;!0===i&&(s.unload(),s.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode?(t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")):e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===r.options.lazyLoad&&r.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},t.prototype.setPaused=function(e){var t=this;!0===t.options.autoplay&&!0===t.options.pauseOnHover&&(t.paused=e,e?t.autoPlayClear():t.autoPlay())},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));if(o||(o=0),n.slideCount<=n.options.slidesToShow)return n.setSlideClasses(o),void n.asNavFor(o);n.slideHandler(o)},t.prototype.slideHandler=function(e,t,n){var i,o,r,s,a=null,l=this;if(t=t||!1,(!0!==l.animating||!0!==l.options.waitForAnimate)&&!(!0===l.options.fade&&l.currentSlide===e||l.slideCount<=l.options.slidesToShow)){if(!1===t&&l.asNavFor(e),i=e,a=l.getLeft(i),s=l.getLeft(l.currentSlide),l.currentLeft=null===l.swipeLeft?s:l.swipeLeft,!1===l.options.infinite&&!1===l.options.centerMode&&(e<0||e>l.getDotCount()*l.options.slidesToScroll))return void(!1===l.options.fade&&(i=l.currentSlide,!0!==n?l.animateSlide(s,function(){l.postSlide(i)}):l.postSlide(i)));if(!1===l.options.infinite&&!0===l.options.centerMode&&(e<0||e>l.slideCount-l.options.slidesToScroll))return void(!1===l.options.fade&&(i=l.currentSlide,!0!==n?l.animateSlide(s,function(){l.postSlide(i)}):l.postSlide(i)));if(!0===l.options.autoplay&&clearInterval(l.autoPlayTimer),o=i<0?l.slideCount%l.options.slidesToScroll!=0?l.slideCount-l.slideCount%l.options.slidesToScroll:l.slideCount+i:i>=l.slideCount?l.slideCount%l.options.slidesToScroll!=0?0:i-l.slideCount:i,l.animating=!0,l.$slider.trigger("beforeChange",[l,l.currentSlide,o]),r=l.currentSlide,l.currentSlide=o,l.setSlideClasses(l.currentSlide),l.updateDots(),l.updateArrows(),!0===l.options.fade)return!0!==n?(l.fadeSlideOut(r),l.fadeSlide(o,function(){l.postSlide(o)})):l.postSlide(o),void l.animateHeight();!0!==n?l.animateSlide(a,function(){l.postSlide(o)}):l.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),i=Math.round(180*n/Math.PI),i<0&&(i=360-Math.abs(i)),i<=45&&i>=0?!1===o.options.rtl?"left":"right":i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"left":"right":"vertical"},t.prototype.swipeEnd=function(e){var t,n=this;if(n.dragging=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe)switch(n.swipeDirection()){case"left":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.slideHandler(t),n.currentDirection=0,n.touchObject={},n.$slider.trigger("swipe",[n,"left"]);break;case"right":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.slideHandler(t),n.currentDirection=1,n.touchObject={},n.$slider.trigger("swipe",[n,"right"])}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,o,r,s=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!s.dragging||r&&1!==r.length)&&(t=s.getLeft(s.currentSlide),s.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,s.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,s.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(s.touchObject.curX-s.touchObject.startX,2))),!0===s.options.verticalSwiping&&(s.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(s.touchObject.curY-s.touchObject.startY,2)))),"vertical"!==(n=s.swipeDirection())?(void 0!==e.originalEvent&&s.touchObject.swipeLength>4&&e.preventDefault(),o=(!1===s.options.rtl?1:-1)*(s.touchObject.curX>s.touchObject.startX?1:-1),!0===s.options.verticalSwiping&&(o=s.touchObject.curY>s.touchObject.startY?1:-1),i=s.touchObject.swipeLength,s.touchObject.edgeHit=!1,!1===s.options.infinite&&(0===s.currentSlide&&"right"===n||s.currentSlide>=s.getDotCount()&&"left"===n)&&(i=s.touchObject.swipeLength*s.options.edgeFriction,s.touchObject.edgeHit=!0),!1===s.options.vertical?s.swipeLeft=t+i*o:s.swipeLeft=t+i*(s.$list.height()/s.listWidth)*o,!0===s.options.verticalSwiping&&(s.swipeLeft=t+i*o),!0!==s.options.fade&&!1!==s.options.touchMove&&(!0===s.animating?(s.swipeLeft=null,!1):void s.setCSS(s.swipeLeft))):void 0)},t.prototype.swipeStart=function(e){var t,n=this;if(1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},t.prototype.visibility=function(){var e=this;document[e.hidden]?(e.paused=!0,e.autoPlayClear()):!0===e.options.autoplay&&(e.paused=!1,e.autoPlay())},t.prototype.initADA=function(){var t=this;t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),t.$slideTrack.attr("role","listbox"),t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(n){e(this).attr({role:"option","aria-describedby":"slick-slide"+t.instanceUid+n})}),null!==t.$dots&&t.$dots.attr("role","tablist").find("li").each(function(n){e(this).attr({role:"presentation","aria-selected":"false","aria-controls":"navigation"+t.instanceUid+n,id:"slick-slide"+t.instanceUid+n})}).first().attr("aria-selected","true").end().find("button").attr("role","button").end().closest("div").attr("role","toolbar"),t.activateADA()},t.prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.focusHandler=function(){var t=this;t.$slider.on("focus.slick blur.slick","*",function(n){n.stopImmediatePropagation();var i=e(this);setTimeout(function(){t.isPlay&&(i.is(":focus")?(t.autoPlayClear(),t.paused=!0):(t.paused=!1,t.autoPlay()))},0)})},e.fn.slick=function(){var e,n,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?i[e].slick=new t(i[e],o):n=i[e].slick[o].apply(i[e].slick,r),void 0!==n)return n;return i}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5mYW5jeWJveDMubWluLmpzIiwic2Nyb2xsYmFyLmpzIiwic2VsZWN0Mi5qcyIsInNsaWNrLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJpc0FycmF5TGlrZSIsIm9iaiIsImxlbmd0aCIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJlbGVtIiwiaSIsImNhbGwiLCJub2RlVHlwZSIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJpbkFycmF5Iiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0IiwiZWFjaCIsIm1hdGNoIiwicm5vdHdoaXRlIiwiXyIsImZsYWciLCJkZXRhY2giLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNvbXBsZXRlZCIsImRldGFjaEV2ZW50IiwiZXZlbnQiLCJyZWFkeVN0YXRlIiwicmVhZHkiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJ1bmRlZmluZWQiLCJuYW1lIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJ0b0xvd2VyQ2FzZSIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsInBhcnNlSlNPTiIsImUiLCJpc0VtcHR5RGF0YU9iamVjdCIsImlzRW1wdHlPYmplY3QiLCJpbnRlcm5hbERhdGEiLCJwdnQiLCJhY2NlcHREYXRhIiwicmV0IiwidGhpc0NhY2hlIiwiaW50ZXJuYWxLZXkiLCJleHBhbmRvIiwiaXNOb2RlIiwiY2FjaGUiLCJpZCIsImRlbGV0ZWRJZHMiLCJwb3AiLCJndWlkIiwidG9KU09OIiwibm9vcCIsImV4dGVuZCIsImNhbWVsQ2FzZSIsImludGVybmFsUmVtb3ZlRGF0YSIsImlzQXJyYXkiLCJjb25jYXQiLCJtYXAiLCJzcGxpdCIsImNsZWFuRGF0YSIsInN1cHBvcnQiLCJkZWxldGVFeHBhbmRvIiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiY3JlYXRlU2FmZUZyYWdtZW50IiwibGlzdCIsIm5vZGVOYW1lcyIsInNhZmVGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRBbGwiLCJjb250ZXh0IiwidGFnIiwiZWxlbXMiLCJmb3VuZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsImNoaWxkTm9kZXMiLCJub2RlTmFtZSIsInB1c2giLCJtZXJnZSIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIl9kYXRhIiwiZml4RGVmYXVsdENoZWNrZWQiLCJyY2hlY2thYmxlVHlwZSIsImRlZmF1bHRDaGVja2VkIiwiY2hlY2tlZCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImoiLCJjb250YWlucyIsInRtcCIsInRib2R5Iiwid3JhcCIsImwiLCJzYWZlIiwibm9kZXMiLCJyaHRtbCIsImFwcGVuZENoaWxkIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwibGVhZGluZ1doaXRlc3BhY2UiLCJybGVhZGluZ1doaXRlc3BhY2UiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0Ym9keSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hlY2tlZCIsIm93bmVyRG9jdW1lbnQiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwib2ZmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsImZpbmQiLCJhdHRyIiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJzcmMiLCJkZXN0IiwiaGFzRGF0YSIsIm9sZERhdGEiLCJjdXJEYXRhIiwiZXZlbnRzIiwiaGFuZGxlIiwiZml4Q2xvbmVOb2RlSXNzdWVzIiwibm9DbG9uZUV2ZW50IiwicmVtb3ZlRXZlbnQiLCJ0ZXh0IiwicGFyZW50Tm9kZSIsIm91dGVySFRNTCIsImh0bWw1Q2xvbmUiLCJ0cmltIiwidmFsdWUiLCJkZWZhdWx0U2VsZWN0ZWQiLCJzZWxlY3RlZCIsImRlZmF1bHRWYWx1ZSIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImFyZ3MiLCJjYWxsYmFjayIsImZpcnN0Iiwibm9kZSIsImhhc1NjcmlwdHMiLCJkb2MiLCJmcmFnbWVudCIsImlOb0Nsb25lIiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwiaW5kZXgiLCJzZWxmIiwiZXEiLCJodG1sIiwiY2xvbmUiLCJfZXZhbFVybCIsImdsb2JhbEV2YWwiLCJyY2xlYW5TY3JpcHQiLCJyZW1vdmUiLCJrZWVwRGF0YSIsImFjdHVhbERpc3BsYXkiLCJhcHBlbmRUbyIsImJvZHkiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXkiLCJlbGVtZGlzcGxheSIsImlmcmFtZSIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJjb250ZW50RG9jdW1lbnQiLCJ3cml0ZSIsImNsb3NlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJnZXQiLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImNzc1ByZWZpeGVzIiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZGVuIiwidmFsdWVzIiwiaXNIaWRkZW4iLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsInJudW1zcGxpdCIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0U3R5bGVzIiwiYm94U2l6aW5nIiwiY3VyQ1NTIiwicm51bW5vbnB4IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0IiwiVHdlZW4iLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0IiwiY3JlYXRlRnhOb3ciLCJzZXRUaW1lb3V0IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5Iiwid2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwib3B0cyIsInRvZ2dsZSIsImhvb2tzIiwib2xkZmlyZSIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlubGluZUJsb2NrTmVlZHNMYXlvdXQiLCJ6b29tIiwic2hyaW5rV3JhcEJsb2NrcyIsInJmeHR5cGVzIiwiZG9uZSIsImhpZGUiLCJfcmVtb3ZlRGF0YSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY3NzSG9va3MiLCJleHBhbmQiLCJwcm9wZXJ0aWVzIiwicmVzdWx0Iiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwidGljayIsImN1cnJlbnRUaW1lIiwicmVtYWluaW5nIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJ0ZW1wIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb21pc2UiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm94eSIsImZ4IiwidGltZXIiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiZmFpbCIsImdldENsYXNzIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwidW5zaGlmdCIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0IiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsInRhcmdldCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJzIiwicmVzcG9uc2VzIiwiZmlyc3REYXRhVHlwZSIsImN0IiwiZmluYWxEYXRhVHlwZSIsImNvbnRlbnRzIiwic2hpZnQiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicHJldiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInN0YXRlIiwiZXJyb3IiLCJnZXREaXNwbGF5IiwiZmlsdGVySGlkZGVuIiwiYnVpbGRQYXJhbXMiLCJwcmVmaXgiLCJ0cmFkaXRpb25hbCIsInYiLCJyYnJhY2tldCIsImNyZWF0ZVN0YW5kYXJkWEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJjcmVhdGVBY3RpdmVYSFIiLCJBY3RpdmVYT2JqZWN0IiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJsZW4iLCJzb3J0Iiwic3BsaWNlIiwiY29weUlzQXJyYXkiLCJjb3B5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJBcnJheSIsImlzTnVtZXJpYyIsInJlYWxTdHJpbmdPYmoiLCJvd25GaXJzdCIsImV4ZWNTY3JpcHQiLCJzdHJpbmciLCJtYWtlQXJyYXkiLCJhcnIiLCJyZXN1bHRzIiwiT2JqZWN0Iiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibSIsIm5pZCIsIm5pZHNlbGVjdCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInJpZGVudGlmaWVyIiwidG9TZWxlY3RvciIsImpvaW4iLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwiTUFYX05FR0FUSVZFIiwibmV4dFNpYmxpbmciLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibmV3Q2FjaGUiLCJkaXJydW5zIiwidW5pcXVlSUQiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJlbHMiLCJoYXNDb21wYXJlIiwicGFyZW50IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwic3BlY2lmaWVkIiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJuZXh0IiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwb3MiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJwcm9ncmVzc1ZhbHVlcyIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwidXBkYXRlRnVuYyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJkb1Njcm9sbCIsImZyYW1lRWxlbWVudCIsImRvU2Nyb2xsQ2hlY2siLCJjb250YWluZXIiLCJjc3NUZXh0Iiwibm9EYXRhIiwiYXBwbGV0ICIsImVtYmVkICIsIm9iamVjdCAiLCJyZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJzaHJpbmtXcmFwQmxvY2tzVmFsIiwicG51bSIsInNvdXJjZSIsImVsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiaHRtbFNlcmlhbGl6ZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwibGVnZW5kIiwiYXJlYSIsInBhcmFtIiwidGhlYWQiLCJ0ciIsImNvbCIsInRkIiwib3B0Z3JvdXAiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZXZlbnROYW1lIiwiY2hhbmdlIiwiZm9jdXNpbiIsInJmb3JtRWxlbXMiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJmb2N1c01vcnBoIiwicnR5cGVuYW1lc3BhY2UiLCJ0IiwiaGFuZGxlT2JqSW4iLCJzcGVjaWFsIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwib250eXBlIiwiYnViYmxlVHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwicm5hbWVzcGFjZSIsIm5vQnViYmxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJpc05hTiIsIm9yaWdpbmFsRXZlbnQiLCJmaXhIb29rIiwiZml4SG9va3MiLCJtb3VzZUhvb2tzIiwia2V5SG9va3MiLCJzcmNFbGVtZW50IiwibWV0YUtleSIsIm9yaWdpbmFsIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiZXZlbnREb2MiLCJmcm9tRWxlbWVudCIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsImxvYWQiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwiY2FuY2VsQnViYmxlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwiZm9ybSIsIl9zdWJtaXRCdWJibGUiLCJwcm9wZXJ0eU5hbWUiLCJfanVzdENoYW5nZWQiLCJhdHRhY2hlcyIsInJpbmxpbmVqUXVlcnkiLCJybm9zaGltY2FjaGUiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJzYWZlRnJhZ21lbnQiLCJmcmFnbWVudERpdiIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsImRlc3RFbGVtZW50cyIsInNyY0VsZW1lbnRzIiwiaW5QYWdlIiwiZm9yY2VBY2NlcHREYXRhIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJIVE1MIiwiQk9EWSIsInJtYXJnaW4iLCJzd2FwIiwib2xkIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJyZWxpYWJsZU1hcmdpblJpZ2h0VmFsIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsInJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCIsImdldENsaWVudFJlY3RzIiwiYm9yZGVyQ29sbGFwc2UiLCJjc3NGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiTW96Qm94U2l6aW5nIiwiV2Via2l0Qm94U2l6aW5nIiwicmVsaWFibGVIaWRkZW5PZmZzZXRzIiwicGl4ZWxNYXJnaW5SaWdodCIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicnBvc2l0aW9uIiwidmlldyIsIm9wZW5lciIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJjdXJyZW50U3R5bGUiLCJsZWZ0IiwicnMiLCJyc0xlZnQiLCJydW50aW1lU3R5bGUiLCJwaXhlbExlZnQiLCJyYWxwaGEiLCJyb3BhY2l0eSIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJjc3NQcm9wcyIsImZsb2F0Iiwib3JpZ05hbWUiLCJzZXQiLCJpc0Zpbml0ZSIsIiQxIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJlYXNlZCIsInN0ZXAiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsInRpbWVySWQiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZ2V0U2V0QXR0cmlidXRlIiwiaHJlZk5vcm1hbGl6ZWQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJlbmN0eXBlIiwib3B0RGlzYWJsZWQiLCJyYWRpb1ZhbHVlIiwicnJldHVybiIsInJzcGFjZXMiLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInNjcm9sbEhlaWdodCIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJydXNlRGVmYXVsdCIsImdldFNldElucHV0IiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwic2V0QXR0cmlidXRlTm9kZSIsImNyZWF0ZUF0dHJpYnV0ZSIsImNvb3JkcyIsImNvbnRlbnRlZGl0YWJsZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsIm5vbmNlIiwicnF1ZXJ5IiwicnZhbGlkdG9rZW5zIiwiSlNPTiIsInBhcnNlIiwicmVxdWlyZU5vbkNvbW1hIiwiZGVwdGgiLCJzdHIiLCJjb21tYSIsIm9wZW4iLCJGdW5jdGlvbiIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYXN5bmMiLCJsb2FkWE1MIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInJ1cmwiLCJhbGxUeXBlcyIsImFqYXhMb2NhdGlvbiIsImFqYXhMb2NQYXJ0cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJjb2RlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJtZXRob2QiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0aHJvd3MiLCJ3cmFwQWxsIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJkb2N1bWVudE1vZGUiLCJ4aHJJZCIsInhockNhbGxiYWNrcyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJ1c2VybmFtZSIsInhockZpZWxkcyIsImlzQWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVRleHQiLCJzY3JpcHQiLCJ0ZXh0IHNjcmlwdCIsImhlYWQiLCJzY3JpcHRDaGFyc2V0IiwiY2hhcnNldCIsIm9ubG9hZCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsIl9sb2FkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJ3aW4iLCJib3giLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInNpemUiLCJhbmRTZWxmIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJvIiwiaXRlbXMiLCJmYW5jeWJveCIsImNvbnNvbGUiLCJsb2ciLCJsb29wIiwiZ3V0dGVyIiwia2V5Ym9hcmQiLCJhcnJvd3MiLCJpbmZvYmFyIiwidG9vbGJhciIsImJ1dHRvbnMiLCJpZGxlVGltZSIsInNtYWxsQnRuIiwicHJvdGVjdCIsIm1vZGFsIiwicHJlbG9hZCIsInRwbCIsInNjcm9sbGluZyIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzbGlkZUNsYXNzIiwiYmFzZUNsYXNzIiwiYmFzZVRwbCIsInNwaW5uZXJUcGwiLCJlcnJvclRwbCIsImJ0blRwbCIsImRvd25sb2FkIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsInBhcmVudEVsIiwiYXV0b0ZvY3VzIiwiYmFja0ZvY3VzIiwidHJhcEZvY3VzIiwiZnVsbFNjcmVlbiIsImF1dG9TdGFydCIsInRvdWNoIiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwic2xpZGVTaG93IiwidGh1bWJzIiwiaGlkZU9uQ2xvc2UiLCJheGlzIiwid2hlZWwiLCJvbkluaXQiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjbGlja1NsaWRlIiwiY2xpY2tPdXRzaWRlIiwiZGJsY2xpY2tDb250ZW50IiwiZGJsY2xpY2tTbGlkZSIsImRibGNsaWNrT3V0c2lkZSIsIm1vYmlsZSIsImkxOG4iLCJlbiIsIkNMT1NFIiwiTkVYVCIsIlBSRVYiLCJFUlJPUiIsIlBMQVlfU1RBUlQiLCJQTEFZX1NUT1AiLCJGVUxMX1NDUkVFTiIsIlRIVU1CUyIsIkRPV05MT0FEIiwiU0hBUkUiLCJaT09NIiwiZGUiLCJyIiwiYyIsInUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZCIsInRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiZiIsImRlZmF1bHRzIiwiaXNNb2JpbGUiLCJncm91cCIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJjcmVhdGVHcm91cCIsIiRsYXN0Rm9jdXMiLCJzbGlkZXMiLCJzY3JvbGxiYXJXaWR0aCIsImdldEluc3RhbmNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJpbm5lckhlaWdodCIsImNsaWVudFdpZHRoIiwidHJhbnNsYXRlIiwiJHJlZnMiLCJmb3JFYWNoIiwiYWN0aXZhdGUiLCJqdW1wVG8iLCIkb3JpZyIsInZpZGVvRm9ybWF0IiwiJHRodW1iIiwiYWRkRXZlbnRzIiwicmVtb3ZlRXZlbnRzIiwicHJldmlvdXMiLCJpc1NjYWxlZERvd24iLCJ1cGRhdGUiLCJzdGFnZSIsImlzQ2xvc2luZyIsImlkbGVTZWNvbmRzQ291bnRlciIsImlzSWRsZSIsInNob3dDb250cm9scyIsImlkbGVJbnRlcnZhbCIsImlzRHJhZ2dpbmciLCJoaWRlQ29udHJvbHMiLCJoIiwiaXNBbmltYXRpbmciLCJjcmVhdGVTbGlkZSIsInVwZGF0ZUNvbnRyb2xzIiwiZ2V0VHJhbnNsYXRlIiwiJHNsaWRlIiwiaXNNb3ZlZCIsImZvcmNlZER1cmF0aW9uIiwibG9hZFNsaWRlIiwicm91bmQiLCJpc0xvYWRlZCIsInJldmVhbENvbnRlbnQiLCJpc0NvbXBsZXRlIiwidXBkYXRlU2xpZGUiLCJzY2FsZVRvQWN0dWFsIiwiJGNvbnRlbnQiLCJnIiwiaGFzRXJyb3IiLCJ1cGRhdGVDdXJzb3IiLCJzY2FsZVgiLCJzY2FsZVkiLCJTbGlkZVNob3ciLCJpc0FjdGl2ZSIsInNjYWxlVG9GaXQiLCJnZXRGaXRQb3MiLCJtaW4iLCJmbG9vciIsInNldFRyYW5zbGF0ZSIsImNlbnRlclNsaWRlIiwiaXNab29tYWJsZSIsImNhblBhbiIsImFicyIsImlzTG9hZGluZyIsInNldEltYWdlIiwic2V0SWZyYW1lIiwic2V0Q29udGVudCIsInNldEVycm9yIiwic2hvd0xvYWRpbmciLCJzcmNzZXQiLCJkZXZpY2VQaXhlbFJhdGlvIiwiaW5uZXJXaWR0aCIsInN1YnN0cmluZyIsInBvc3RmaXgiLCJ0aHVtYiIsIiRnaG9zdCIsInNldEJpZ0ltYWdlIiwiJGltYWdlIiwidGltb3V0cyIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJoaWRlTG9hZGluZyIsImdldFRpbWUiLCJzY3JvbGxXaWR0aCIsImNlaWwiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCIkcGxhY2Vob2xkZXIiLCIkc21hbGxCdG4iLCIkc3Bpbm5lciIsImdldFRodW1iUG9zIiwicGFyZW50RWxlbWVudCIsImV2ZXJ5IiwicmlnaHQiLCJib3R0b20iLCJpc1Zpc2libGUiLCJjbGVhblVwIiwiJGNhcHRpb24iLCJpc0hpZGRlbkNvbnRyb2xzIiwidG9nZ2xlQ29udHJvbHMiLCJ2ZXJzaW9uIiwiZGVzdHJveSIsImNyZWF0ZVRvdWNoIiwidXNlM2QiLCJ0cmFuc2Zvcm0iLCJ5b3V0dWJlIiwiYXV0b3BsYXkiLCJhdXRvaGlkZSIsImZzIiwicmVsIiwiaGQiLCJ3bW9kZSIsImVuYWJsZWpzYXBpIiwiaHRtbDUiLCJwYXJhbVBsYWNlIiwidmltZW8iLCJzaG93X3RpdGxlIiwic2hvd19ieWxpbmUiLCJzaG93X3BvcnRyYWl0IiwiZnVsbHNjcmVlbiIsImFwaSIsIm1ldGFjYWZlIiwiZGFpbHltb3Rpb24iLCJhZGRpdGlvbmFsSW5mb3MiLCJ2aW5lIiwiaW5zdGFncmFtIiwiZ21hcF9wbGFjZSIsImdtYXBfc2VhcmNoIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29udGVudFByb3ZpZGVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieCIsInkiLCJzcXJ0IiwicG93Iiwib25jbGljayIsInN1YnN0ciIsImNsaWVudEhlaWdodCIsImluc3RhbmNlIiwiJGJnIiwiYmciLCIkc3RhZ2UiLCIkY29udGFpbmVyIiwib250b3VjaHN0YXJ0IiwicmVhbFBvaW50cyIsInN0YXJ0UG9pbnRzIiwic3RhcnRFdmVudCIsImNhblRhcCIsIiR0YXJnZXQiLCJpc1Bhbm5pbmciLCJpc1N3aXBpbmciLCJpc1pvb21pbmciLCJpc1Njcm9sbGluZyIsInNsaWRlclN0YXJ0UG9zIiwic2xpZGVyTGFzdFBvcyIsImNvbnRlbnRTdGFydFBvcyIsImNvbnRlbnRMYXN0UG9zIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwiZGlzdGFuY2UiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsIm9uc2Nyb2xsIiwiY2VudGVyUG9pbnRTdGFydFgiLCJjZW50ZXJQb2ludFN0YXJ0WSIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSIsInN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyIsIm9udG91Y2htb3ZlIiwibmV3UG9pbnRzIiwib25Td2lwZSIsIm9uUGFuIiwib25ab29tIiwicmVxdWVzdElkIiwiYXRhbjIiLCJpblRyYW5zaXRpb24iLCJsaW1pdE1vdmVtZW50IiwibGltaXRQb3NpdGlvbiIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0Iiwib250b3VjaGVuZCIsImVuZFBvaW50cyIsIm9uVGFwIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwic3BlZWRYIiwiZW5kUGFubmluZyIsImVuZFpvb21pbmciLCJlbmRTd2lwaW5nIiwidGFwcGVkIiwidGFwWCIsInRhcFkiLCJHdWVzdHVyZXMiLCIkYnV0dG9uIiwiY2xlYXIiLCJvbkluaXQuZmIiLCJiZWZvcmVTaG93LmZiIiwiYWZ0ZXJTaG93LmZiIiwiYWZ0ZXJLZXlkb3duLmZiIiwiYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiIiwicmVxdWVzdCIsInJlcXVlc3RGdWxsc2NyZWVuIiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0IiwiZXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxzY3JlZW4iLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsIkZ1bGxTY3JlZW4iLCJiZWZvcmVDbG9zZS5mYiIsImZ1bGxzY3JlZW5jaGFuZ2UiLCIkZ3JpZCIsIiRsaXN0IiwiVGh1bWJzIiwiY3JlYXRlIiwibWFyZ2luLXRvcCIsIm1hcmdpbi1sZWZ0IiwiJiIsIjwiLCJcIiIsIiciLCIvIiwiYCIsIj0iLCJzaGFyZSIsImdhbGxlcnkiLCJlc2NhcGVTZWxlY3RvciIsImNoYXJDb2RlQXQiLCJvcmlnSGFzaCIsImhpc3RvcnkiLCJ0aXRsZSIsInBhdGhuYW1lIiwic2VhcmNoIiwicmVwbGFjZVN0YXRlIiwiZGVsdGFZIiwiZGVsdGFYIiwid2hlZWxEZWx0YSIsImRldGFpbCIsImdldEJyb3dzZXJTY3JvbGxTaXplIiwiYWN0dWFsU2l6ZSIsImJyb3dzZXIiLCJ3ZWJraXQiLCJvdXRlciIsImJveC1zaXppbmciLCJpbm5lciIsImlzU2Nyb2xsT3ZlcmxheXNDb250ZW50Iiwic2Nyb2xsU2l6ZSIsImlzVmVydGljYWxTY3JvbGwiLCJIT1JJWk9OVEFMX0FYSVMiLCJ3aGVlbERlbHRhWCIsImZpcmVmb3giLCJtYWNvc3giLCJwbGF0Zm9ybSIsIm1zZWRnZSIsIm1zaWUiLCJvdmVybGF5Iiwic2Nyb2xsIiwic2Nyb2xscyIsImF1dG9TY3JvbGxTaXplIiwiYXV0b1VwZGF0ZSIsImRlYnVnIiwiZGlzYWJsZUJvZHlTY3JvbGwiLCJpZ25vcmVNb2JpbGUiLCJpZ25vcmVPdmVybGF5IiwiaXNSdGwiLCJzY3JvbGxTdGVwIiwic2hvd0Fycm93cyIsInN0ZXBTY3JvbGxpbmciLCJzY3JvbGx4Iiwic2Nyb2xseSIsIm9uRGVzdHJveSIsIm9uRmFsbGJhY2siLCJvblNjcm9sbCIsIm9uVXBkYXRlIiwiQmFzZVNjcm9sbGJhciIsInVwZGF0ZVNjcm9sbGJhcnMiLCJyZXNpemUiLCJmb3JjZVVwZGF0ZSIsImpRdWVyeVNjcm9sbGJhck9wdGlvbnMiLCJ3cmFwcGVyIiwibWF4LWhlaWdodCIsIlMiLCJjdyIsImNvbnRhaW5lcldyYXBwZXIiLCJjc3NPcHRpb25zIiwiaW5pdFNjcm9sbCIsIm1hcmdpbi1ib3R0b20iLCJtYXhTY3JvbGwiLCJtYXhTY3JvbGxPZmZzZXQiLCJiYXIiLCJreCIsImhhbmRsZU1vdXNlU2Nyb2xsIiwibW91c2V3aGVlbCIsIm9yaWdpbmFsVG91Y2giLCJvcmlnaW5hbFNjcm9sbCIsInRhcmdldFRvdWNoZXMiLCJzY3JvbGxDYWxsYmFjayIsInNjcm9sbEZvcndhcmQiLCJzY3JvbGxPZmZzZXQiLCJjdXJyZW50T2Zmc2V0Iiwic2Nyb2xsVG9WYWx1ZSIsIl9nZXRTY3JvbGwiLCJkZWx0YSIsIm1heFNjcm9sbFZhbHVlIiwiZXZlbnRPZmZzZXQiLCJzY3JvbGxiYXJPZmZzZXQiLCJzY3JvbGxiYXJTaXplIiwiX2hhbmRsZU1vdXNlRG93biIsImV2ZW50UG9zaXRpb24iLCJpbml0T2Zmc2V0Iiwic2Nyb2xsQ2xhc3MiLCJfdXBkYXRlU2Nyb2xsIiwiY3NzT2Zmc2V0IiwiY3NzRnVsbFNpemUiLCJjc3NTaXplIiwiQXJlYVNpemUiLCJBcmVhVmlzaWJsZSIsImFkdmFuY2VkIiwidHJhY2siLCJDdXN0b21TY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJjb21tYW5kIiwiZWxlbWVudCIsInRpbWVyQ291bnRlciIsImZvcmNlIiwidmlzaWJsZUhlaWdodCIsInZpc2libGVXaWR0aCIsImFuZ3VsYXIiLCJwcm92aWRlciIsImRlZmF1bHRPcHRpb25zIiwic2V0T3B0aW9ucyIsIiRnZXQiLCJkaXJlY3RpdmUiLCJqUXVlcnlTY3JvbGxiYXIiLCIkcGFyc2UiLCJyZXN0cmljdCIsImxpbmsiLCJzY29wZSIsIm1vZGVsIiwianF1ZXJ5U2Nyb2xsYmFyIiwicmVxdWlyZSIsIlMyIiwic2VsZWN0MiIsInJlcXVpcmVqcyIsInVuZGVmIiwiaGFzUHJvcCIsIm5vcm1hbGl6ZSIsImJhc2VOYW1lIiwibmFtZVBhcnRzIiwibmFtZVNlZ21lbnQiLCJtYXBWYWx1ZSIsImZvdW5kTWFwIiwibGFzdEluZGV4IiwiZm91bmRJIiwiZm91bmRTdGFyTWFwIiwic3RhckkiLCJwYXJ0Iiwibm9ybWFsaXplZEJhc2VQYXJ0cyIsImJhc2VQYXJ0cyIsImNvbmZpZyIsInN0YXJNYXAiLCJub2RlSWRDb21wYXQiLCJqc1N1ZmZpeFJlZ0V4cCIsIm1ha2VSZXF1aXJlIiwicmVsTmFtZSIsImZvcmNlU3luYyIsImFwcyIsInJlcSIsIm1ha2VOb3JtYWxpemUiLCJtYWtlTG9hZCIsImRlcE5hbWUiLCJkZWZpbmVkIiwiY2FsbERlcCIsIndhaXRpbmciLCJkZWZpbmluZyIsIm1haW4iLCJzcGxpdFByZWZpeCIsIm1ha2VSZWxQYXJ0cyIsIm1ha2VDb25maWciLCJtYWtlTWFwIiwicmVsUGFydHMiLCJwbHVnaW4iLCJyZWxSZXNvdXJjZU5hbWUiLCJwciIsInVyaSIsImRlcHMiLCJjanNNb2R1bGUiLCJ1c2luZ0V4cG9ydHMiLCJjYWxsYmFja1R5cGUiLCJhbHQiLCJjZmciLCJfZGVmaW5lZCIsImdldE1ldGhvZHMiLCJ0aGVDbGFzcyIsInByb3RvIiwibWV0aG9kcyIsIm1ldGhvZE5hbWUiLCJVdGlscyIsIkV4dGVuZCIsIkNoaWxkQ2xhc3MiLCJTdXBlckNsYXNzIiwiQmFzZUNvbnN0cnVjdG9yIiwiX19oYXNQcm9wIiwiX19zdXBlcl9fIiwiRGVjb3JhdGUiLCJEZWNvcmF0b3JDbGFzcyIsIkRlY29yYXRlZENsYXNzIiwiYXJnQ291bnQiLCJjYWxsZWRDb25zdHJ1Y3RvciIsImN0ciIsImRlY29yYXRlZE1ldGhvZHMiLCJzdXBlck1ldGhvZHMiLCJkaXNwbGF5TmFtZSIsInN1cGVyTWV0aG9kIiwiZGVjb3JhdGVkTWV0aG9kIiwib3JpZ2luYWxNZXRob2QiLCJPYnNlcnZhYmxlIiwibGlzdGVuZXJzIiwiX3R5cGUiLCJpbnZva2UiLCJnZW5lcmF0ZUNoYXJzIiwiY2hhcnMiLCJfY29udmVydERhdGEiLCJvcmlnaW5hbEtleSIsImRhdGFMZXZlbCIsImsiLCJoYXNTY3JvbGwiLCIkZWwiLCJlc2NhcGVNYXJrdXAiLCJtYXJrdXAiLCJyZXBsYWNlTWFwIiwiXFwiLCJhcHBlbmRNYW55IiwiJGVsZW1lbnQiLCIkbm9kZXMiLCIkanFOb2RlcyIsIl9fY2FjaGUiLCJHZXRVbmlxdWVFbGVtZW50SWQiLCJzZWxlY3QySWQiLCJTdG9yZURhdGEiLCJHZXREYXRhIiwiUmVtb3ZlRGF0YSIsIlJlc3VsdHMiLCJkYXRhQWRhcHRlciIsInJlbmRlciIsIiRyZXN1bHRzIiwiZGlzcGxheU1lc3NhZ2UiLCIkbWVzc2FnZSIsIm1lc3NhZ2UiLCJoaWRlTWVzc2FnZXMiLCIkb3B0aW9ucyIsIml0ZW0iLCIkb3B0aW9uIiwiJGRyb3Bkb3duIiwiaGlnaGxpZ2h0Rmlyc3RJdGVtIiwiJHNlbGVjdGVkIiwiZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSIsInNldENsYXNzZXMiLCJzZWxlY3RlZElkcyIsImxvYWRpbmdNb3JlIiwibG9hZGluZyIsIiRsb2FkaW5nIiwicm9sZSIsImFyaWEtc2VsZWN0ZWQiLCJFbGVtZW50IiwiX3Jlc3VsdElkIiwibGFiZWwiLCJ0ZW1wbGF0ZSIsIiRjaGlsZHJlbiIsImNoaWxkIiwiJGNoaWxkIiwiJGNoaWxkcmVuQ29udGFpbmVyIiwiaXNPcGVuIiwiJGhpZ2hsaWdodGVkIiwiZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzIiwiY3VycmVudEluZGV4IiwibmV4dEluZGV4IiwiJG5leHQiLCJuZXh0VG9wIiwibmV4dE9mZnNldCIsIm5leHRCb3R0b20iLCJpc0F0VG9wIiwiaXNBdEJvdHRvbSIsImV2dCIsIiR0aGlzIiwib2Zmc2V0RGVsdGEiLCJCQUNLU1BBQ0UiLCJUQUIiLCJFTlRFUiIsIlNISUZUIiwiQ1RSTCIsIkFMVCIsIkVTQyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkRPV04iLCJERUxFVEUiLCJLRVlTIiwiQmFzZVNlbGVjdGlvbiIsIiRzZWxlY3Rpb24iLCJfdGFiaW5kZXgiLCJyZXN1bHRzSWQiLCJfaGFuZGxlQmx1ciIsIl9hdHRhY2hDbG9zZUhhbmRsZXIiLCJfZGV0YWNoQ2xvc2VIYW5kbGVyIiwiJHNlbGVjdCIsImlzRW5hYmxlZCIsImlzRGlzYWJsZWQiLCJTaW5nbGVTZWxlY3Rpb24iLCIkcmVuZGVyZWQiLCJzZWxlY3Rpb25Db250YWluZXIiLCJmb3JtYXR0ZWQiLCJNdWx0aXBsZVNlbGVjdGlvbiIsIiRyZW1vdmUiLCIkc2VsZWN0aW9ucyIsIlBsYWNlaG9sZGVyIiwiZGVjb3JhdGVkIiwicGxhY2Vob2xkZXIiLCJub3JtYWxpemVQbGFjZWhvbGRlciIsImNyZWF0ZVBsYWNlaG9sZGVyIiwic2luZ2xlUGxhY2Vob2xkZXIiLCJBbGxvd0NsZWFyIiwiX2hhbmRsZUNsZWFyIiwiX2hhbmRsZUtleWJvYXJkQ2xlYXIiLCIkY2xlYXIiLCJwcmV2aW91c1ZhbCIsInVuc2VsZWN0RGF0YSIsInByZXZlbnRlZCIsInJlbW92ZUFsbCIsIlNlYXJjaCIsIiRzZWFyY2giLCIkc2VhcmNoQ29udGFpbmVyIiwiX3RyYW5zZmVyVGFiSW5kZXgiLCJfa2V5VXBQcmV2ZW50ZWQiLCIkcHJldmlvdXNDaG9pY2UiLCJzZWFyY2hSZW1vdmVDaG9pY2UiLCJkaXNhYmxlSW5wdXRFdmVudHMiLCJoYW5kbGVTZWFyY2giLCJzZWFyY2hIYWRGb2N1cyIsInJlc2l6ZVNlYXJjaCIsInRlcm0iLCJFdmVudFJlbGF5IiwicmVsYXlFdmVudHMiLCJwcmV2ZW50YWJsZUV2ZW50cyIsIlRyYW5zbGF0aW9uIiwiZGljdCIsInRyYW5zbGF0aW9uIiwiX2NhY2hlIiwibG9hZFBhdGgiLCJwYXRoIiwidHJhbnNsYXRpb25zIiwi4pK2Iiwi77yhIiwiw4AiLCLDgSIsIsOCIiwi4bqmIiwi4bqkIiwi4bqqIiwi4bqoIiwiw4MiLCLEgCIsIsSCIiwi4bqwIiwi4bquIiwi4bq0Iiwi4bqyIiwiyKYiLCLHoCIsIsOEIiwix54iLCLhuqIiLCLDhSIsIse6Iiwix40iLCLIgCIsIsiCIiwi4bqgIiwi4bqsIiwi4bq2Iiwi4biAIiwixIQiLCLIuiIsIuKxryIsIuqcsiIsIsOGIiwix7wiLCLHoiIsIuqctCIsIuqctiIsIuqcuCIsIuqcuiIsIuqcvCIsIuKStyIsIu+8oiIsIuG4giIsIuG4hCIsIuG4hiIsIsmDIiwixoIiLCLGgSIsIuKSuCIsIu+8oyIsIsSGIiwixIgiLCLEiiIsIsSMIiwiw4ciLCLhuIgiLCLGhyIsIsi7Iiwi6py+Iiwi4pK5Iiwi77ykIiwi4biKIiwixI4iLCLhuIwiLCLhuJAiLCLhuJIiLCLhuI4iLCLEkCIsIsaLIiwixooiLCLGiSIsIuqduSIsIsexIiwix4QiLCLHsiIsIseFIiwi4pK6Iiwi77ylIiwiw4giLCLDiSIsIsOKIiwi4buAIiwi4bq+Iiwi4buEIiwi4buCIiwi4bq8IiwixJIiLCLhuJQiLCLhuJYiLCLElCIsIsSWIiwiw4siLCLhuroiLCLEmiIsIsiEIiwiyIYiLCLhurgiLCLhu4YiLCLIqCIsIuG4nCIsIsSYIiwi4biYIiwi4biaIiwixpAiLCLGjiIsIuKSuyIsIu+8piIsIuG4niIsIsaRIiwi6p27Iiwi4pK8Iiwi77ynIiwix7QiLCLEnCIsIuG4oCIsIsSeIiwixKAiLCLHpiIsIsSiIiwix6QiLCLGkyIsIuqeoCIsIuqdvSIsIuqdviIsIuKSvSIsIu+8qCIsIsSkIiwi4biiIiwi4bimIiwiyJ4iLCLhuKQiLCLhuKgiLCLhuKoiLCLEpiIsIuKxpyIsIuKxtSIsIuqejSIsIuKSviIsIu+8qSIsIsOMIiwiw40iLCLDjiIsIsSoIiwixKoiLCLErCIsIsSwIiwiw48iLCLhuK4iLCLhu4giLCLHjyIsIsiIIiwiyIoiLCLhu4oiLCLEriIsIuG4rCIsIsaXIiwi4pK/Iiwi77yqIiwixLQiLCLJiCIsIuKTgCIsIu+8qyIsIuG4sCIsIseoIiwi4biyIiwixLYiLCLhuLQiLCLGmCIsIuKxqSIsIuqdgCIsIuqdgiIsIuqdhCIsIuqeoiIsIuKTgSIsIu+8rCIsIsS/IiwixLkiLCLEvSIsIuG4tiIsIuG4uCIsIsS7Iiwi4bi8Iiwi4bi6IiwixYEiLCLIvSIsIuKxoiIsIuKxoCIsIuqdiCIsIuqdhiIsIuqegCIsIseHIiwix4giLCLik4IiLCLvvK0iLCLhuL4iLCLhuYAiLCLhuYIiLCLisa4iLCLGnCIsIuKTgyIsIu+8riIsIse4IiwixYMiLCLDkSIsIuG5hCIsIsWHIiwi4bmGIiwixYUiLCLhuYoiLCLhuYgiLCLIoCIsIsadIiwi6p6QIiwi6p6kIiwix4oiLCLHiyIsIuKThCIsIu+8ryIsIsOSIiwiw5MiLCLDlCIsIuG7kiIsIuG7kCIsIuG7liIsIuG7lCIsIsOVIiwi4bmMIiwiyKwiLCLhuY4iLCLFjCIsIuG5kCIsIuG5kiIsIsWOIiwiyK4iLCLIsCIsIsOWIiwiyKoiLCLhu44iLCLFkCIsIseRIiwiyIwiLCLIjiIsIsagIiwi4bucIiwi4buaIiwi4bugIiwi4bueIiwi4buiIiwi4buMIiwi4buYIiwix6oiLCLHrCIsIsOYIiwix74iLCLGhiIsIsafIiwi6p2KIiwi6p2MIiwixZIiLCLGoiIsIuqdjiIsIsiiIiwi4pOFIiwi77ywIiwi4bmUIiwi4bmWIiwixqQiLCLisaMiLCLqnZAiLCLqnZIiLCLqnZQiLCLik4YiLCLvvLEiLCLqnZYiLCLqnZgiLCLJiiIsIuKThyIsIu+8siIsIsWUIiwi4bmYIiwixZgiLCLIkCIsIsiSIiwi4bmaIiwi4bmcIiwixZYiLCLhuZ4iLCLJjCIsIuKxpCIsIuqdmiIsIuqepiIsIuqegiIsIuKTiCIsIu+8syIsIuG6niIsIsWaIiwi4bmkIiwixZwiLCLhuaAiLCLFoCIsIuG5piIsIuG5oiIsIuG5qCIsIsiYIiwixZ4iLCLisb4iLCLqnqgiLCLqnoQiLCLik4kiLCLvvLQiLCLhuaoiLCLFpCIsIuG5rCIsIsiaIiwixaIiLCLhubAiLCLhua4iLCLFpiIsIsasIiwixq4iLCLIviIsIuqehiIsIuqcqCIsIuKTiiIsIu+8tSIsIsOZIiwiw5oiLCLDmyIsIsWoIiwi4bm4IiwixaoiLCLhuboiLCLFrCIsIsOcIiwix5siLCLHlyIsIseVIiwix5kiLCLhu6YiLCLFriIsIsWwIiwix5MiLCLIlCIsIsiWIiwixq8iLCLhu6oiLCLhu6giLCLhu64iLCLhu6wiLCLhu7AiLCLhu6QiLCLhubIiLCLFsiIsIuG5tiIsIuG5tCIsIsmEIiwi4pOLIiwi77y2Iiwi4bm8Iiwi4bm+IiwixrIiLCLqnZ4iLCLJhSIsIuqdoCIsIuKTjCIsIu+8tyIsIuG6gCIsIuG6giIsIsW0Iiwi4bqGIiwi4bqEIiwi4bqIIiwi4rGyIiwi4pONIiwi77y4Iiwi4bqKIiwi4bqMIiwi4pOOIiwi77y5Iiwi4buyIiwiw50iLCLFtiIsIuG7uCIsIsiyIiwi4bqOIiwixbgiLCLhu7YiLCLhu7QiLCLGsyIsIsmOIiwi4bu+Iiwi4pOPIiwi77y6IiwixbkiLCLhupAiLCLFuyIsIsW9Iiwi4bqSIiwi4bqUIiwixrUiLCLIpCIsIuKxvyIsIuKxqyIsIuqdoiIsIuKTkCIsIu+9gSIsIuG6miIsIsOgIiwiw6EiLCLDoiIsIuG6pyIsIuG6pSIsIuG6qyIsIuG6qSIsIsOjIiwixIEiLCLEgyIsIuG6sSIsIuG6ryIsIuG6tSIsIuG6syIsIsinIiwix6EiLCLDpCIsIsefIiwi4bqjIiwiw6UiLCLHuyIsIseOIiwiyIEiLCLIgyIsIuG6oSIsIuG6rSIsIuG6tyIsIuG4gSIsIsSFIiwi4rGlIiwiyZAiLCLqnLMiLCLDpiIsIse9Iiwix6MiLCLqnLUiLCLqnLciLCLqnLkiLCLqnLsiLCLqnL0iLCLik5EiLCLvvYIiLCLhuIMiLCLhuIUiLCLhuIciLCLGgCIsIsaDIiwiyZMiLCLik5IiLCLvvYMiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsOnIiwi4biJIiwixogiLCLIvCIsIuqcvyIsIuKGhCIsIuKTkyIsIu+9hCIsIuG4iyIsIsSPIiwi4biNIiwi4biRIiwi4biTIiwi4biPIiwixJEiLCLGjCIsIsmWIiwiyZciLCLqnboiLCLHsyIsIseGIiwi4pOUIiwi772FIiwiw6giLCLDqSIsIsOqIiwi4buBIiwi4bq/Iiwi4buFIiwi4buDIiwi4bq9IiwixJMiLCLhuJUiLCLhuJciLCLElSIsIsSXIiwiw6siLCLhursiLCLEmyIsIsiFIiwiyIciLCLhurkiLCLhu4ciLCLIqSIsIuG4nSIsIsSZIiwi4biZIiwi4bibIiwiyYciLCLJmyIsIsedIiwi4pOVIiwi772GIiwi4bifIiwixpIiLCLqnbwiLCLik5YiLCLvvYciLCLHtSIsIsSdIiwi4bihIiwixJ8iLCLEoSIsIsenIiwixKMiLCLHpSIsIsmgIiwi6p6hIiwi4bW5Iiwi6p2/Iiwi4pOXIiwi772IIiwixKUiLCLhuKMiLCLhuKciLCLInyIsIuG4pSIsIuG4qSIsIuG4qyIsIuG6liIsIsSnIiwi4rGoIiwi4rG2IiwiyaUiLCLGlSIsIuKTmCIsIu+9iSIsIsOsIiwiw60iLCLDriIsIsSpIiwixKsiLCLErSIsIsOvIiwi4bivIiwi4buJIiwix5AiLCLIiSIsIsiLIiwi4buLIiwixK8iLCLhuK0iLCLJqCIsIsSxIiwi4pOZIiwi772KIiwixLUiLCLHsCIsIsmJIiwi4pOaIiwi772LIiwi4bixIiwix6kiLCLhuLMiLCLEtyIsIuG4tSIsIsaZIiwi4rGqIiwi6p2BIiwi6p2DIiwi6p2FIiwi6p6jIiwi4pObIiwi772MIiwixYAiLCLEuiIsIsS+Iiwi4bi3Iiwi4bi5IiwixLwiLCLhuL0iLCLhuLsiLCLFvyIsIsWCIiwixpoiLCLJqyIsIuKxoSIsIuqdiSIsIuqegSIsIuqdhyIsIseJIiwi4pOcIiwi772NIiwi4bi/Iiwi4bmBIiwi4bmDIiwiybEiLCLJryIsIuKTnSIsIu+9jiIsIse5IiwixYQiLCLDsSIsIuG5hSIsIsWIIiwi4bmHIiwixYYiLCLhuYsiLCLhuYkiLCLGniIsIsmyIiwixYkiLCLqnpEiLCLqnqUiLCLHjCIsIuKTniIsIu+9jyIsIsOyIiwiw7MiLCLDtCIsIuG7kyIsIuG7kSIsIuG7lyIsIuG7lSIsIsO1Iiwi4bmNIiwiyK0iLCLhuY8iLCLFjSIsIuG5kSIsIuG5kyIsIsWPIiwiyK8iLCLIsSIsIsO2IiwiyKsiLCLhu48iLCLFkSIsIseSIiwiyI0iLCLIjyIsIsahIiwi4budIiwi4bubIiwi4buhIiwi4bufIiwi4bujIiwi4buNIiwi4buZIiwix6siLCLHrSIsIsO4Iiwix78iLCLJlCIsIuqdiyIsIuqdjSIsIsm1IiwixZMiLCLGoyIsIsijIiwi6p2PIiwi4pOfIiwi772QIiwi4bmVIiwi4bmXIiwixqUiLCLhtb0iLCLqnZEiLCLqnZMiLCLqnZUiLCLik6AiLCLvvZEiLCLJiyIsIuqdlyIsIuqdmSIsIuKToSIsIu+9kiIsIsWVIiwi4bmZIiwixZkiLCLIkSIsIsiTIiwi4bmbIiwi4bmdIiwixZciLCLhuZ8iLCLJjSIsIsm9Iiwi6p2bIiwi6p6nIiwi6p6DIiwi4pOiIiwi772TIiwiw58iLCLFmyIsIuG5pSIsIsWdIiwi4bmhIiwixaEiLCLhuaciLCLhuaMiLCLhuakiLCLImSIsIsWfIiwiyL8iLCLqnqkiLCLqnoUiLCLhupsiLCLik6MiLCLvvZQiLCLhuasiLCLhupciLCLFpSIsIuG5rSIsIsibIiwixaMiLCLhubEiLCLhua8iLCLFpyIsIsatIiwiyogiLCLisaYiLCLqnociLCLqnKkiLCLik6QiLCLvvZUiLCLDuSIsIsO6Iiwiw7siLCLFqSIsIuG5uSIsIsWrIiwi4bm7Iiwixa0iLCLDvCIsIsecIiwix5giLCLHliIsIseaIiwi4bunIiwixa8iLCLFsSIsIseUIiwiyJUiLCLIlyIsIsawIiwi4burIiwi4bupIiwi4buvIiwi4butIiwi4buxIiwi4bulIiwi4bmzIiwixbMiLCLhubciLCLhubUiLCLKiSIsIuKTpSIsIu+9liIsIuG5vSIsIuG5vyIsIsqLIiwi6p2fIiwiyowiLCLqnaEiLCLik6YiLCLvvZciLCLhuoEiLCLhuoMiLCLFtSIsIuG6hyIsIuG6hSIsIuG6mCIsIuG6iSIsIuKxsyIsIuKTpyIsIu+9mCIsIuG6iyIsIuG6jSIsIuKTqCIsIu+9mSIsIuG7syIsIsO9IiwixbciLCLhu7kiLCLIsyIsIuG6jyIsIsO/Iiwi4bu3Iiwi4bqZIiwi4bu1IiwixrQiLCLJjyIsIuG7vyIsIuKTqSIsIu+9miIsIsW6Iiwi4bqRIiwixbwiLCLFviIsIuG6kyIsIuG6lSIsIsa2IiwiyKUiLCLJgCIsIuKxrCIsIuqdoyIsIs6GIiwizogiLCLOiSIsIs6KIiwizqoiLCLOjCIsIs6OIiwizqsiLCLOjyIsIs6sIiwizq0iLCLOriIsIs6vIiwiz4oiLCLOkCIsIs+MIiwiz40iLCLPiyIsIs6wIiwiz44iLCLPgiIsIuKAmSIsIkJhc2VBZGFwdGVyIiwicXVlcnkiLCJnZW5lcmF0ZVJlc3VsdElkIiwiU2VsZWN0QWRhcHRlciIsImN1cnJlbnREYXRhIiwidW5zZWxlY3QiLCJhZGRPcHRpb25zIiwibm9ybWFsaXplZERhdGEiLCJfbm9ybWFsaXplSXRlbSIsIkFycmF5QWRhcHRlciIsIl9kYXRhVG9Db252ZXJ0IiwiY29udmVydFRvT3B0aW9ucyIsImVsbSIsIiRleGlzdGluZyIsImV4aXN0aW5nSWRzIiwiJGV4aXN0aW5nT3B0aW9uIiwiZXhpc3RpbmdEYXRhIiwibmV3RGF0YSIsIiRuZXdPcHRpb24iLCJBamF4QWRhcHRlciIsImFqYXhPcHRpb25zIiwiX2FwcGx5RGVmYXVsdHMiLCJwcm9jZXNzUmVzdWx0cyIsInEiLCJmYWlsdXJlIiwiJHJlcXVlc3QiLCJfcmVxdWVzdCIsIl9xdWVyeVRpbWVvdXQiLCJUYWdzIiwidGFncyIsImNyZWF0ZVRhZyIsImluc2VydFRhZyIsImNoZWNrQ2hpbGRyZW4iLCJfcmVtb3ZlT2xkVGFncyIsInBhZ2UiLCJUb2tlbml6ZXIiLCJ0b2tlbml6ZXIiLCJkcm9wZG93biIsImNyZWF0ZUFuZFNlbGVjdCIsInRva2VuRGF0YSIsInNlcGFyYXRvcnMiLCJ0ZXJtQ2hhciIsInBhcnRQYXJhbXMiLCJNaW5pbXVtSW5wdXRMZW5ndGgiLCIkZSIsIm1pbmltdW1JbnB1dExlbmd0aCIsIm1pbmltdW0iLCJNYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtIiwiTWF4aW11bVNlbGVjdGlvbkxlbmd0aCIsIm1heGltdW1TZWxlY3Rpb25MZW5ndGgiLCJfY2hlY2tJZk1heGltdW1TZWxlY3RlZCIsInN1Y2Nlc3NDYWxsYmFjayIsIkRyb3Bkb3duIiwic2hvd1NlYXJjaCIsIkhpZGVQbGFjZWhvbGRlciIsInJlbW92ZVBsYWNlaG9sZGVyIiwibW9kaWZpZWREYXRhIiwiSW5maW5pdGVTY3JvbGwiLCJsYXN0UGFyYW1zIiwiJGxvYWRpbmdNb3JlIiwiY3JlYXRlTG9hZGluZ01vcmUiLCJzaG93TG9hZGluZ01vcmUiLCJsb2FkTW9yZUlmTmVlZGVkIiwiaXNMb2FkTW9yZVZpc2libGUiLCJsb2FkTW9yZSIsInBhZ2luYXRpb24iLCJtb3JlIiwiQXR0YWNoQm9keSIsIiRkcm9wZG93blBhcmVudCIsIl9zaG93RHJvcGRvd24iLCJfYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyIiwiX2JpbmRDb250YWluZXJSZXN1bHRIYW5kbGVycyIsIl9oaWRlRHJvcGRvd24iLCJfZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyIiwiJGRyb3Bkb3duQ29udGFpbmVyIiwiX2NvbnRhaW5lclJlc3VsdHNIYW5kbGVyc0JvdW5kIiwiX3Bvc2l0aW9uRHJvcGRvd24iLCJfcmVzaXplRHJvcGRvd24iLCJzY3JvbGxFdmVudCIsInJlc2l6ZUV2ZW50Iiwib3JpZW50YXRpb25FdmVudCIsIiR3YXRjaGVycyIsImV2IiwiJHdpbmRvdyIsImlzQ3VycmVudGx5QWJvdmUiLCJpc0N1cnJlbnRseUJlbG93IiwibmV3RGlyZWN0aW9uIiwidmlld3BvcnQiLCJlbm91Z2hSb29tQWJvdmUiLCJlbm91Z2hSb29tQmVsb3ciLCIkb2Zmc2V0UGFyZW50IiwiaXNDb25uZWN0ZWQiLCJjb3VudFJlc3VsdHMiLCJNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCIsIm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoIiwiSW5maW5pdHkiLCJTZWxlY3RPbkNsb3NlIiwiX2hhbmRsZVNlbGVjdE9uQ2xvc2UiLCJvcmlnaW5hbFNlbGVjdDJFdmVudCIsIiRoaWdobGlnaHRlZFJlc3VsdHMiLCJDbG9zZU9uU2VsZWN0IiwiX3NlbGVjdFRyaWdnZXJlZCIsImN0cmxLZXkiLCJlcnJvckxvYWRpbmciLCJpbnB1dFRvb0xvbmciLCJvdmVyQ2hhcnMiLCJpbnB1dFRvb1Nob3J0IiwibWF4aW11bVNlbGVjdGVkIiwibm9SZXN1bHRzIiwic2VhcmNoaW5nIiwicmVtb3ZlQWxsSXRlbXMiLCJSZXN1bHRzTGlzdCIsIlNlbGVjdGlvblNlYXJjaCIsIkRJQUNSSVRJQ1MiLCJTZWxlY3REYXRhIiwiQXJyYXlEYXRhIiwiQWpheERhdGEiLCJEcm9wZG93blNlYXJjaCIsIkVuZ2xpc2hUcmFuc2xhdGlvbiIsIkRlZmF1bHRzIiwidG9rZW5TZXBhcmF0b3JzIiwiUXVlcnkiLCJhbWRCYXNlIiwiaW5pdFNlbGVjdGlvbiIsIkluaXRTZWxlY3Rpb24iLCJyZXN1bHRzQWRhcHRlciIsInNlbGVjdE9uQ2xvc2UiLCJkcm9wZG93bkFkYXB0ZXIiLCJtdWx0aXBsZSIsIlNlYXJjaGFibGVEcm9wZG93biIsImNsb3NlT25TZWxlY3QiLCJkcm9wZG93bkNzc0NsYXNzIiwiZHJvcGRvd25Dc3MiLCJhZGFwdERyb3Bkb3duQ3NzQ2xhc3MiLCJEcm9wZG93bkNTUyIsInNlbGVjdGlvbkFkYXB0ZXIiLCJhbGxvd0NsZWFyIiwiY29udGFpbmVyQ3NzQ2xhc3MiLCJjb250YWluZXJDc3MiLCJhZGFwdENvbnRhaW5lckNzc0NsYXNzIiwiQ29udGFpbmVyQ1NTIiwibGFuZ3VhZ2UiLCJfcmVzb2x2ZUxhbmd1YWdlIiwidW5pcXVlTGFuZ3VhZ2VzIiwiX3Byb2Nlc3NUcmFuc2xhdGlvbnMiLCJzdHJpcERpYWNyaXRpY3MiLCJhbWRMYW5ndWFnZUJhc2UiLCJkcm9wZG93bkF1dG9XaWR0aCIsInNjcm9sbEFmdGVyU2VsZWN0Iiwic29ydGVyIiwidGVtcGxhdGVSZXN1bHQiLCJ0ZW1wbGF0ZVNlbGVjdGlvbiIsInRoZW1lIiwiYXBwbHlGcm9tRWxlbWVudCIsIm9wdGlvbkxhbmd1YWdlIiwiZGVmYXVsdExhbmd1YWdlIiwiZWxlbWVudExhbmd1YWdlIiwicGFyZW50TGFuZ3VhZ2UiLCJsYW5ndWFnZXMiLCJyZXNvbHZlZExhbmd1YWdlcyIsImxhbmd1YWdlUGFydHMiLCJiYXNlTGFuZ3VhZ2UiLCJsYW5ndWFnZURhdGEiLCJleCIsIndhcm4iLCJjYW1lbEtleSIsImNvbnZlcnRlZERhdGEiLCJPcHRpb25zIiwiSW5wdXRDb21wYXQiLCJ1cHBlckNhc2VMZXR0ZXIiLCJleGNsdWRlZERhdGEiLCJkYXRhc2V0IiwiYXR0cmlidXRlTmFtZSIsImRhdGFOYW1lIiwiZGF0YVZhbHVlIiwiU2VsZWN0MiIsIl9nZW5lcmF0ZUlkIiwiRGF0YUFkYXB0ZXIiLCJfcGxhY2VDb250YWluZXIiLCJTZWxlY3Rpb25BZGFwdGVyIiwiRHJvcGRvd25BZGFwdGVyIiwiUmVzdWx0c0FkYXB0ZXIiLCJfYmluZEFkYXB0ZXJzIiwiX3JlZ2lzdGVyRG9tRXZlbnRzIiwiX3JlZ2lzdGVyRGF0YUV2ZW50cyIsIl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyIsIl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzIiwiX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cyIsIl9yZWdpc3RlckV2ZW50cyIsImluaXRpYWxEYXRhIiwiX3N5bmNBdHRyaWJ1dGVzIiwiX3Jlc29sdmVXaWR0aCIsIldJRFRIIiwic3R5bGVXaWR0aCIsImVsZW1lbnRXaWR0aCIsIl9zeW5jQSIsIl9zeW5jUyIsIl9zeW5jU3VidHJlZSIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX29ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJub25SZWxheUV2ZW50cyIsInRvZ2dsZURyb3Bkb3duIiwiYWx0S2V5IiwiX2lzQ2hhbmdlTXV0YXRpb24iLCJjaGFuZ2VkIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsIm11dGF0aW9uIiwiYWN0dWFsVHJpZ2dlciIsInByZVRyaWdnZXJNYXAiLCJwcmVUcmlnZ2VyTmFtZSIsInByZVRyaWdnZXJBcmdzIiwiZW5hYmxlIiwibmV3VmFsIiwiZGlzY29ubmVjdCIsInRoaXNNZXRob2RzIiwiaW5zdGFuY2VPcHRpb25zIiwiU2xpY2siLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiaW5maW5pdGUiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwicnRsIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsImRpcmVjdGlvbiIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiYXV0b1BsYXlJdGVyYXRvciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiY2hlY2tSZXNwb25zaXZlIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsImFkZEJlZm9yZSIsInVubG9hZCIsInJlaW5pdCIsImFuaW1hdGVIZWlnaHQiLCJ0YXJnZXRIZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJ0YXJnZXRMZWZ0IiwiYW5pbVByb3BzIiwiYW5pbVN0YXJ0IiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJzbGljayIsInNsaWRlSGFuZGxlciIsImJ1aWxkQXJyb3dzIiwiYXJpYS1kaXNhYmxlZCIsImJ1aWxkRG90cyIsImRvdFN0cmluZyIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwicm93IiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJ1bnNsaWNrIiwicmVmcmVzaCIsImRvbnRBbmltYXRlIiwiaW5kZXhPZmZzZXQiLCJ1bmV2ZW5PZmZzZXQiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJzZXRQYXVzZWQiLCJvcmllbnRhdGlvbkNoYW5nZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwidmVydGljYWxPZmZzZXQiLCJvZmZzZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJnb1RvIiwic2xpY2tHb1RvIiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJ0YWdOYW1lIiwibG9hZEltYWdlcyIsImltYWdlc1Njb3BlIiwiaW1hZ2VTb3VyY2UiLCJpbWFnZVRvTG9hZCIsImxvYWRSYW5nZSIsImNsb25lUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsImltZ0NvdW50IiwidGFyZ2V0SW1hZ2UiLCJpbml0aWFsaXppbmciLCJmaXJzdFZpc2libGUiLCJjdXJyZW50QnJlYWtwb2ludCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsImZvY3VzSGFuZGxlciIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiYm9keVN0eWxlIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velRyYW5zZm9ybSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsInN3aXBlRGlyZWN0aW9uIiwieERpc3QiLCJ5RGlzdCIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJwb3NpdGlvbk9mZnNldCIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwiYXJpYS1oaWRkZW4iLCJhcmlhLWRlc2NyaWJlZGJ5IiwiYXJpYS1jb250cm9scyIsImFjdGl2YXRlQURBIiwic2YiLCJpc1BsYXkiXSwibWFwcGluZ3MiOiJDQWNBLFNBQUFBLEVBQUFDLEdBRUEsZ0JBQUFDLFNBQUEsZ0JBQUFBLFFBQUFDLFFBUUFELE9BQUFDLFFBQUFILEVBQUFJLFNBQ0FILEVBQUFELEdBQUEsR0FDQSxTQUFBSyxHQUNBLElBQUFBLEVBQUFELFNBQ0EsS0FBQSxJQUFBRSxPQUFBLDJDQUVBLE9BQUFMLEdBQUFJLElBR0FKLEVBQUFELElB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Q0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxLQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxLQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsS0FDQUMsSUFBQSxLQUNBQyxJQUFBLEtBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsS0FDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLEtBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMs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VUFBQTh6RixhQUFBLFdBQ0EsR0FBQTVpRyxHQUFBL0IsSUFDQStCLEdBQUEyNkYsUUFBQTd5RixHQUFBLHlCQUFBLElBQUEsU0FBQXZILEdBQ0FBLEVBQUFvekIsMEJBQ0EsSUFBQXF5RSxHQUFBeDhELEVBQUF2ckMsS0FDQWdSLFlBQUEsV0FDQWpQLEVBQUFpbUcsU0FDQUQsRUFBQXg5RSxHQUFBLFdBQ0F4b0IsRUFBQXE3RixnQkFDQXI3RixFQUFBdTZGLFFBQUEsSUFFQXY2RixFQUFBdTZGLFFBQUEsRUFDQXY2RixFQUFBbzdGLGNBR0EsTUFJQTV4RCxFQUFBdmhDLEdBQUE4MEYsTUFBQSxXQUNBLEdBSUEvOUYsR0FDQTJDLEVBTEEzQixFQUFBL0IsS0FDQW05QixFQUFBOXlCLFVBQUEsR0FDQWdDLEVBQUF1TyxNQUFBL0osVUFBQS9CLE1BQUE5TixLQUFBcUosVUFBQSxHQUNBbEMsRUFBQXBHLEVBQUEzQixNQUdBLEtBQUFXLEVBQUEsRUFBQUEsRUFBQW9ILEVBQUFwSCxJQUtBLEdBSkEsZ0JBQUFvOEIsUUFBQSxLQUFBQSxFQUNBcDdCLEVBQUFoQixHQUFBKzlGLE1BQUEsR0FBQWxILEdBQUE3MUYsRUFBQWhCLEdBQUFvOEIsR0FFQXo1QixFQUFBM0IsRUFBQWhCLEdBQUErOUYsTUFBQTNoRSxHQUFBL3lCLE1BQUFySSxFQUFBaEIsR0FBQSs5RixNQUFBenlGLE9BQ0EsS0FBQTNJLEVBQUEsTUFBQUEsRUFFQSxPQUFBM0IiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2MS4xMi40XHJcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xyXG4gKlxyXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNi0wNS0yMFQxNzoxN1pcclxuICovXHJcblxyXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuXHJcblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2BcclxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXHJcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxyXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXHJcblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxyXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xyXG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cclxuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxyXG5cdFx0XHRmdW5jdGlvbiggdyApIHtcclxuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xyXG5cdFx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcclxuXHR9XHJcblxyXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxyXG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXHJcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2VcclxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXHJcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcclxuLy9cInVzZSBzdHJpY3RcIjtcclxuXHR2YXIgZGVsZXRlZElkcyA9IFtdO1xyXG5cclxuXHR2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcblxyXG5cdHZhciBzbGljZSA9IGRlbGV0ZWRJZHMuc2xpY2U7XHJcblxyXG5cdHZhciBjb25jYXQgPSBkZWxldGVkSWRzLmNvbmNhdDtcclxuXHJcblx0dmFyIHB1c2ggPSBkZWxldGVkSWRzLnB1c2g7XHJcblxyXG5cdHZhciBpbmRleE9mID0gZGVsZXRlZElkcy5pbmRleE9mO1xyXG5cclxuXHR2YXIgY2xhc3MydHlwZSA9IHt9O1xyXG5cclxuXHR2YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xyXG5cclxuXHR2YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcblx0dmFyIHN1cHBvcnQgPSB7fTtcclxuXHJcblxyXG5cclxuXHR2YXJcclxuXHRcdHZlcnNpb24gPSBcIjEuMTIuNFwiLFxyXG5cclxuXHRcdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XHJcblx0XHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcclxuXHRcdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcclxuXHRcdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIElFPDlcclxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxyXG5cdFx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXHJcblxyXG5cdFx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXHJcblx0XHRybXNQcmVmaXggPSAvXi1tcy0vLFxyXG5cdFx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcclxuXHJcblx0XHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXHJcblx0XHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xyXG5cdFx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR9O1xyXG5cclxuXHRqUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xyXG5cclxuXHRcdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcclxuXHRcdGpxdWVyeTogdmVyc2lvbixcclxuXHJcblx0XHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxyXG5cclxuXHRcdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3JcclxuXHRcdHNlbGVjdG9yOiBcIlwiLFxyXG5cclxuXHRcdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxyXG5cdFx0bGVuZ3RoOiAwLFxyXG5cclxuXHRcdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXHJcblx0XHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxyXG5cdFx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xyXG5cdFx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xyXG5cclxuXHRcdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XHJcblx0XHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxyXG5cclxuXHRcdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XHJcblx0XHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXHJcblx0XHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcclxuXHRcdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuXHRcdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcclxuXHRcdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xyXG5cclxuXHRcdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcclxuXHRcdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xyXG5cdFx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcclxuXHJcblx0XHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0XHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcclxuXHRcdFx0fSApICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XHJcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0ZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuXHRcdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxyXG5cdFx0cHVzaDogcHVzaCxcclxuXHRcdHNvcnQ6IGRlbGV0ZWRJZHMuc29ydCxcclxuXHRcdHNwbGljZTogZGVsZXRlZElkcy5zcGxpY2VcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHNyYywgY29weUlzQXJyYXksIGNvcHksIG5hbWUsIG9wdGlvbnMsIGNsb25lLFxyXG5cdFx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcclxuXHRcdFx0aSA9IDEsXHJcblx0XHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXHJcblx0XHRcdGRlZXAgPSBmYWxzZTtcclxuXHJcblx0XHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXHJcblx0XHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRkZWVwID0gdGFyZ2V0O1xyXG5cclxuXHRcdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxyXG5cdFx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxyXG5cdFx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XHJcblx0XHRcdHRhcmdldCA9IHt9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxyXG5cdFx0aWYgKCBpID09PSBsZW5ndGggKSB7XHJcblx0XHRcdHRhcmdldCA9IHRoaXM7XHJcblx0XHRcdGktLTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHJcblx0XHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3RcclxuXHRcdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcclxuXHRcdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxyXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XHJcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xyXG5cdFx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XHJcblx0XHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxyXG5cdFx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdFx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXHJcblx0XHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxyXG5cclxuXHRcdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXHJcblx0XHRpc1JlYWR5OiB0cnVlLFxyXG5cclxuXHRcdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRub29wOiBmdW5jdGlvbigpIHt9LFxyXG5cclxuXHRcdC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uXHJcblx0XHQvLyBTaW5jZSB2ZXJzaW9uIDEuMywgRE9NIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBsaWtlIGFsZXJ0XHJcblx0XHQvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLlxyXG5cdFx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpc0FycmF5OiBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiYXJyYXlcIjtcclxuXHRcdH0sXHJcblxyXG5cdFx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXHJcblx0XHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdztcclxuXHRcdH0sXHJcblxyXG5cdFx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxyXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXHJcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxyXG5cdFx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcclxuXHRcdFx0dmFyIHJlYWxTdHJpbmdPYmogPSBvYmogJiYgb2JqLnRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0XHR2YXIgbmFtZTtcclxuXHRcdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0XHR2YXIga2V5O1xyXG5cclxuXHRcdFx0Ly8gTXVzdCBiZSBhbiBPYmplY3QuXHJcblx0XHRcdC8vIEJlY2F1c2Ugb2YgSUUsIHdlIGFsc28gaGF2ZSB0byBjaGVjayB0aGUgcHJlc2VuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LlxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbFxyXG5cdFx0XHRpZiAoICFvYmogfHwgalF1ZXJ5LnR5cGUoIG9iaiApICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxyXG5cdFx0XHRcdGlmICggb2JqLmNvbnN0cnVjdG9yICYmXHJcblx0XHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iaiwgXCJjb25zdHJ1Y3RvclwiICkgJiZcclxuXHRcdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBJRTgsOSBXaWxsIHRocm93IGV4Y2VwdGlvbnMgb24gY2VydGFpbiBob3N0IG9iamVjdHMgIzk4OTdcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0Ly8gSGFuZGxlIGl0ZXJhdGlvbiBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBvd24gcHJvcGVydGllcy5cclxuXHRcdFx0aWYgKCAhc3VwcG9ydC5vd25GaXJzdCApIHtcclxuXHRcdFx0XHRmb3IgKCBrZXkgaW4gb2JqICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGhhc093bi5jYWxsKCBvYmosIGtleSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXHJcblx0XHRcdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxyXG5cdFx0XHRmb3IgKCBrZXkgaW4gb2JqICkge31cclxuXHJcblx0XHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xyXG5cdFx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdFx0dHlwZW9mIG9iajtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gV29ya2Fyb3VuZHMgYmFzZWQgb24gZmluZGluZ3MgYnkgSmltIERyaXNjb2xsXHJcblx0XHQvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHRcclxuXHRcdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdFx0XHRpZiAoIGRhdGEgJiYgalF1ZXJ5LnRyaW0oIGRhdGEgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gV2UgdXNlIGV4ZWNTY3JpcHQgb24gSW50ZXJuZXQgRXhwbG9yZXJcclxuXHRcdFx0XHQvLyBXZSB1c2UgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHNvIHRoYXQgY29udGV4dCBpcyB3aW5kb3dcclxuXHRcdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxyXG5cdFx0XHRcdCggd2luZG93LmV4ZWNTY3JpcHQgfHwgZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0XHRcdFx0XHR3aW5kb3dbIFwiZXZhbFwiIF0uY2FsbCggd2luZG93LCBkYXRhICk7IC8vIGpzY3M6aWdub3JlIHJlcXVpcmVEb3ROb3RhdGlvblxyXG5cdFx0XHRcdH0gKSggZGF0YSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcclxuXHRcdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcclxuXHRcdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcclxuXHRcdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xyXG5cdFx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcclxuXHJcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xyXG5cdFx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xyXG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG9iajtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIElFPDlcclxuXHRcdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cclxuXHRcdFx0XHRcIlwiIDpcclxuXHRcdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdFx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xyXG5cdFx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0XHRcdGlmICggYXJyICE9IG51bGwgKSB7XHJcblx0XHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXHJcblx0XHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XHJcblx0XHRcdHZhciBsZW47XHJcblxyXG5cdFx0XHRpZiAoIGFyciApIHtcclxuXHRcdFx0XHRpZiAoIGluZGV4T2YgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGxlbiA9IGFyci5sZW5ndGg7XHJcblx0XHRcdFx0aSA9IGkgPyBpIDwgMCA/IE1hdGgubWF4KCAwLCBsZW4gKyBpICkgOiBpIDogMDtcclxuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU2tpcCBhY2Nlc3NpbmcgaW4gc3BhcnNlIGFycmF5c1xyXG5cdFx0XHRcdFx0aWYgKCBpIGluIGFyciAmJiBhcnJbIGkgXSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gLTE7XHJcblx0XHR9LFxyXG5cclxuXHRcdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcclxuXHRcdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxyXG5cdFx0XHRcdGogPSAwLFxyXG5cdFx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XHJcblxyXG5cdFx0XHR3aGlsZSAoIGogPCBsZW4gKSB7XHJcblx0XHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0XHQvLyBXb3JrYXJvdW5kIGNhc3Rpbmcgb2YgLmxlbmd0aCB0byBOYU4gb24gb3RoZXJ3aXNlIGFycmF5bGlrZSBvYmplY3RzIChlLmcuLCBOb2RlTGlzdHMpXHJcblx0XHRcdGlmICggbGVuICE9PSBsZW4gKSB7XHJcblx0XHRcdFx0d2hpbGUgKCBzZWNvbmRbIGogXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZpcnN0Lmxlbmd0aCA9IGk7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmlyc3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcclxuXHRcdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcclxuXHRcdFx0XHRtYXRjaGVzID0gW10sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcclxuXHJcblx0XHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcclxuXHRcdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0XHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcclxuXHRcdFx0dmFyIGxlbmd0aCwgdmFsdWUsXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0cmV0ID0gW107XHJcblxyXG5cdFx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xyXG5cdFx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XHJcblx0XHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xyXG5cdFx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xyXG5cdFx0Z3VpZDogMSxcclxuXHJcblx0XHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHRcdC8vIGFyZ3VtZW50cy5cclxuXHRcdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBhcmdzLCBwcm94eSwgdG1wO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xyXG5cdFx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0XHRmbiA9IHRtcDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cclxuXHRcdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2ltdWxhdGVkIGJpbmRcclxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXHJcblx0XHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xyXG5cclxuXHRcdFx0cmV0dXJuIHByb3h5O1xyXG5cdFx0fSxcclxuXHJcblx0XHRub3c6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gKyggbmV3IERhdGUoKSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcclxuXHRcdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0XHRzdXBwb3J0OiBzdXBwb3J0XHJcblx0fSApO1xyXG5cclxuLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuXHJcbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5qc2hpbnRyYyB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxyXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8ganVzdCBkaXNhYmxlIEpTSGludCBmb3IgdGhlc2VcclxuLy8gdGhyZWUgbGluZXMuXHJcblx0LyoganNoaW50IGlnbm9yZTogc3RhcnQgKi9cclxuXHRpZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBkZWxldGVkSWRzWyBTeW1ib2wuaXRlcmF0b3IgXTtcclxuXHR9XHJcblx0LyoganNoaW50IGlnbm9yZTogZW5kICovXHJcblxyXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcclxuXHRqUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxyXG5cdFx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0XHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0fSApO1xyXG5cclxuXHRmdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxyXG5cdFx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxyXG5cdFx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXHJcblx0XHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXHJcblx0XHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcclxuXHRcdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcclxuXHJcblx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuXHRcdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcclxuXHR9XHJcblx0dmFyIFNpenpsZSA9XHJcblx0XHQvKiFcclxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4xXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXHJcbiAqXHJcbiAqIERhdGU6IDIwMTUtMTAtMTdcclxuICovXHJcblx0XHQoZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcblx0XHRcdHZhciBpLFxyXG5cdFx0XHRcdHN1cHBvcnQsXHJcblx0XHRcdFx0RXhwcixcclxuXHRcdFx0XHRnZXRUZXh0LFxyXG5cdFx0XHRcdGlzWE1MLFxyXG5cdFx0XHRcdHRva2VuaXplLFxyXG5cdFx0XHRcdGNvbXBpbGUsXHJcblx0XHRcdFx0c2VsZWN0LFxyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQsXHJcblx0XHRcdFx0c29ydElucHV0LFxyXG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSxcclxuXHJcblx0XHRcdFx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xyXG5cdFx0XHRcdHNldERvY3VtZW50LFxyXG5cdFx0XHRcdGRvY3VtZW50LFxyXG5cdFx0XHRcdGRvY0VsZW0sXHJcblx0XHRcdFx0ZG9jdW1lbnRJc0hUTUwsXHJcblx0XHRcdFx0cmJ1Z2d5UVNBLFxyXG5cdFx0XHRcdHJidWdneU1hdGNoZXMsXHJcblx0XHRcdFx0bWF0Y2hlcyxcclxuXHRcdFx0XHRjb250YWlucyxcclxuXHJcblx0XHRcdFx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxyXG5cdFx0XHRcdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXHJcblx0XHRcdFx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxyXG5cdFx0XHRcdGRpcnJ1bnMgPSAwLFxyXG5cdFx0XHRcdGRvbmUgPSAwLFxyXG5cdFx0XHRcdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdFx0XHRcdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdFx0XHRcdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdFx0XHRcdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRcdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIDA7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xyXG5cdFx0XHRcdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXHJcblxyXG5cdFx0XHRcdC8vIEluc3RhbmNlIG1ldGhvZHNcclxuXHRcdFx0XHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxyXG5cdFx0XHRcdGFyciA9IFtdLFxyXG5cdFx0XHRcdHBvcCA9IGFyci5wb3AsXHJcblx0XHRcdFx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcclxuXHRcdFx0XHRwdXNoID0gYXJyLnB1c2gsXHJcblx0XHRcdFx0c2xpY2UgPSBhcnIuc2xpY2UsXHJcblx0XHRcdFx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXHJcblx0XHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XHJcblx0XHRcdFx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xyXG5cdFx0XHRcdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRcdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcclxuXHJcblx0XHRcdFx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xyXG5cclxuXHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxyXG5cdFx0XHRcdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXHJcblxyXG5cdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxyXG5cdFx0XHRcdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxyXG5cclxuXHRcdFx0XHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcclxuXHRcdFx0XHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcclxuXHRcdFx0XHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxyXG5cdFx0XHRcdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XHRcdFx0XCIqXFxcXF1cIixcclxuXHJcblx0XHRcdFx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXHJcblx0XHRcdFx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxyXG5cdFx0XHRcdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXHJcblx0XHRcdFx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcclxuXHRcdFx0XHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxyXG5cdFx0XHRcdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xyXG5cdFx0XHRcdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxyXG5cdFx0XHRcdFx0XCIuKlwiICtcclxuXHRcdFx0XHRcdFwiKVxcXFwpfClcIixcclxuXHJcblx0XHRcdFx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxyXG5cdFx0XHRcdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxyXG5cdFx0XHRcdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcclxuXHJcblx0XHRcdFx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblx0XHRcdFx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblxyXG5cdFx0XHRcdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXHJcblxyXG5cdFx0XHRcdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXHJcblx0XHRcdFx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxyXG5cclxuXHRcdFx0XHRtYXRjaEV4cHIgPSB7XHJcblx0XHRcdFx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFx0XHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFx0XHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcclxuXHRcdFx0XHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcclxuXHRcdFx0XHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxyXG5cdFx0XHRcdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXHJcblx0XHRcdFx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcclxuXHRcdFx0XHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxyXG5cdFx0XHRcdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxyXG5cdFx0XHRcdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcclxuXHRcdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0XHRcdFx0cmhlYWRlciA9IC9eaFxcZCQvaSxcclxuXHJcblx0XHRcdFx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXHJcblxyXG5cdFx0XHRcdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xyXG5cdFx0XHRcdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcclxuXHJcblx0XHRcdFx0cnNpYmxpbmcgPSAvWyt+XS8sXHJcblx0XHRcdFx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcclxuXHJcblx0XHRcdFx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xyXG5cdFx0XHRcdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXHJcblx0XHRcdFx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xyXG5cdFx0XHRcdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcclxuXHRcdFx0XHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XHJcblx0XHRcdFx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcclxuXHRcdFx0XHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cclxuXHRcdFx0XHRcdFx0ZXNjYXBlZCA6XHJcblx0XHRcdFx0XHRcdGhpZ2ggPCAwID9cclxuXHRcdFx0XHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XHJcblx0XHRcdFx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXHJcblx0XHRcdFx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xyXG5cdFx0XHRcdC8vIFNlZSBzZXREb2N1bWVudCgpXHJcblx0XHRcdFx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXHJcblx0XHRcdFx0Ly8gZXJyb3IgaW4gSUVcclxuXHRcdFx0XHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRzZXREb2N1bWVudCgpO1xyXG5cdFx0XHRcdH07XHJcblxyXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoXHJcblx0XHRcdFx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXHJcblx0XHRcdFx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcclxuXHRcdFx0XHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XHJcblx0XHRcdFx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcclxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRcdFx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xyXG5cdFx0XHRcdFx0XHR9IDpcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxyXG5cdFx0XHRcdFx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdFx0XHRcdFx0aSA9IDA7XHJcblx0XHRcdFx0XHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHRcdFx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XHJcblx0XHRcdFx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbmlkc2VsZWN0LCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3RvcixcclxuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcclxuXHJcblx0XHRcdFx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcblx0XHRcdFx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcclxuXHJcblx0XHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdFx0XHRcdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XHJcblx0XHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XHJcblx0XHRcdFx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXHJcblx0XHRcdFx0aWYgKCAhc2VlZCApIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXHJcblx0XHRcdFx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcclxuXHRcdFx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gSUQgc2VsZWN0b3JcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcclxuXHRcdFx0XHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxyXG5cdFx0XHRcdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcclxuXHRcdFx0XHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHRcdFx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3RcclxuXHRcdFx0XHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdFx0XHRuaWRzZWxlY3QgPSByaWRlbnRpZmllci50ZXN0KCBuaWQgKSA/IFwiI1wiICsgbmlkIDogXCJbaWQ9J1wiICsgbmlkICsgXCInXVwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xyXG5cdFx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRleHQ7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFsbCBvdGhlcnNcclxuXHRcdFx0XHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXHJcblx0XHRcdCAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxyXG5cdFx0XHQgKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XHJcblx0XHRcdFx0dmFyIGtleXMgPSBbXTtcclxuXHJcblx0XHRcdFx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxyXG5cdFx0XHRcdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBjYWNoZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXHJcblx0XHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRmdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xyXG5cdFx0XHRcdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xyXG5cdFx0XHRcdHJldHVybiBmbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XHJcblx0XHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcclxuXHRcdFx0XHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHJldHVybiAhIWZuKCBkaXYgKTtcclxuXHRcdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0XHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxyXG5cdFx0XHRcdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcclxuXHRcdFx0XHRcdGRpdiA9IG51bGw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xyXG5cdFx0XHQgKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXHJcblx0XHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcclxuXHRcdFx0XHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxyXG5cdFx0XHRcdFx0aSA9IGFyci5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xyXG5cdFx0XHQgKiBAcGFyYW0ge0VsZW1lbnR9IGFcclxuXHRcdFx0ICogQHBhcmFtIHtFbGVtZW50fSBiXHJcblx0XHRcdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xyXG5cdFx0XHRcdHZhciBjdXIgPSBiICYmIGEsXHJcblx0XHRcdFx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cclxuXHRcdFx0XHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXHJcblx0XHRcdFx0aWYgKCBkaWZmICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRpZmY7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxyXG5cdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gYSA/IDEgOiAtMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcclxuXHRcdFx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuXHRcdFx0ICovXHJcblx0XHRcdGZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xyXG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xyXG5cdFx0XHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xyXG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXHJcblx0XHRcdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcclxuXHRcdFx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcclxuXHRcdFx0XHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGosXHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XHJcblx0XHRcdCAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XHJcblx0XHRcdCAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcclxuXHRcdFx0fVxyXG5cclxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcclxuXHRcdFx0c3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGV0ZWN0cyBYTUwgbm9kZXNcclxuXHRcdFx0ICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcclxuXHRcdFx0ICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0aXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XHJcblx0XHRcdFx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXHJcblx0XHRcdFx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuXHRcdFx0ICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcclxuXHRcdFx0ICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcclxuXHRcdFx0XHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxyXG5cdFx0XHRcdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xyXG5cclxuXHRcdFx0XHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxyXG5cdFx0XHRcdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xyXG5cdFx0XHRcdGRvY3VtZW50ID0gZG9jO1xyXG5cdFx0XHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2VcclxuXHRcdFx0XHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXHJcblx0XHRcdFx0aWYgKCAocGFyZW50ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHBhcmVudC50b3AgIT09IHBhcmVudCApIHtcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExXHJcblx0XHRcdFx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvKiBBdHRyaWJ1dGVzXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHRcdFx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXHJcblx0XHRcdFx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXHJcblx0XHRcdFx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XHJcblx0XHRcdFx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8qIGdldEVsZW1lbnQocylCeSpcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdFx0XHRcdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcclxuXHRcdFx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcclxuXHRcdFx0XHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8MTBcclxuXHRcdFx0XHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcclxuXHRcdFx0XHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxyXG5cdFx0XHRcdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxyXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIElEIGZpbmQgYW5kIGZpbHRlclxyXG5cdFx0XHRcdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xyXG5cdFx0XHRcdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFNi83XHJcblx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XHJcblx0XHRcdFx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XHJcblxyXG5cdFx0XHRcdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXHJcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVGFnXHJcblx0XHRcdFx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XHJcblx0XHRcdFx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IDpcclxuXHJcblx0XHRcdFx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHRcdFx0XHR0bXAgPSBbXSxcclxuXHRcdFx0XHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xyXG5cdFx0XHRcdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gQ2xhc3NcclxuXHRcdFx0XHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xyXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHRcdFx0XHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XHJcblxyXG5cdFx0XHRcdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXHJcblx0XHRcdFx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xyXG5cclxuXHRcdFx0XHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxyXG5cdFx0XHRcdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxyXG5cdFx0XHRcdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcclxuXHRcdFx0XHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxyXG5cdFx0XHRcdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxyXG5cdFx0XHRcdHJidWdneVFTQSA9IFtdO1xyXG5cclxuXHRcdFx0XHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcclxuXHRcdFx0XHRcdC8vIEJ1aWxkIFFTQSByZWdleFxyXG5cdFx0XHRcdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxyXG5cdFx0XHRcdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2VcclxuXHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XHJcblx0XHRcdFx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxyXG5cdFx0XHRcdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxyXG5cdFx0XHRcdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxyXG5cdFx0XHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcclxuXHRcdFx0XHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcclxuXHRcdFx0XHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XHJcblx0XHRcdFx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cclxuXHRcdFx0XHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXHJcblx0XHRcdFx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXHJcblx0XHRcdFx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0XHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcclxuXHRcdFx0XHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0XHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0XHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcclxuXHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxyXG5cdFx0XHRcdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcclxuXHRcdFx0XHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xyXG5cdFx0XHRcdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcclxuXHRcdFx0XHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG5cdFx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XHJcblx0XHRcdFx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdFx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxyXG5cdFx0XHRcdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcclxuXHRcdFx0XHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcclxuXHRcdFx0XHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xyXG5cdFx0XHRcdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XHJcblx0XHRcdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XHJcblx0XHRcdFx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdFx0XHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0XHRcdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxyXG5cdFx0XHRcdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxyXG5cdFx0XHRcdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cclxuXHRcdFx0XHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxyXG5cdFx0XHRcdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xyXG5cdFx0XHRcdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xyXG5cdFx0XHRcdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XHJcblxyXG5cdFx0XHRcdC8qIENvbnRhaW5zXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHRcdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcclxuXHJcblx0XHRcdFx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXHJcblx0XHRcdFx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXHJcblx0XHRcdFx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcclxuXHRcdFx0XHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXHJcblx0XHRcdFx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxyXG5cdFx0XHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cclxuXHRcdFx0XHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcblx0XHRcdFx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcclxuXHRcdFx0XHRcdFx0KSk7XHJcblx0XHRcdFx0XHR9IDpcclxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGIgKSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHQvKiBTb3J0aW5nXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHRcdFx0XHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXHJcblx0XHRcdFx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XHJcblx0XHRcdFx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXHJcblx0XHRcdFx0XHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0XHRcdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAwO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXHJcblx0XHRcdFx0XHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcclxuXHRcdFx0XHRcdFx0aWYgKCBjb21wYXJlICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb21wYXJlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XHJcblx0XHRcdFx0XHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XHJcblx0XHRcdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXHJcblx0XHRcdFx0XHRcdFx0MTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XHJcblx0XHRcdFx0XHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc29ydElucHV0ID9cclxuXHRcdFx0XHRcdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHRcdFx0XHRcdDA7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcclxuXHRcdFx0XHRcdH0gOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdFx0XHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcclxuXHRcdFx0XHRcdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRcdFx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIDA7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHZhciBjdXIsXHJcblx0XHRcdFx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0XHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcclxuXHRcdFx0XHRcdFx0XHRhcCA9IFsgYSBdLFxyXG5cdFx0XHRcdFx0XHRcdGJwID0gWyBiIF07XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxyXG5cdFx0XHRcdFx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhdXAgPyAtMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnVwID8gMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDA7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cclxuXHRcdFx0XHRcdFx0Y3VyID0gYTtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRcdFx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGN1ciA9IGI7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0XHRcdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aSsrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaSA/XHJcblx0XHRcdFx0XHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXHJcblx0XHRcdFx0XHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxyXG5cdFx0XHRcdFx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdDA7XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRTaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcclxuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0U2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xyXG5cdFx0XHRcdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcclxuXHRcdFx0XHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XHJcblxyXG5cdFx0XHRcdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdFx0XHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxyXG5cdFx0XHRcdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxyXG5cdFx0XHRcdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcclxuXHRcdFx0XHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxyXG5cdFx0XHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxyXG5cdFx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRTaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcclxuXHRcdFx0XHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRcdFx0XHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdFNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRcdFx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0XHRcdFx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXHJcblx0XHRcdFx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcclxuXHRcdFx0XHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcclxuXHRcdFx0XHRcdFx0dW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0dmFsIDpcclxuXHRcdFx0XHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcclxuXHRcdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRcdFx0XHRudWxsO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0U2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXHJcblx0XHRcdCAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRTaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xyXG5cdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0ZHVwbGljYXRlcyA9IFtdLFxyXG5cdFx0XHRcdFx0aiA9IDAsXHJcblx0XHRcdFx0XHRpID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxyXG5cdFx0XHRcdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XHJcblx0XHRcdFx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XHJcblx0XHRcdFx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XHJcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcclxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcclxuXHRcdFx0XHRzb3J0SW5wdXQgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xyXG5cdFx0XHQgKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlLFxyXG5cdFx0XHRcdFx0cmV0ID0gXCJcIixcclxuXHRcdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdFx0XHRpZiAoICFub2RlVHlwZSApIHtcclxuXHRcdFx0XHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XHJcblx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcclxuXHRcdFx0XHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XHJcblx0XHRcdFx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXHJcblx0XHRcdFx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxyXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cclxuXHRcdFx0XHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcclxuXHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdEV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xyXG5cclxuXHRcdFx0XHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcclxuXHRcdFx0XHRjYWNoZUxlbmd0aDogNTAsXHJcblxyXG5cdFx0XHRcdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxyXG5cclxuXHRcdFx0XHRtYXRjaDogbWF0Y2hFeHByLFxyXG5cclxuXHRcdFx0XHRhdHRySGFuZGxlOiB7fSxcclxuXHJcblx0XHRcdFx0ZmluZDoge30sXHJcblxyXG5cdFx0XHRcdHJlbGF0aXZlOiB7XHJcblx0XHRcdFx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XHRcdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxyXG5cdFx0XHRcdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxyXG5cdFx0XHRcdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRwcmVGaWx0ZXI6IHtcclxuXHRcdFx0XHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXHJcblx0XHRcdFx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHRcdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cclxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcclxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcclxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcclxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxyXG5cdFx0XHQqL1xyXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcclxuXHRcdFx0XHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxyXG5cdFx0XHRcdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcclxuXHRcdFx0XHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdFx0XHRcdHZhciBleGNlc3MsXHJcblx0XHRcdFx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcclxuXHRcdFx0XHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxyXG5cdFx0XHRcdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcclxuXHRcdFx0XHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcclxuXHRcdFx0XHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcclxuXHRcdFx0XHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXHJcblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdGZpbHRlcjoge1xyXG5cclxuXHRcdFx0XHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxyXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XHJcblx0XHRcdFx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxyXG5cdFx0XHRcdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmYWxzZTtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxyXG5cdFx0XHRcdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcclxuXHRcdFx0XHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxyXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdFx0XHRcdH0gOlxyXG5cclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcclxuXHRcdFx0XHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcclxuXHRcdFx0XHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXHJcblx0XHRcdFx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcclxuXHRcdFx0XHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcclxuXHRcdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xyXG5cdFx0XHRcdFx0XHR2YXIgYXJncyxcclxuXHRcdFx0XHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxyXG5cdFx0XHRcdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxyXG5cdFx0XHRcdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXHJcblx0XHRcdFx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xyXG5cdFx0XHRcdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdFx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBpZHgsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBmbjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRwc2V1ZG9zOiB7XHJcblx0XHRcdFx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3NcclxuXHRcdFx0XHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXHJcblx0XHRcdFx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXHJcblx0XHRcdFx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xyXG5cdFx0XHRcdFx0XHR2YXIgaW5wdXQgPSBbXSxcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzID0gW10sXHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XHJcblx0XHRcdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pIDpcclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcclxuXHRcdFx0XHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSksXHJcblxyXG5cdFx0XHRcdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdH0pLFxyXG5cclxuXHRcdFx0XHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdH0pLFxyXG5cclxuXHRcdFx0XHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxyXG5cdFx0XHRcdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcclxuXHRcdFx0XHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXHJcblx0XHRcdFx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxyXG5cdFx0XHRcdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXHJcblx0XHRcdFx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXHJcblx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXHJcblx0XHRcdFx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcclxuXHRcdFx0XHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxyXG5cdFx0XHRcdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XHJcblx0XHRcdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBlbGVtTGFuZztcclxuXHRcdFx0XHRcdFx0XHRkbyB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSksXHJcblxyXG5cdFx0XHRcdFx0Ly8gTWlzY2VsbGFuZW91c1xyXG5cdFx0XHRcdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xyXG5cdFx0XHRcdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxyXG5cdFx0XHRcdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcclxuXHRcdFx0XHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIENvbnRlbnRzXHJcblx0XHRcdFx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xyXG5cdFx0XHRcdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXHJcblx0XHRcdFx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXHJcblx0XHRcdFx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cclxuXHRcdFx0XHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcclxuXHRcdFx0XHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHZhciBhdHRyO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcclxuXHRcdFx0XHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcclxuXHRcdFx0XHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxyXG5cdFx0XHRcdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXHJcblx0XHRcdFx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBbIDAgXTtcclxuXHRcdFx0XHRcdH0pLFxyXG5cclxuXHRcdFx0XHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xyXG5cdFx0XHRcdFx0fSksXHJcblxyXG5cdFx0XHRcdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcclxuXHRcdFx0XHRcdH0pLFxyXG5cclxuXHRcdFx0XHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHRcdFx0XHR9KSxcclxuXHJcblx0XHRcdFx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGkgPSAxO1xyXG5cdFx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHRcdFx0XHR9KSxcclxuXHJcblx0XHRcdFx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRcdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcclxuXHRcdFx0XHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHRcdFx0XHR9KSxcclxuXHJcblx0XHRcdFx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xyXG5cdFx0XHRcdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRFeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcclxuXHJcbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXHJcblx0XHRcdGZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xyXG5cdFx0XHRcdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xyXG5cdFx0XHRcdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XHJcblx0XHRcdH1cclxuXHJcbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xyXG5cdFx0XHRmdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cclxuXHRcdFx0c2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XHJcblx0XHRcdEV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XHJcblxyXG5cdFx0XHR0b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xyXG5cdFx0XHRcdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxyXG5cdFx0XHRcdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcclxuXHRcdFx0XHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBjYWNoZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c29GYXIgPSBzZWxlY3RvcjtcclxuXHRcdFx0XHRncm91cHMgPSBbXTtcclxuXHRcdFx0XHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XHJcblxyXG5cdFx0XHRcdHdoaWxlICggc29GYXIgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxyXG5cdFx0XHRcdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2ggKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcclxuXHRcdFx0XHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0ZhcjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdG1hdGNoZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHQvLyBDb21iaW5hdG9yc1xyXG5cdFx0XHRcdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHRcdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXHJcblx0XHRcdFx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRmlsdGVyc1xyXG5cdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xyXG5cdFx0XHRcdFx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggIW1hdGNoZWQgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXHJcblx0XHRcdFx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXHJcblx0XHRcdFx0cmV0dXJuIHBhcnNlT25seSA/XHJcblx0XHRcdFx0XHRzb0Zhci5sZW5ndGggOlxyXG5cdFx0XHRcdFx0c29GYXIgP1xyXG5cdFx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXHJcblx0XHRcdFx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xyXG5cdFx0XHRcdHZhciBpID0gMCxcclxuXHRcdFx0XHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IFwiXCI7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBzZWxlY3RvcjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcclxuXHRcdFx0XHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXHJcblx0XHRcdFx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxyXG5cdFx0XHRcdFx0ZG9uZU5hbWUgPSBkb25lKys7XHJcblxyXG5cdFx0XHRcdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cclxuXHRcdFx0XHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gOlxyXG5cclxuXHRcdFx0XHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcclxuXHRcdFx0XHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xyXG5cdFx0XHRcdFx0XHRpZiAoIHhtbCApIHtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcclxuXHRcdFx0XHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XHJcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gOlxyXG5cdFx0XHRcdFx0bWF0Y2hlcnNbMF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcclxuXHRcdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHR2YXIgZWxlbSxcclxuXHRcdFx0XHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxyXG5cdFx0XHRcdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xyXG5cdFx0XHRcdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxyXG5cdFx0XHRcdFx0XHRwcmVNYXAgPSBbXSxcclxuXHRcdFx0XHRcdFx0cG9zdE1hcCA9IFtdLFxyXG5cdFx0XHRcdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcclxuXHRcdFx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXHJcblx0XHRcdFx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdFx0XHRlbGVtcyxcclxuXHJcblx0XHRcdFx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cclxuXHRcdFx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxyXG5cdFx0XHRcdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3NhcnlcclxuXHRcdFx0XHRcdFx0XHRcdFtdIDpcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcclxuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMgOlxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXJJbjtcclxuXHJcblx0XHRcdFx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xyXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVyICkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcclxuXHRcdFx0XHRcdGlmICggcG9zdEZpbHRlciApIHtcclxuXHRcdFx0XHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XHJcblx0XHRcdFx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cclxuXHRcdFx0XHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xyXG5cdFx0XHRcdFx0XHRcdFx0dGVtcCA9IFtdO1xyXG5cdFx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXHJcblx0XHRcdFx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xyXG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcclxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZXJPdXRcclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xyXG5cdFx0XHRcdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXHJcblx0XHRcdFx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0XHRcdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcclxuXHRcdFx0XHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXHJcblx0XHRcdFx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXHJcblxyXG5cdFx0XHRcdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcclxuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xyXG5cdFx0XHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xyXG5cdFx0XHRcdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0XHRcdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxyXG5cdFx0XHRcdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XHJcblx0XHRcdFx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcclxuXHRcdFx0XHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdFx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0XHR9IF07XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xyXG5cdFx0XHRcdFx0XHRcdGogPSArK2k7XHJcblx0XHRcdFx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcclxuXHRcdFx0XHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxyXG5cdFx0XHRcdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcclxuXHRcdFx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXHJcblx0XHRcdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxyXG5cdFx0XHRcdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXHJcblx0XHRcdFx0XHRcdFx0XHRtYXRjaGVyLFxyXG5cdFx0XHRcdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXHJcblx0XHRcdFx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXHJcblx0XHRcdFx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcclxuXHRcdFx0XHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0XHRcdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRcdFx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXHJcblx0XHRcdFx0XHRcdFx0aSA9IFwiMFwiLFxyXG5cdFx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXHJcblx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxyXG5cdFx0XHRcdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcclxuXHRcdFx0XHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxyXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXHJcblx0XHRcdFx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXHJcblx0XHRcdFx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xyXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcclxuXHRcdFx0XHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXHJcblx0XHRcdFx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xyXG5cdFx0XHRcdFx0XHRcdGlmICggYnlTZXQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3RcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcclxuXHRcdFx0XHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cclxuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxyXG5cdFx0XHRcdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcclxuXHRcdFx0XHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cclxuXHRcdFx0XHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxyXG5cdFx0XHRcdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cclxuXHRcdFx0XHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cclxuXHRcdFx0XHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXHJcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcclxuXHRcdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xyXG5cdFx0XHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xyXG5cdFx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdHJldHVybiBieVNldCA/XHJcblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcclxuXHRcdFx0XHRcdHN1cGVyTWF0Y2hlcjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHRcdFx0XHR2YXIgaSxcclxuXHRcdFx0XHRcdHNldE1hdGNoZXJzID0gW10sXHJcblx0XHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcclxuXHRcdFx0XHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdFx0aWYgKCAhY2FjaGVkICkge1xyXG5cdFx0XHRcdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XHJcblx0XHRcdFx0XHRpZiAoICFtYXRjaCApIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGkgPSBtYXRjaC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XHJcblx0XHRcdFx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXHJcblx0XHRcdFx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cclxuXHRcdFx0XHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gY2FjaGVkO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcclxuXHRcdFx0ICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xyXG5cdFx0XHQgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxyXG5cdFx0XHQgKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxyXG5cdFx0XHQgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcclxuXHRcdFx0ICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXHJcblx0XHRcdCAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdFx0XHRcdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxyXG5cdFx0XHRcdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3RvcixcclxuXHRcdFx0XHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xyXG5cclxuXHRcdFx0XHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0XHRcdFx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcclxuXHRcdFx0XHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXHJcblx0XHRcdFx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcclxuXHRcdFx0XHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcclxuXHRcdFx0XHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcclxuXHRcdFx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdFx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcclxuXHRcdFx0XHRcdFx0aWYgKCAhY29udGV4dCApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcclxuXHRcdFx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXHJcblx0XHRcdFx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3JcclxuXHRcdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcclxuXHRcdFx0XHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcclxuXHRcdFx0XHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHRcdFx0XHRcdFx0XHQpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcclxuXHRcdFx0XHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxyXG5cdFx0XHRcdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcclxuXHRcdFx0XHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXHJcblx0XHRcdFx0XHRzZWVkLFxyXG5cdFx0XHRcdFx0Y29udGV4dCxcclxuXHRcdFx0XHRcdCFkb2N1bWVudElzSFRNTCxcclxuXHRcdFx0XHRcdHJlc3VsdHMsXHJcblx0XHRcdFx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0fTtcclxuXHJcbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXHJcblxyXG4vLyBTb3J0IHN0YWJpbGl0eVxyXG5cdFx0XHRzdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XHJcblxyXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXHJcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cclxuXHRcdFx0c3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XHJcblxyXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcclxuXHRcdFx0c2V0RG9jdW1lbnQoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXHJcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxyXG5cdFx0XHRzdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcclxuXHRcdFx0XHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcclxuXHRcdFx0XHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcclxuXHRcdFx0fSk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw4XHJcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXHJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcclxuXHRcdFx0aWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xyXG5cdFx0XHRcdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XHJcblx0XHRcdH0pICkge1xyXG5cdFx0XHRcdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdFx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcclxuXHRcdFx0aWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0XHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xyXG5cdFx0XHRcdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0XHRcdFx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XHJcblx0XHRcdH0pICkge1xyXG5cdFx0XHRcdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdFx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcclxuXHRcdFx0aWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xyXG5cdFx0XHR9KSApIHtcclxuXHRcdFx0XHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsO1xyXG5cdFx0XHRcdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxyXG5cdFx0XHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0XHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdFx0XHRcdFx0bnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIFNpenpsZTtcclxuXHJcblx0XHR9KSggd2luZG93ICk7XHJcblxyXG5cclxuXHJcblx0alF1ZXJ5LmZpbmQgPSBTaXp6bGU7XHJcblx0alF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xyXG5cdGpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcclxuXHRqUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxuXHRqUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xyXG5cdGpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcclxuXHRqUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcblxyXG5cclxuXHJcblx0dmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XHJcblx0fTtcclxuXHJcblxyXG5cdHZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBbXTtcclxuXHJcblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRjaGVkO1xyXG5cdH07XHJcblxyXG5cclxuXHR2YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcclxuXHJcblx0dmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyApO1xyXG5cclxuXHJcblxyXG5cdHZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XHJcblxyXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxyXG5cdGZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdFx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcclxuXHRcdFx0fSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcclxuXHRcdFx0fSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPiAtMSApICE9PSBub3Q7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XHJcblx0XHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XHJcblxyXG5cdFx0aWYgKCBub3QgKSB7XHJcblx0XHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cclxuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcclxuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcclxuXHRcdFx0fSApICk7XHJcblx0fTtcclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHR2YXIgaSxcclxuXHRcdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0XHRzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRsZW4gPSBzZWxmLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxyXG5cdFx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XHJcblx0XHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcclxuXHRcdH0sXHJcblx0XHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcclxuXHRcdH0sXHJcblx0XHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gISF3aW5ub3coXHJcblx0XHRcdFx0dGhpcyxcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxyXG5cdFx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cclxuXHRcdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XHJcblx0XHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcclxuXHRcdFx0XHRmYWxzZVxyXG5cdFx0XHQpLmxlbmd0aDtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcclxuXHJcblxyXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcclxuXHR2YXIgcm9vdGpRdWVyeSxcclxuXHJcblx0XHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG5cdFx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxyXG5cdFx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXHJcblx0XHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXHJcblxyXG5cdFx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xyXG5cdFx0XHR2YXIgbWF0Y2gsIGVsZW07XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcclxuXHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGluaXQgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxyXG5cdFx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXHJcblx0XHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXHJcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdGlmICggc2VsZWN0b3IuY2hhckF0KCAwICkgPT09IFwiPFwiICYmXHJcblx0XHRcdFx0XHRzZWxlY3Rvci5jaGFyQXQoIHNlbGVjdG9yLmxlbmd0aCAtIDEgKSA9PT0gXCI+XCIgJiZcclxuXHRcdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXHJcblx0XHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxyXG5cdFx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXHJcblx0XHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXHJcblx0XHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcclxuXHRcdFx0XHRcdFx0XHR0cnVlXHJcblx0XHRcdFx0XHRcdCkgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcclxuXHRcdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXHJcblx0XHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFIGFuZCBPcGVyYSByZXR1cm4gaXRlbXNcclxuXHRcdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgIT09IG1hdGNoWyAyIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcm9vdGpRdWVyeS5maW5kKCBzZWxlY3RvciApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcclxuXHRcdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcclxuXHRcdFx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcclxuXHRcdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1sgMCBdID0gc2VsZWN0b3I7XHJcblx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXHJcblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XHJcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xyXG5cdFx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdC5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XHJcblx0XHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XHJcblx0XHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XHJcblx0XHR9O1xyXG5cclxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxyXG5cdGluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxyXG5cdHJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XHJcblxyXG5cclxuXHR2YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXHJcblxyXG5cdFx0Ly8gbWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcclxuXHRcdGd1YXJhbnRlZWRVbmlxdWUgPSB7XHJcblx0XHRcdGNoaWxkcmVuOiB0cnVlLFxyXG5cdFx0XHRjb250ZW50czogdHJ1ZSxcclxuXHRcdFx0bmV4dDogdHJ1ZSxcclxuXHRcdFx0cHJldjogdHJ1ZVxyXG5cdFx0fTtcclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xyXG5cdFx0XHR2YXIgaSxcclxuXHRcdFx0XHR0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcclxuXHRcdFx0XHRsZW4gPSB0YXJnZXRzLmxlbmd0aDtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XHJcblx0XHRcdHZhciBjdXIsXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRcdG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxyXG5cdFx0XHRcdFx0MDtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHBvcyA/XHJcblx0XHRcdFx0XHRcdHBvcy5pbmRleCggY3VyICkgPiAtMSA6XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcclxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW5cclxuXHRcdC8vIHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50c1xyXG5cdFx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcclxuXHRcdFx0aWYgKCAhZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGluZGV4IGluIHNlbGVjdG9yXHJcblx0XHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5pbkFycmF5KCB0aGlzWyAwIF0sIGpRdWVyeSggZWxlbSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmluQXJyYXkoXHJcblxyXG5cdFx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxyXG5cdFx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbSwgdGhpcyApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxyXG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xyXG5cdFx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xyXG5cdFx0ZG8ge1xyXG5cdFx0XHRjdXIgPSBjdXJbIGRpciBdO1xyXG5cdFx0fSB3aGlsZSAoIGN1ciAmJiBjdXIubm9kZVR5cGUgIT09IDEgKTtcclxuXHJcblx0XHRyZXR1cm4gY3VyO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmVhY2goIHtcclxuXHRcdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcblx0XHR9LFxyXG5cdFx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XHJcblx0XHR9LFxyXG5cdFx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xyXG5cdFx0fSxcclxuXHRcdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0XHR9LFxyXG5cdFx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0XHR9LFxyXG5cdFx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdFx0fSxcclxuXHRcdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0XHR9LFxyXG5cdFx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcclxuXHRcdH0sXHJcblx0XHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcclxuXHRcdH0sXHJcblx0XHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XHJcblx0XHR9LFxyXG5cdFx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xyXG5cdFx0fSxcclxuXHRcdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApID9cclxuXHRcdFx0XHRlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBlbGVtLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQgOlxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xyXG5cdFx0fVxyXG5cdH0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcclxuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcclxuXHRcdFx0dmFyIHJldCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xyXG5cclxuXHRcdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XHJcblx0XHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0cmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcclxuXHRcdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XHJcblx0XHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlU29ydCggcmV0ICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xyXG5cdFx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRcdHJldCA9IHJldC5yZXZlcnNlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcblx0dmFyIHJub3R3aGl0ZSA9ICggL1xcUysvZyApO1xyXG5cclxuXHJcblxyXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xyXG5cdGZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XHJcblx0XHR2YXIgb2JqZWN0ID0ge307XHJcblx0XHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xyXG5cdFx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XHJcblx0XHR9ICk7XHJcblx0XHRyZXR1cm4gb2JqZWN0O1xyXG5cdH1cclxuXHJcblx0LypcclxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XHJcbiAqXHJcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XHJcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxyXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXHJcbiAqXHJcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XHJcbiAqXHJcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXHJcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcclxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXHJcbiAqXHJcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxyXG4gKlxyXG4gKi9cclxuXHRqUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxyXG5cdFx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxyXG5cdFx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcclxuXHRcdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcclxuXHJcblx0XHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xyXG5cdFx0XHRmaXJpbmcsXHJcblxyXG5cdFx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xyXG5cdFx0XHRtZW1vcnksXHJcblxyXG5cdFx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxyXG5cdFx0XHRmaXJlZCxcclxuXHJcblx0XHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcclxuXHRcdFx0bG9ja2VkLFxyXG5cclxuXHRcdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3RcclxuXHRcdFx0bGlzdCA9IFtdLFxyXG5cclxuXHRcdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcclxuXHRcdFx0cXVldWUgPSBbXSxcclxuXHJcblx0XHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxyXG5cdFx0XHRmaXJpbmdJbmRleCA9IC0xLFxyXG5cclxuXHRcdFx0Ly8gRmlyZSBjYWxsYmFja3NcclxuXHRcdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcclxuXHRcdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XHJcblxyXG5cdFx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxyXG5cdFx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcclxuXHRcdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XHJcblx0XHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxyXG5cdFx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcclxuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XHJcblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGZpcmluZyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxyXG5cdFx0XHRcdGlmICggbG9ja2VkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcclxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0XHRsaXN0ID0gW107XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxyXG5cdFx0XHRzZWxmID0ge1xyXG5cclxuXHRcdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XHJcblx0XHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXHJcblx0XHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmlyZSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpbmRleDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xyXG5cdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cclxuXHRcdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cclxuXHRcdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmbiA/XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxyXG5cdFx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxyXG5cdFx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xyXG5cdFx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xyXG5cdFx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcclxuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gIWxpc3Q7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxyXG5cdFx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXHJcblx0XHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xyXG5cdFx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0bG9ja2VkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGlmICggIW1lbW9yeSApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xyXG5cdFx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcclxuXHRcdFx0XHRcdGlmICggIWxvY2tlZCApIHtcclxuXHRcdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XHJcblx0XHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XHJcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRcdGZpcmUoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcclxuXHRcdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXHJcblx0XHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdHJldHVybiBzZWxmO1xyXG5cdH07XHJcblxyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdFx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xyXG5cdFx0XHR2YXIgdHVwbGVzID0gW1xyXG5cclxuXHRcdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxyXG5cdFx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlc29sdmVkXCIgXSxcclxuXHRcdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlamVjdGVkXCIgXSxcclxuXHRcdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICkgXVxyXG5cdFx0XHRcdF0sXHJcblx0XHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcclxuXHRcdFx0XHRwcm9taXNlID0ge1xyXG5cdFx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxyXG5cdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcclxuXHRcdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3RcclxuXHRcdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGRlZmVycmVkID0ge307XHJcblxyXG5cdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcclxuXHJcblx0XHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcclxuXHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xyXG5cdFx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcclxuXHRcdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcclxuXHJcblx0XHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcclxuXHRcdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcclxuXHJcblx0XHRcdFx0Ly8gSGFuZGxlIHN0YXRlXHJcblx0XHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcclxuXHRcdFx0XHRcdGxpc3QuYWRkKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cclxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcclxuXHJcblx0XHRcdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcclxuXHRcdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxyXG5cdFx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XHJcblxyXG5cdFx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XHJcblx0XHRcdGlmICggZnVuYyApIHtcclxuXHRcdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBbGwgZG9uZSFcclxuXHRcdFx0cmV0dXJuIGRlZmVycmVkO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBEZWZlcnJlZCBoZWxwZXJcclxuXHRcdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xyXG5cdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxyXG5cclxuXHRcdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXHJcblx0XHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8XHJcblx0XHRcdFx0KCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxyXG5cclxuXHRcdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLlxyXG5cdFx0XHRcdC8vIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxyXG5cdFx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHJcblx0XHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xyXG5cdFx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xyXG5cdFx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xyXG5cclxuXHRcdFx0Ly8gYWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxyXG5cdFx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXHJcblx0XHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcclxuXHRcdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQtLXJlbWFpbmluZztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGlmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcclxuXHRcdFx0aWYgKCAhcmVtYWluaW5nICkge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XHJcblx0dmFyIHJlYWR5TGlzdDtcclxuXHJcblx0alF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xyXG5cclxuXHRcdC8vIEFkZCB0aGUgY2FsbGJhY2tcclxuXHRcdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdFx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cclxuXHRcdGlzUmVhZHk6IGZhbHNlLFxyXG5cclxuXHRcdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcclxuXHRcdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXHJcblx0XHRyZWFkeVdhaXQ6IDEsXHJcblxyXG5cdFx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XHJcblx0XHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xyXG5cdFx0XHRpZiAoIGhvbGQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcclxuXHRcdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcclxuXHJcblx0XHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcclxuXHRcdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcclxuXHRcdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xyXG5cclxuXHRcdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcclxuXHRcdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXHJcblx0XHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcclxuXHJcblx0XHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcclxuXHRcdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xyXG5cdFx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuXHQvKipcclxuXHQgKiBDbGVhbi11cCBtZXRob2QgZm9yIGRvbSByZWFkeSBldmVudHNcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBkZXRhY2goKSB7XHJcblx0XHRpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkb2N1bWVudC5kZXRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XHJcblx0XHRcdHdpbmRvdy5kZXRhY2hFdmVudCggXCJvbmxvYWRcIiwgY29tcGxldGVkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcclxuXHJcblx0XHQvLyByZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRVxyXG5cdFx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyIHx8XHJcblx0XHRcdHdpbmRvdy5ldmVudC50eXBlID09PSBcImxvYWRcIiB8fFxyXG5cdFx0XHRkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XHJcblxyXG5cdFx0XHRkZXRhY2goKTtcclxuXHRcdFx0alF1ZXJ5LnJlYWR5KCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRqUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRpZiAoICFyZWFkeUxpc3QgKSB7XHJcblxyXG5cdFx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcblx0XHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXHJcblx0XHRcdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTYtMTBcclxuXHRcdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXHJcblx0XHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XHJcblx0XHRcdFx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxyXG5cdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcclxuXHJcblx0XHRcdFx0Ly8gU3RhbmRhcmRzLWJhc2VkIGJyb3dzZXJzIHN1cHBvcnQgRE9NQ29udGVudExvYWRlZFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXHJcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xyXG5cclxuXHRcdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xyXG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XHJcblxyXG5cdFx0XHRcdC8vIElmIElFIGV2ZW50IG1vZGVsIGlzIHVzZWRcclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gRW5zdXJlIGZpcmluZyBiZWZvcmUgb25sb2FkLCBtYXliZSBsYXRlIGJ1dCBzYWZlIGFsc28gZm9yIGlmcmFtZXNcclxuXHRcdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XHJcblxyXG5cdFx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXHJcblx0XHRcdFx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9ubG9hZFwiLCBjb21wbGV0ZWQgKTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgSUUgYW5kIG5vdCBhIGZyYW1lXHJcblx0XHRcdFx0Ly8gY29udGludWFsbHkgY2hlY2sgdG8gc2VlIGlmIHRoZSBkb2N1bWVudCBpcyByZWFkeVxyXG5cdFx0XHRcdHZhciB0b3AgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHRvcCA9IHdpbmRvdy5mcmFtZUVsZW1lbnQgPT0gbnVsbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxyXG5cclxuXHRcdFx0XHRpZiAoIHRvcCAmJiB0b3AuZG9TY3JvbGwgKSB7XHJcblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGRvU2Nyb2xsQ2hlY2soKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIWpRdWVyeS5pc1JlYWR5ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR0cnkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgdHJpY2sgYnkgRGllZ28gUGVyaW5pXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkL1xyXG5cdFx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKCBcImxlZnRcIiApO1xyXG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KCBkb1Njcm9sbENoZWNrLCA1MCApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gZGV0YWNoIGFsbCBkb20gcmVhZHkgZXZlbnRzXHJcblx0XHRcdFx0XHRcdFx0ZGV0YWNoKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGFuZCBleGVjdXRlIGFueSB3YWl0aW5nIGZ1bmN0aW9uc1xyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5yZWFkeSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9ICkoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XHJcblx0fTtcclxuXHJcbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxyXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBJRTw5XHJcbi8vIEl0ZXJhdGlvbiBvdmVyIG9iamVjdCdzIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBpdHMgb3duXHJcblx0dmFyIGk7XHJcblx0Zm9yICggaSBpbiBqUXVlcnkoIHN1cHBvcnQgKSApIHtcclxuXHRcdGJyZWFrO1xyXG5cdH1cclxuXHRzdXBwb3J0Lm93bkZpcnN0ID0gaSA9PT0gXCIwXCI7XHJcblxyXG4vLyBOb3RlOiBtb3N0IHN1cHBvcnQgdGVzdHMgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLlxyXG4vLyBmYWxzZSB1bnRpbCB0aGUgdGVzdCBpcyBydW5cclxuXHRzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSBmYWxzZTtcclxuXHJcbi8vIEV4ZWN1dGUgQVNBUCBpbiBjYXNlIHdlIG5lZWQgdG8gc2V0IGJvZHkuc3R5bGUuem9vbVxyXG5cdGpRdWVyeSggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0Ly8gTWluaWZpZWQ6IHZhciBhLGIsYyxkXHJcblx0XHR2YXIgdmFsLCBkaXYsIGJvZHksIGNvbnRhaW5lcjtcclxuXHJcblx0XHRib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYm9keVwiIClbIDAgXTtcclxuXHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gZm9yIGZyYW1lc2V0IGRvY3MgdGhhdCBkb24ndCBoYXZlIGEgYm9keVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0dXBcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiO1xyXG5cdFx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHQvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2tcclxuXHRcdFx0Ly8gZWxlbWVudHMgd2hlbiBzZXR0aW5nIHRoZWlyIGRpc3BsYXkgdG8gJ2lubGluZScgYW5kIGdpdmluZ1xyXG5cdFx0XHQvLyB0aGVtIGxheW91dFxyXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xyXG5cclxuXHRcdFx0c3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gdmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzO1xyXG5cdFx0XHRpZiAoIHZhbCApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBJRSA2IGZyb20gYWZmZWN0aW5nIGxheW91dCBmb3IgcG9zaXRpb25lZCBlbGVtZW50cyAjMTEwNDhcclxuXHRcdFx0XHQvLyBQcmV2ZW50IElFIGZyb20gc2hyaW5raW5nIHRoZSBib2R5IGluIElFIDcgbW9kZSAjMTI4NjlcclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHRcdFx0Ym9keS5zdHlsZS56b29tID0gMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdH0gKTtcclxuXHJcblxyXG5cdCggZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRkZWxldGUgZGl2LnRlc3Q7XHJcblx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS5cclxuXHRcdGRpdiA9IG51bGw7XHJcblx0fSApKCk7XHJcblx0dmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHZhciBub0RhdGEgPSBqUXVlcnkubm9EYXRhWyAoIGVsZW0ubm9kZU5hbWUgKyBcIiBcIiApLnRvTG93ZXJDYXNlKCkgXSxcclxuXHRcdFx0bm9kZVR5cGUgPSArZWxlbS5ub2RlVHlwZSB8fCAxO1xyXG5cclxuXHRcdC8vIERvIG5vdCBzZXQgZGF0YSBvbiBub24tZWxlbWVudCBET00gbm9kZXMgYmVjYXVzZSBpdCB3aWxsIG5vdCBiZSBjbGVhcmVkICgjODMzNSkuXHJcblx0XHRyZXR1cm4gbm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgP1xyXG5cdFx0XHRmYWxzZSA6XHJcblxyXG5cdFx0XHQvLyBOb2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbFxyXG5cdFx0XHQhbm9EYXRhIHx8IG5vRGF0YSAhPT0gdHJ1ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc2lkXCIgKSA9PT0gbm9EYXRhO1xyXG5cdH07XHJcblxyXG5cclxuXHJcblxyXG5cdHZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXHJcblx0XHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcclxuXHJcblx0ZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcclxuXHJcblx0XHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XHJcblx0XHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcclxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblxyXG5cdFx0XHR2YXIgbmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kMVwiICkudG9Mb3dlckNhc2UoKTtcclxuXHJcblx0XHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XHJcblx0XHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcclxuXHRcdFx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXHJcblx0XHRcdFx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRhdGE7XHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcclxuXHRcdFx0XHRqUXVlcnkuZGF0YSggZWxlbSwga2V5LCBkYXRhICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHR9XHJcblxyXG4vLyBjaGVja3MgYSBjYWNoZSBvYmplY3QgZm9yIGVtcHRpbmVzc1xyXG5cdGZ1bmN0aW9uIGlzRW1wdHlEYXRhT2JqZWN0KCBvYmogKSB7XHJcblx0XHR2YXIgbmFtZTtcclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cclxuXHRcdFx0Ly8gaWYgdGhlIHB1YmxpYyBkYXRhIG9iamVjdCBpcyBlbXB0eSwgdGhlIHByaXZhdGUgaXMgc3RpbGwgZW1wdHlcclxuXHRcdFx0aWYgKCBuYW1lID09PSBcImRhdGFcIiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb2JqWyBuYW1lIF0gKSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIG5hbWUgIT09IFwidG9KU09OXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByZXQsIHRoaXNDYWNoZSxcclxuXHRcdFx0aW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbyxcclxuXHJcblx0XHRcdC8vIFdlIGhhdmUgdG8gaGFuZGxlIERPTSBub2RlcyBhbmQgSlMgb2JqZWN0cyBkaWZmZXJlbnRseSBiZWNhdXNlIElFNi03XHJcblx0XHRcdC8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5XHJcblx0XHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXHJcblxyXG5cdFx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIHRoZSBnbG9iYWwgalF1ZXJ5IGNhY2hlOyBKUyBvYmplY3QgZGF0YSBpc1xyXG5cdFx0XHQvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgb2JqZWN0IHNvIEdDIGNhbiBvY2N1ciBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdGNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSxcclxuXHJcblx0XHRcdC8vIE9ubHkgZGVmaW5pbmcgYW4gSUQgZm9yIEpTIG9iamVjdHMgaWYgaXRzIGNhY2hlIGFscmVhZHkgZXhpc3RzIGFsbG93c1xyXG5cdFx0XHQvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZVxyXG5cdFx0XHRpZCA9IGlzTm9kZSA/IGVsZW1bIGludGVybmFsS2V5IF0gOiBlbGVtWyBpbnRlcm5hbEtleSBdICYmIGludGVybmFsS2V5O1xyXG5cclxuXHRcdC8vIEF2b2lkIGRvaW5nIGFueSBtb3JlIHdvcmsgdGhhbiB3ZSBuZWVkIHRvIHdoZW4gdHJ5aW5nIHRvIGdldCBkYXRhIG9uIGFuXHJcblx0XHQvLyBvYmplY3QgdGhhdCBoYXMgbm8gZGF0YSBhdCBhbGxcclxuXHRcdGlmICggKCAhaWQgfHwgIWNhY2hlWyBpZCBdIHx8ICggIXB2dCAmJiAhY2FjaGVbIGlkIF0uZGF0YSApICkgJiZcclxuXHRcdFx0ZGF0YSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhaWQgKSB7XHJcblxyXG5cdFx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIGEgbmV3IHVuaXF1ZSBJRCBmb3IgZWFjaCBlbGVtZW50IHNpbmNlIHRoZWlyIGRhdGFcclxuXHRcdFx0Ly8gZW5kcyB1cCBpbiB0aGUgZ2xvYmFsIGNhY2hlXHJcblx0XHRcdGlmICggaXNOb2RlICkge1xyXG5cdFx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGRlbGV0ZWRJZHMucG9wKCkgfHwgalF1ZXJ5Lmd1aWQrKztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZCA9IGludGVybmFsS2V5O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhY2FjaGVbIGlkIF0gKSB7XHJcblxyXG5cdFx0XHQvLyBBdm9pZCBleHBvc2luZyBqUXVlcnkgbWV0YWRhdGEgb24gcGxhaW4gSlMgb2JqZWN0cyB3aGVuIHRoZSBvYmplY3RcclxuXHRcdFx0Ly8gaXMgc2VyaWFsaXplZCB1c2luZyBKU09OLnN0cmluZ2lmeVxyXG5cdFx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQW4gb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8galF1ZXJ5LmRhdGEgaW5zdGVhZCBvZiBhIGtleS92YWx1ZSBwYWlyOyB0aGlzIGdldHNcclxuXHRcdC8vIHNoYWxsb3cgY29waWVkIG92ZXIgb250byB0aGUgZXhpc3RpbmcgY2FjaGVcclxuXHRcdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdFx0aWYgKCBwdnQgKSB7XHJcblx0XHRcdFx0Y2FjaGVbIGlkIF0gPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXSwgbmFtZSApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhY2hlWyBpZCBdLmRhdGEgPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXS5kYXRhLCBuYW1lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzQ2FjaGUgPSBjYWNoZVsgaWQgXTtcclxuXHJcblx0XHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcclxuXHRcdC8vIGNhY2hlIGluIG9yZGVyIHRvIGF2b2lkIGtleSBjb2xsaXNpb25zIGJldHdlZW4gaW50ZXJuYWwgZGF0YSBhbmQgdXNlci1kZWZpbmVkXHJcblx0XHQvLyBkYXRhLlxyXG5cdFx0aWYgKCAhcHZ0ICkge1xyXG5cdFx0XHRpZiAoICF0aGlzQ2FjaGUuZGF0YSApIHtcclxuXHRcdFx0XHR0aGlzQ2FjaGUuZGF0YSA9IHt9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXSA9IGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcclxuXHRcdC8vIElmIGEgZGF0YSBwcm9wZXJ0eSB3YXMgc3BlY2lmaWVkXHJcblx0XHRpZiAoIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0Ly8gRmlyc3QgVHJ5IHRvIGZpbmQgYXMtaXMgcHJvcGVydHkgZGF0YVxyXG5cdFx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcclxuXHJcblx0XHRcdC8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGFcclxuXHRcdFx0aWYgKCByZXQgPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0Ly8gVHJ5IHRvIGZpbmQgdGhlIGNhbWVsQ2FzZWQgcHJvcGVydHlcclxuXHRcdFx0XHRyZXQgPSB0aGlzQ2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXQgPSB0aGlzQ2FjaGU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGludGVybmFsUmVtb3ZlRGF0YSggZWxlbSwgbmFtZSwgcHZ0ICkge1xyXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRoaXNDYWNoZSwgaSxcclxuXHRcdFx0aXNOb2RlID0gZWxlbS5ub2RlVHlwZSxcclxuXHJcblx0XHRcdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG5cdFx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXHJcblx0XHRcdGlkID0gaXNOb2RlID8gZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSA6IGpRdWVyeS5leHBhbmRvO1xyXG5cclxuXHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgbm8gY2FjaGUgZW50cnkgZm9yIHRoaXMgb2JqZWN0LCB0aGVyZSBpcyBub1xyXG5cdFx0Ly8gcHVycG9zZSBpbiBjb250aW51aW5nXHJcblx0XHRpZiAoICFjYWNoZVsgaWQgXSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggbmFtZSApIHtcclxuXHJcblx0XHRcdHRoaXNDYWNoZSA9IHB2dCA/IGNhY2hlWyBpZCBdIDogY2FjaGVbIGlkIF0uZGF0YTtcclxuXHJcblx0XHRcdGlmICggdGhpc0NhY2hlICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgbmFtZXMgZm9yIGRhdGEga2V5c1xyXG5cdFx0XHRcdGlmICggIWpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gdHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cclxuXHRcdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSBbIG5hbWUgXTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHNcclxuXHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IG5hbWUuc3BsaXQoIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cclxuXHRcdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXHJcblx0XHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cclxuXHRcdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXHJcblx0XHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XHJcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cclxuXHRcdFx0XHRcdG5hbWUgPSBuYW1lLmNvbmNhdCggalF1ZXJ5Lm1hcCggbmFtZSwgalF1ZXJ5LmNhbWVsQ2FzZSApICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpID0gbmFtZS5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgdGhpc0NhY2hlWyBuYW1lWyBpIF0gXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gY29udGludWVcclxuXHRcdFx0XHQvLyBhbmQgbGV0IHRoZSBjYWNoZSBvYmplY3QgaXRzZWxmIGdldCBkZXN0cm95ZWRcclxuXHRcdFx0XHRpZiAoIHB2dCA/ICFpc0VtcHR5RGF0YU9iamVjdCggdGhpc0NhY2hlICkgOiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHRoaXNDYWNoZSApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG5cdFx0aWYgKCAhcHZ0ICkge1xyXG5cdFx0XHRkZWxldGUgY2FjaGVbIGlkIF0uZGF0YTtcclxuXHJcblx0XHRcdC8vIERvbid0IGRlc3Ryb3kgdGhlIHBhcmVudCBjYWNoZSB1bmxlc3MgdGhlIGludGVybmFsIGRhdGEgb2JqZWN0XHJcblx0XHRcdC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXRcclxuXHRcdFx0aWYgKCAhaXNFbXB0eURhdGFPYmplY3QoIGNhY2hlWyBpZCBdICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRGVzdHJveSB0aGUgY2FjaGVcclxuXHRcdGlmICggaXNOb2RlICkge1xyXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xyXG5cclxuXHRcdFx0Ly8gVXNlIGRlbGV0ZSB3aGVuIHN1cHBvcnRlZCBmb3IgZXhwYW5kb3Mgb3IgYGNhY2hlYCBpcyBub3QgYSB3aW5kb3cgcGVyIGlzV2luZG93ICgjMTAwODApXHJcblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXHJcblx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gfHwgY2FjaGUgIT0gY2FjaGUud2luZG93ICkge1xyXG5cdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXHJcblx0XHRcdGRlbGV0ZSBjYWNoZVsgaWQgXTtcclxuXHJcblx0XHRcdC8vIFdoZW4gYWxsIGVsc2UgZmFpbHMsIHVuZGVmaW5lZFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FjaGVbIGlkIF0gPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCB7XHJcblx0XHRjYWNoZToge30sXHJcblxyXG5cdFx0Ly8gVGhlIGZvbGxvd2luZyBlbGVtZW50cyAoc3BhY2Utc3VmZml4ZWQgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZSBjb2xsaXNpb25zKVxyXG5cdFx0Ly8gdGhyb3cgdW5jYXRjaGFibGUgZXhjZXB0aW9ucyBpZiB5b3UgYXR0ZW1wdCB0byBzZXQgZXhwYW5kbyBwcm9wZXJ0aWVzXHJcblx0XHRub0RhdGE6IHtcclxuXHRcdFx0XCJhcHBsZXQgXCI6IHRydWUsXHJcblx0XHRcdFwiZW1iZWQgXCI6IHRydWUsXHJcblxyXG5cdFx0XHQvLyAuLi5idXQgRmxhc2ggb2JqZWN0cyAod2hpY2ggaGF2ZSB0aGlzIGNsYXNzaWQpICpjYW4qIGhhbmRsZSBleHBhbmRvc1xyXG5cdFx0XHRcIm9iamVjdCBcIjogXCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIlxyXG5cdFx0fSxcclxuXHJcblx0XHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0ZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1bIGpRdWVyeS5leHBhbmRvIF0gXSA6IGVsZW1bIGpRdWVyeS5leHBhbmRvIF07XHJcblx0XHRcdHJldHVybiAhIWVsZW0gJiYgIWlzRW1wdHlEYXRhT2JqZWN0KCBlbGVtICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cclxuXHRcdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRcdHJldHVybiBpbnRlcm5hbFJlbW92ZURhdGEoIGVsZW0sIG5hbWUsIHRydWUgKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRcdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcclxuXHRcdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0XHQvLyBTcGVjaWFsIGV4cGVjdGlvbnMgb2YgLmRhdGEgYmFzaWNhbGx5IHRod2FydCBqUXVlcnkuYWNjZXNzLFxyXG5cdFx0XHQvLyBzbyBpbXBsZW1lbnQgdGhlIHJlbGV2YW50IGJlaGF2aW9yIG91cnNlbHZlc1xyXG5cclxuXHRcdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcInBhcnNlZEF0dHJzXCIgKSApIHtcclxuXHRcdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcclxuXHRcdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRhdGEoIHRoaXMsIGtleSApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID9cclxuXHJcblx0XHRcdFx0Ly8gU2V0cyBvbmUgdmFsdWVcclxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRhdGEoIHRoaXMsIGtleSwgdmFsdWUgKTtcclxuXHRcdFx0XHR9ICkgOlxyXG5cclxuXHRcdFx0XHQvLyBHZXRzIG9uZSB2YWx1ZVxyXG5cdFx0XHRcdC8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdFxyXG5cdFx0XHRcdGVsZW0gPyBkYXRhQXR0ciggZWxlbSwga2V5LCBqUXVlcnkuZGF0YSggZWxlbSwga2V5ICkgKSA6IHVuZGVmaW5lZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuXHJcblx0alF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xyXG5cdFx0XHR2YXIgcXVldWU7XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcclxuXHRcdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXHJcblx0XHRcdFx0aWYgKCBkYXRhICkge1xyXG5cdFx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcclxuXHRcdFx0XHRcdFx0cXVldWUgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxyXG5cdFx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcclxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcclxuXHRcdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRcdHN0YXJ0TGVuZ3RoLS07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggZm4gKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcclxuXHRcdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXHJcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XHJcblx0XHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gY2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxyXG5cdFx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xyXG5cdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBub3QgaW50ZW5kZWQgZm9yIHB1YmxpYyBjb25zdW1wdGlvbiAtIGdlbmVyYXRlcyBhIHF1ZXVlSG9va3Mgb2JqZWN0LFxyXG5cdFx0Ly8gb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmVcclxuXHRcdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHtcclxuXHRcdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgdHlwZSArIFwicXVldWVcIiApO1xyXG5cdFx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBrZXkgKTtcclxuXHRcdFx0XHR9IClcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0XHR2YXIgc2V0dGVyID0gMjtcclxuXHJcblx0XHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0ZGF0YSA9IHR5cGU7XHJcblx0XHRcdFx0dHlwZSA9IFwiZnhcIjtcclxuXHRcdFx0XHRzZXR0ZXItLTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHR0aGlzIDpcclxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcclxuXHRcdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdH0sXHJcblx0XHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSxcclxuXHRcdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcclxuXHRcdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxyXG5cdFx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcclxuXHRcdFx0dmFyIHRtcCxcclxuXHRcdFx0XHRjb3VudCA9IDEsXHJcblx0XHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHRcdFx0XHRlbGVtZW50cyA9IHRoaXMsXHJcblx0XHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdG9iaiA9IHR5cGU7XHJcblx0XHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHR0bXAgPSBqUXVlcnkuX2RhdGEoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xyXG5cdFx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcclxuXHRcdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJlc29sdmUoKTtcclxuXHRcdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblxyXG5cdCggZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcclxuXHJcblx0XHRzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBzaHJpbmtXcmFwQmxvY2tzVmFsICE9IG51bGwgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFdpbGwgYmUgY2hhbmdlZCBsYXRlciBpZiBuZWVkZWQuXHJcblx0XHRcdHNocmlua1dyYXBCbG9ja3NWYWwgPSBmYWxzZTtcclxuXHJcblx0XHRcdC8vIE1pbmlmaWVkOiB2YXIgYixjLGRcclxuXHRcdFx0dmFyIGRpdiwgYm9keSwgY29udGFpbmVyO1xyXG5cclxuXHRcdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XHJcblx0XHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0dXBcclxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdFx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0XHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiO1xyXG5cdFx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTZcclxuXHRcdFx0Ly8gQ2hlY2sgaWYgZWxlbWVudHMgd2l0aCBsYXlvdXQgc2hyaW5rLXdyYXAgdGhlaXIgY2hpbGRyZW5cclxuXHRcdFx0aWYgKCB0eXBlb2YgZGl2LnN0eWxlLnpvb20gIT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXJcclxuXHRcdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcclxuXHRcdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcclxuXHRcdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO1wiICtcclxuXHRcdFx0XHRcdFwicGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xyXG5cdFx0XHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICkuc3R5bGUud2lkdGggPSBcIjVweFwiO1xyXG5cdFx0XHRcdHNocmlua1dyYXBCbG9ja3NWYWwgPSBkaXYub2Zmc2V0V2lkdGggIT09IDM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XHJcblx0XHR9O1xyXG5cclxuXHR9ICkoKTtcclxuXHR2YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XHJcblxyXG5cdHZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcclxuXHJcblxyXG5cdHZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcclxuXHJcblx0dmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xyXG5cclxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XHJcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcclxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XHJcblx0XHRcdCFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cdH07XHJcblxyXG5cclxuXHJcblx0ZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcclxuXHRcdHZhciBhZGp1c3RlZCxcclxuXHRcdFx0c2NhbGUgPSAxLFxyXG5cdFx0XHRtYXhJdGVyYXRpb25zID0gMjAsXHJcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cclxuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHR3ZWVuLmN1cigpOyB9IDpcclxuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcclxuXHRcdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxyXG5cdFx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXHJcblxyXG5cdFx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xyXG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcclxuXHRcdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xyXG5cclxuXHRcdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XHJcblxyXG5cdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXHJcblx0XHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cclxuXHRcdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XHJcblxyXG5cdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxyXG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcclxuXHJcblx0XHRcdGRvIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXHJcblx0XHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcclxuXHRcdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcclxuXHJcblx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxyXG5cdFx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xyXG5cclxuXHRcdFx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxyXG5cdFx0XHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXHJcblx0XHRcdH0gd2hpbGUgKFxyXG5cdFx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXHJcblx0XHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlUGFydHMgKSB7XHJcblx0XHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xyXG5cclxuXHRcdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXHJcblx0XHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cclxuXHRcdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxyXG5cdFx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XHJcblx0XHRcdGlmICggdHdlZW4gKSB7XHJcblx0XHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XHJcblx0XHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xyXG5cdFx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gYWRqdXN0ZWQ7XHJcblx0fVxyXG5cclxuXHJcbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxyXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cclxuXHR2YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xyXG5cdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcclxuXHJcblx0XHQvLyBTZXRzIG1hbnkgdmFsdWVzXHJcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcclxuXHRcdFx0Zm9yICggaSBpbiBrZXkgKSB7XHJcblx0XHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldHMgb25lIHZhbHVlXHJcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdFx0cmF3ID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBidWxrICkge1xyXG5cclxuXHRcdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcclxuXHRcdFx0XHRpZiAoIHJhdyApIHtcclxuXHRcdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0Zm4gPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0YnVsayA9IGZuO1xyXG5cdFx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBmbiApIHtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdGZuKFxyXG5cdFx0XHRcdFx0XHRlbGVtc1sgaSBdLFxyXG5cdFx0XHRcdFx0XHRrZXksXHJcblx0XHRcdFx0XHRcdHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoYWluYWJsZSA/XHJcblx0XHRcdGVsZW1zIDpcclxuXHJcblx0XHRcdC8vIEdldHNcclxuXHRcdFx0YnVsayA/XHJcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XHJcblx0XHRcdFx0bGVuZ3RoID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XHJcblx0fTtcclxuXHR2YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XHJcblxyXG5cdHZhciBydGFnTmFtZSA9ICggLzwoW1xcdzotXSspLyApO1xyXG5cclxuXHR2YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcclxuXHJcblx0dmFyIHJsZWFkaW5nV2hpdGVzcGFjZSA9ICggL15cXHMrLyApO1xyXG5cclxuXHR2YXIgbm9kZU5hbWVzID0gXCJhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98YmRpfGNhbnZhc3xkYXRhfGRhdGFsaXN0fFwiICtcclxuXHRcdFwiZGV0YWlsc3xkaWFsb2d8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfGhlYWRlcnxoZ3JvdXB8bWFpbnxcIiArXHJcblx0XHRcIm1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwaWN0dXJlfHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0ZW1wbGF0ZXx0aW1lfHZpZGVvXCI7XHJcblxyXG5cclxuXHJcblx0ZnVuY3Rpb24gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApIHtcclxuXHRcdHZhciBsaXN0ID0gbm9kZU5hbWVzLnNwbGl0KCBcInxcIiApLFxyXG5cdFx0XHRzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcblx0XHRpZiAoIHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQgKSB7XHJcblx0XHRcdHdoaWxlICggbGlzdC5sZW5ndGggKSB7XHJcblx0XHRcdFx0c2FmZUZyYWcuY3JlYXRlRWxlbWVudChcclxuXHRcdFx0XHRcdGxpc3QucG9wKClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc2FmZUZyYWc7XHJcblx0fVxyXG5cclxuXHJcblx0KCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xyXG5cclxuXHRcdC8vIFNldHVwXHJcblx0XHRkaXYuaW5uZXJIVE1MID0gXCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIjtcclxuXHJcblx0XHQvLyBJRSBzdHJpcHMgbGVhZGluZyB3aGl0ZXNwYWNlIHdoZW4gLmlubmVySFRNTCBpcyB1c2VkXHJcblx0XHRzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlID0gZGl2LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDM7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGJvZHkgZWxlbWVudHMgYXJlbid0IGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWRcclxuXHRcdC8vIElFIHdpbGwgaW5zZXJ0IHRoZW0gaW50byBlbXB0eSB0YWJsZXNcclxuXHRcdHN1cHBvcnQudGJvZHkgPSAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKS5sZW5ndGg7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbGluayBlbGVtZW50cyBnZXQgc2VyaWFsaXplZCBjb3JyZWN0bHkgYnkgaW5uZXJIVE1MXHJcblx0XHQvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFXHJcblx0XHRzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPSAhIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJsaW5rXCIgKS5sZW5ndGg7XHJcblxyXG5cdFx0Ly8gTWFrZXMgc3VyZSBjbG9uaW5nIGFuIGh0bWw1IGVsZW1lbnQgZG9lcyBub3QgY2F1c2UgcHJvYmxlbXNcclxuXHRcdC8vIFdoZXJlIG91dGVySFRNTCBpcyB1bmRlZmluZWQsIHRoaXMgc3RpbGwgd29ya3NcclxuXHRcdHN1cHBvcnQuaHRtbDVDbG9uZSA9XHJcblx0XHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwibmF2XCIgKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09IFwiPDpuYXY+PC86bmF2PlwiO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIGEgZGlzY29ubmVjdGVkIGNoZWNrYm94IHdpbGwgcmV0YWluIGl0cyBjaGVja2VkXHJcblx0XHQvLyB2YWx1ZSBvZiB0cnVlIGFmdGVyIGFwcGVuZGVkIHRvIHRoZSBET00gKElFNi83KVxyXG5cdFx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHRcdGlucHV0LmNoZWNrZWQgPSB0cnVlO1xyXG5cdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XHJcblx0XHRzdXBwb3J0LmFwcGVuZENoZWNrZWQgPSBpbnB1dC5jaGVja2VkO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXHJcblx0XHQvLyBTdXBwb3J0OiBJRTYtSUUxMStcclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcclxuXHRcdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xyXG5cclxuXHRcdC8vICMxMTIxNyAtIFdlYktpdCBsb3NlcyBjaGVjayB3aGVuIHRoZSBuYW1lIGlzIGFmdGVyIHRoZSBjaGVja2VkIGF0dHJpYnV0ZVxyXG5cdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcclxuXHRcdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxyXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xyXG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XHJcblxyXG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA1LjEsIGlPUyA1LjEsIEFuZHJvaWQgNC54LCBBbmRyb2lkIDIuM1xyXG5cdFx0Ly8gb2xkIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xyXG5cdFx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIENsb25lZCBlbGVtZW50cyBrZWVwIGF0dGFjaEV2ZW50IGhhbmRsZXJzLCB3ZSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBvbiBJRTkrXHJcblx0XHRzdXBwb3J0Lm5vQ2xvbmVFdmVudCA9ICEhZGl2LmFkZEV2ZW50TGlzdGVuZXI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gU2luY2UgYXR0cmlidXRlcyBhbmQgcHJvcGVydGllcyBhcmUgdGhlIHNhbWUgaW4gSUUsXHJcblx0XHQvLyBjbGVhbkRhdGEgbXVzdCBzZXQgcHJvcGVydGllcyB0byB1bmRlZmluZWQgcmF0aGVyIHRoYW4gdXNlIHJlbW92ZUF0dHJpYnV0ZVxyXG5cdFx0ZGl2WyBqUXVlcnkuZXhwYW5kbyBdID0gMTtcclxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyA9ICFkaXYuZ2V0QXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApO1xyXG5cdH0gKSgpO1xyXG5cclxuXHJcbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXHJcblx0dmFyIHdyYXBNYXAgPSB7XHJcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcclxuXHRcdGxlZ2VuZDogWyAxLCBcIjxmaWVsZHNldD5cIiwgXCI8L2ZpZWxkc2V0PlwiIF0sXHJcblx0XHRhcmVhOiBbIDEsIFwiPG1hcD5cIiwgXCI8L21hcD5cIiBdLFxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0cGFyYW06IFsgMSwgXCI8b2JqZWN0PlwiLCBcIjwvb2JqZWN0PlwiIF0sXHJcblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXHJcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxyXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxyXG5cclxuXHRcdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXHJcblx0XHQvLyB1bmxlc3Mgd3JhcHBlZCBpbiBhIGRpdiB3aXRoIG5vbi1icmVha2luZyBjaGFyYWN0ZXJzIGluIGZyb250IG9mIGl0LlxyXG5cdFx0X2RlZmF1bHQ6IHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA/IFsgMCwgXCJcIiwgXCJcIiBdIDogWyAxLCBcIlg8ZGl2PlwiLCBcIjwvZGl2PlwiIF1cclxuXHR9O1xyXG5cclxuLy8gU3VwcG9ydDogSUU4LUlFOVxyXG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcclxuXHJcblx0d3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcclxuXHR3cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcclxuXHJcblxyXG5cdGZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xyXG5cdFx0dmFyIGVsZW1zLCBlbGVtLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0Zm91bmQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiA/XHJcblx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHRcdHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgP1xyXG5cdFx0XHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdFx0XHR1bmRlZmluZWQ7XHJcblxyXG5cdFx0aWYgKCAhZm91bmQgKSB7XHJcblx0XHRcdGZvciAoIGZvdW5kID0gW10sIGVsZW1zID0gY29udGV4dC5jaGlsZE5vZGVzIHx8IGNvbnRleHQ7XHJcblx0XHRcdFx0ICAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDtcclxuXHRcdFx0XHQgIGkrK1xyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRpZiAoICF0YWcgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCB0YWcgKSApIHtcclxuXHRcdFx0XHRcdGZvdW5kLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBmb3VuZCwgZ2V0QWxsKCBlbGVtLCB0YWcgKSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XHJcblx0XHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIGZvdW5kICkgOlxyXG5cdFx0XHRmb3VuZDtcclxuXHR9XHJcblxyXG5cclxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXHJcblx0ZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRqUXVlcnkuX2RhdGEoXHJcblx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcImdsb2JhbEV2YWxcIixcclxuXHRcdFx0XHQhcmVmRWxlbWVudHMgfHwgalF1ZXJ5Ll9kYXRhKCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0dmFyIHJodG1sID0gLzx8JiM/XFx3KzsvLFxyXG5cdFx0cnRib2R5ID0gLzx0Ym9keS9pO1xyXG5cclxuXHRmdW5jdGlvbiBmaXhEZWZhdWx0Q2hlY2tlZCggZWxlbSApIHtcclxuXHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XHJcblx0XHRcdGVsZW0uZGVmYXVsdENoZWNrZWQgPSBlbGVtLmNoZWNrZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xyXG5cdFx0dmFyIGosIGVsZW0sIGNvbnRhaW5zLFxyXG5cdFx0XHR0bXAsIHRhZywgdGJvZHksIHdyYXAsXHJcblx0XHRcdGwgPSBlbGVtcy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XHJcblx0XHRcdHNhZmUgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGNvbnRleHQgKSxcclxuXHJcblx0XHRcdG5vZGVzID0gW10sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dG1wID0gdG1wIHx8IHNhZmUuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxyXG5cdFx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcclxuXHJcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcclxuXHJcblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcclxuXHRcdFx0XHRcdGogPSB3cmFwWyAwIF07XHJcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUVcclxuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgJiYgcmxlYWRpbmdXaGl0ZXNwYWNlLnRlc3QoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggcmxlYWRpbmdXaGl0ZXNwYWNlLmV4ZWMoIGVsZW0gKVsgMCBdICkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBSZW1vdmUgSUUncyBhdXRvaW5zZXJ0ZWQgPHRib2R5PiBmcm9tIHRhYmxlIGZyYWdtZW50c1xyXG5cdFx0XHRcdFx0aWYgKCAhc3VwcG9ydC50Ym9keSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN0cmluZyB3YXMgYSA8dGFibGU+LCAqbWF5KiBoYXZlIHNwdXJpb3VzIDx0Ym9keT5cclxuXHRcdFx0XHRcdFx0ZWxlbSA9IHRhZyA9PT0gXCJ0YWJsZVwiICYmICFydGJvZHkudGVzdCggZWxlbSApID9cclxuXHRcdFx0XHRcdFx0XHR0bXAuZmlyc3RDaGlsZCA6XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN0cmluZyB3YXMgYSBiYXJlIDx0aGVhZD4gb3IgPHRmb290PlxyXG5cdFx0XHRcdFx0XHRcdHdyYXBbIDEgXSA9PT0gXCI8dGFibGU+XCIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgP1xyXG5cdFx0XHRcdFx0XHRcdFx0dG1wIDpcclxuXHRcdFx0XHRcdFx0XHRcdDA7XHJcblxyXG5cdFx0XHRcdFx0XHRqID0gZWxlbSAmJiBlbGVtLmNoaWxkTm9kZXMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKCB0Ym9keSA9IGVsZW0uY2hpbGROb2Rlc1sgaiBdICksIFwidGJvZHlcIiApICYmXHJcblx0XHRcdFx0XHRcdFx0XHQhdGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5yZW1vdmVDaGlsZCggdGJvZHkgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEZpeCAjMTIzOTIgZm9yIFdlYktpdCBhbmQgSUUgPiA5XHJcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRcdC8vIEZpeCAjMTIzOTIgZm9yIG9sZElFXHJcblx0XHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xyXG5cdFx0XHRcdFx0XHR0bXAucmVtb3ZlQ2hpbGQoIHRtcC5maXJzdENoaWxkICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHByb3BlciBjbGVhbnVwXHJcblx0XHRcdFx0XHR0bXAgPSBzYWZlLmxhc3RDaGlsZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXggIzExMzU2OiBDbGVhciBlbGVtZW50cyBmcm9tIGZyYWdtZW50XHJcblx0XHRpZiAoIHRtcCApIHtcclxuXHRcdFx0c2FmZS5yZW1vdmVDaGlsZCggdG1wICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcclxuXHRcdC8vIGFib3V0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gaW4gSUUgNi83ICgjODA2MClcclxuXHRcdGlmICggIXN1cHBvcnQuYXBwZW5kQ2hlY2tlZCApIHtcclxuXHRcdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXHJcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xyXG5cdFx0XHRcdGlmICggaWdub3JlZCApIHtcclxuXHRcdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxyXG5cdFx0XHR0bXAgPSBnZXRBbGwoIHNhZmUuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxyXG5cdFx0XHRpZiAoIGNvbnRhaW5zICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXHJcblx0XHRcdGlmICggc2NyaXB0cyApIHtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcclxuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcclxuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dG1wID0gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gc2FmZTtcclxuXHR9XHJcblxyXG5cclxuXHQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGksIGV2ZW50TmFtZSxcclxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDkgKGxhY2sgc3VibWl0L2NoYW5nZSBidWJibGUpLCBGaXJlZm94IChsYWNrIGZvY3VzKGluIHwgb3V0KSBldmVudHMpXHJcblx0XHRmb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCBjaGFuZ2U6IHRydWUsIGZvY3VzaW46IHRydWUgfSApIHtcclxuXHRcdFx0ZXZlbnROYW1lID0gXCJvblwiICsgaTtcclxuXHJcblx0XHRcdGlmICggISggc3VwcG9ydFsgaSBdID0gZXZlbnROYW1lIGluIHdpbmRvdyApICkge1xyXG5cclxuXHRcdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxyXG5cdFx0XHRcdGRpdi5zZXRBdHRyaWJ1dGUoIGV2ZW50TmFtZSwgXCJ0XCIgKTtcclxuXHRcdFx0XHRzdXBwb3J0WyBpIF0gPSBkaXYuYXR0cmlidXRlc1sgZXZlbnROYW1lIF0uZXhwYW5kbyA9PT0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLlxyXG5cdFx0ZGl2ID0gbnVsbDtcclxuXHR9ICkoKTtcclxuXHJcblxyXG5cdHZhciByZm9ybUVsZW1zID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLFxyXG5cdFx0cmtleUV2ZW50ID0gL15rZXkvLFxyXG5cdFx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXHJcblx0XHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcclxuXHRcdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcclxuXHJcblx0ZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xyXG5cdGZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblx0XHR9IGNhdGNoICggZXJyICkgeyB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xyXG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcclxuXHJcblx0XHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcclxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcclxuXHRcdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3RvcjtcclxuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMsIGZuIClcclxuXHRcdFx0Zm4gPSBzZWxlY3RvcjtcclxuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcclxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXHJcblx0XHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcclxuXHRcdFx0XHRmbiA9IGRhdGE7XHJcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcclxuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvbmUgPT09IDEgKSB7XHJcblx0XHRcdG9yaWdGbiA9IGZuO1xyXG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXHJcblx0XHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xyXG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cclxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0LypcclxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxyXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxyXG4gKi9cclxuXHRqUXVlcnkuZXZlbnQgPSB7XHJcblxyXG5cdFx0Z2xvYmFsOiB7fSxcclxuXHJcblx0XHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciB0bXAsIGV2ZW50cywgdCwgaGFuZGxlT2JqSW4sXHJcblx0XHRcdFx0c3BlY2lhbCwgZXZlbnRIYW5kbGUsIGhhbmRsZU9iaixcclxuXHRcdFx0XHRoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcclxuXHJcblx0XHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXHJcblx0XHRcdGlmICggIWVsZW1EYXRhICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXHJcblx0XHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcclxuXHRcdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcclxuXHRcdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcclxuXHRcdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3RcclxuXHRcdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcclxuXHRcdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XHJcblx0XHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxyXG5cdFx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxyXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiZcclxuXHRcdFx0XHRcdCggIWUgfHwgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlICkgP1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGV2ZW50SGFuZGxlLmVsZW0sIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0XHRcdFx0dW5kZWZpbmVkO1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBlbGVtIGFzIGEgcHJvcGVydHkgb2YgdGhlIGhhbmRsZSBmbiB0byBwcmV2ZW50IGEgbWVtb3J5IGxlYWtcclxuXHRcdFx0XHQvLyB3aXRoIElFIG5vbi1uYXRpdmUgZXZlbnRzXHJcblx0XHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2VcclxuXHRcdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHRcdHQgPSB0eXBlcy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcclxuXHRcdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcclxuXHRcdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcclxuXHRcdFx0XHRpZiAoICF0eXBlICkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcclxuXHRcdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXHJcblx0XHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXHJcblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXHJcblx0XHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcclxuXHRcdFx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxyXG5cdFx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxyXG5cdFx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxyXG5cdFx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXHJcblx0XHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcclxuXHJcblx0XHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3RcclxuXHRcdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcclxuXHRcdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcclxuXHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIvYXR0YWNoRXZlbnQgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxyXG5cdFx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQmluZCB0aGUgZ2xvYmFsIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5hdHRhY2hFdmVudCggXCJvblwiICsgdHlwZSwgZXZlbnRIYW5kbGUgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcclxuXHRcdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxyXG5cdFx0XHRcdGlmICggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxyXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxyXG5cdFx0XHRlbGVtID0gbnVsbDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XHJcblx0XHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xyXG5cdFx0XHR2YXIgaiwgaGFuZGxlT2JqLCB0bXAsXHJcblx0XHRcdFx0b3JpZ0NvdW50LCB0LCBldmVudHMsXHJcblx0XHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXHJcblx0XHRcdFx0bmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuaGFzRGF0YSggZWxlbSApICYmIGpRdWVyeS5fZGF0YSggZWxlbSApO1xyXG5cclxuXHRcdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXHJcblx0XHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIHQtLSApIHtcclxuXHRcdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XHJcblx0XHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XHJcblx0XHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcclxuXHJcblx0XHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcclxuXHRcdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcclxuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxyXG5cdFx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxyXG5cdFx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcclxuXHRcdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xyXG5cdFx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXHJcblx0XHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xyXG5cdFx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XHJcblxyXG5cdFx0XHRcdC8vIHJlbW92ZURhdGEgYWxzbyBjaGVja3MgZm9yIGVtcHRpbmVzcyBhbmQgY2xlYXJzIHRoZSBleHBhbmRvIGlmIGVtcHR5XHJcblx0XHRcdFx0Ly8gc28gdXNlIGl0IGluc3RlYWQgb2YgZGVsZXRlXHJcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImV2ZW50c1wiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XHJcblx0XHRcdHZhciBoYW5kbGUsIG9udHlwZSwgY3VyLFxyXG5cdFx0XHRcdGJ1YmJsZVR5cGUsIHNwZWNpYWwsIHRtcCwgaSxcclxuXHRcdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcclxuXHRcdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxyXG5cdFx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xyXG5cclxuXHRcdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xyXG5cdFx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xyXG5cclxuXHRcdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXHJcblx0XHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XHJcblx0XHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcclxuXHRcdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XHJcblxyXG5cdFx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcclxuXHRcdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XHJcblx0XHRcdFx0ZXZlbnQgOlxyXG5cdFx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xyXG5cclxuXHRcdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxyXG5cdFx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcclxuXHRcdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xyXG5cdFx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cclxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XHJcblx0XHRcdFx0bnVsbDtcclxuXHJcblx0XHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxyXG5cdFx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XHJcblx0XHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xyXG5cdFx0XHRcdFsgZXZlbnQgXSA6XHJcblx0XHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XHJcblxyXG5cdFx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxyXG5cdFx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxyXG5cdFx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcclxuXHRcdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xyXG5cdFx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHRcdHRtcCA9IGN1cjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxyXG5cdFx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xyXG5cdFx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxyXG5cdFx0XHRpID0gMDtcclxuXHRcdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cclxuXHRcdFx0XHRcdGJ1YmJsZVR5cGUgOlxyXG5cdFx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxyXG5cdFx0XHRcdGhhbmRsZSA9ICggalF1ZXJ5Ll9kYXRhKCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggY3VyLCBcImhhbmRsZVwiICk7XHJcblxyXG5cdFx0XHRcdGlmICggaGFuZGxlICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXHJcblx0XHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XHJcblx0XHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcclxuXHRcdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZXZlbnQudHlwZSA9IHR5cGU7XHJcblxyXG5cdFx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XHJcblx0XHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdCggIXNwZWNpYWwuX2RlZmF1bHQgfHxcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlXHJcblx0XHRcdFx0XHQpICYmIGFjY2VwdERhdGEoIGVsZW0gKVxyXG5cdFx0XHRcdCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cclxuXHRcdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXHJcblx0XHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXHJcblx0XHRcdFx0XHRpZiAoIG9udHlwZSAmJiBlbGVtWyB0eXBlIF0gJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxyXG5cdFx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBJRTw5IGRpZXMgb24gZm9jdXMvYmx1ciB0byBoaWRkZW4gZWxlbWVudCAoIzE0ODYsIzEyNTE4KVxyXG5cdFx0XHRcdFx0XHRcdC8vIG9ubHkgcmVwcm9kdWNpYmxlIG9uIHdpblhQIElFOCBuYXRpdmUsIG5vdCBJRTkgaW4gSUU4IG1vZGVcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCB0bXAgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBldmVudC5yZXN1bHQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3RcclxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xyXG5cclxuXHRcdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxyXG5cdFx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcclxuXHRcdFx0XHRoYW5kbGVycyA9ICggalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxyXG5cdFx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcclxuXHRcdFx0YXJnc1sgMCBdID0gZXZlbnQ7XHJcblx0XHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcclxuXHRcdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xyXG5cclxuXHRcdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcclxuXHRcdFx0aSA9IDA7XHJcblx0XHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cdFx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XHJcblxyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXHJcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxyXG5cdFx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXHJcblx0XHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xyXG5cdFx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXHJcblx0XHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XHJcblx0XHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHRcdH0sXHJcblxyXG5cdFx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XHJcblx0XHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcclxuXHRcdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcclxuXHRcdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XHJcblx0XHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcclxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcclxuXHRcdFx0Ly9cclxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDw9NDIrXHJcblx0XHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGluIEZGIGJ1dCBkb24ndCBibG9jayBJRSByYWRpbyBldmVudHMgKCMzODYxLCBnaC0yMzQzKVxyXG5cdFx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXHJcblx0XHRcdFx0KCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgfHwgaXNOYU4oIGV2ZW50LmJ1dHRvbiApIHx8IGV2ZW50LmJ1dHRvbiA8IDEgKSApIHtcclxuXHJcblx0XHRcdFx0LyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cclxuXHRcdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xyXG5cdFx0XHRcdFx0LyoganNoaW50IGVxZXFlcTogdHJ1ZSAqL1xyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxyXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXHJcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxyXG5cdFx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcclxuXHRcdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcclxuXHRcdFx0dmFyIGksIHByb3AsIGNvcHksXHJcblx0XHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXHJcblx0XHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxyXG5cdFx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XHJcblxyXG5cdFx0XHRpZiAoICFmaXhIb29rICkge1xyXG5cdFx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxyXG5cdFx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcclxuXHRcdFx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxyXG5cdFx0XHRcdFx0XHRcdHt9O1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcclxuXHJcblx0XHRcdGkgPSBjb3B5Lmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcclxuXHRcdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdC8vIEZpeCB0YXJnZXQgcHJvcGVydHkgKCMxOTI1KVxyXG5cdFx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XHJcblx0XHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi04K1xyXG5cdFx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxyXG5cdFx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcclxuXHRcdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0XHQvLyBGb3IgbW91c2Uva2V5IGV2ZW50cywgbWV0YUtleT09ZmFsc2UgaWYgaXQncyB1bmRlZmluZWQgKCMzMzY4LCAjMTEzMjgpXHJcblx0XHRcdGV2ZW50Lm1ldGFLZXkgPSAhIWV2ZW50Lm1ldGFLZXk7XHJcblxyXG5cdFx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxyXG5cdFx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXHJcblx0XHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXHJcblxyXG5cdFx0Zml4SG9va3M6IHt9LFxyXG5cclxuXHRcdGtleUhvb2tzOiB7XHJcblx0XHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdCggXCIgXCIgKSxcclxuXHRcdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xyXG5cclxuXHRcdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcclxuXHRcdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0bW91c2VIb29rczoge1xyXG5cdFx0XHRwcm9wczogKCBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgXCIgK1xyXG5cdFx0XHRcdFwicGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXHJcblx0XHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHRcdFx0XHR2YXIgYm9keSwgZXZlbnREb2MsIGRvYyxcclxuXHRcdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbixcclxuXHRcdFx0XHRcdGZyb21FbGVtZW50ID0gb3JpZ2luYWwuZnJvbUVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcclxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcclxuXHRcdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHRcdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xyXG5cclxuXHRcdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXHJcblx0XHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXHJcblx0XHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcclxuXHRcdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXHJcblx0XHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXHJcblx0XHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3NhcnlcclxuXHRcdFx0XHRpZiAoICFldmVudC5yZWxhdGVkVGFyZ2V0ICYmIGZyb21FbGVtZW50ICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucmVsYXRlZFRhcmdldCA9IGZyb21FbGVtZW50ID09PSBldmVudC50YXJnZXQgP1xyXG5cdFx0XHRcdFx0XHRvcmlnaW5hbC50b0VsZW1lbnQgOlxyXG5cdFx0XHRcdFx0XHRmcm9tRWxlbWVudDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcclxuXHRcdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxyXG5cdFx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGV2ZW50O1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNwZWNpYWw6IHtcclxuXHRcdFx0bG9hZDoge1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXHJcblx0XHRcdFx0bm9CdWJibGU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0Zm9jdXM6IHtcclxuXHJcblx0XHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XHJcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcclxuXHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHdlIGVycm9yIG9uIGZvY3VzIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwgIzEyNTE4KSxcclxuXHRcdFx0XHRcdFx0XHQvLyBsZXQgLnRyaWdnZXIoKSBydW4gdGhlIGhhbmRsZXJzXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0Ymx1cjoge1xyXG5cdFx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5ibHVyKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXHJcblx0XHRcdH0sXHJcblx0XHRcdGNsaWNrOiB7XHJcblxyXG5cdFx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XHJcblx0XHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgJiYgdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayApIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5jbGljaygpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXHJcblx0XHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRiZWZvcmV1bmxvYWQ6IHtcclxuXHRcdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xyXG5cdFx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxyXG5cdFx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcclxuXHRcdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XHJcblx0XHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcclxuXHRcdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXHJcblx0XHRcdFx0ZXZlbnQsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJldmlvdXNseSwgYG9yaWdpbmFsRXZlbnQ6IHt9YCB3YXMgc2V0IGhlcmUsIHNvIHN0b3BQcm9wYWdhdGlvbiBjYWxsXHJcblx0XHRcdFx0XHQvLyB3b3VsZCBub3QgYmUgdHJpZ2dlcmVkIG9uIGRvbm9yIGV2ZW50LCBzaW5jZSBpbiBvdXIgb3duXHJcblx0XHRcdFx0XHQvLyBqUXVlcnkuZXZlbnQuc3RvcFByb3BhZ2F0aW9uIGZ1bmN0aW9uIHdlIGhhZCBhIGNoZWNrIGZvciBleGlzdGVuY2Ugb2ZcclxuXHRcdFx0XHRcdC8vIG9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uIG1ldGhvZCwgc28sIGNvbnNlcXVlbnRseSBpdCB3b3VsZCBiZSBhIG5vb3AuXHJcblx0XHRcdFx0XHQvL1xyXG5cdFx0XHRcdFx0Ly8gR3VhcmQgZm9yIHNpbXVsYXRlZCBldmVudHMgd2FzIG1vdmVkIHRvIGpRdWVyeS5ldmVudC5zdG9wUHJvcGFnYXRpb24gZnVuY3Rpb25cclxuXHRcdFx0XHRcdC8vIHNpbmNlIGBvcmlnaW5hbEV2ZW50YCBzaG91bGQgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIGV2ZW50IGZvciB0aGVcclxuXHRcdFx0XHRcdC8vIGNvbnN0YW5jeSB3aXRoIG90aGVyIGV2ZW50cyBhbmQgZm9yIG1vcmUgZm9jdXNlZCBsb2dpY1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5yZW1vdmVFdmVudCA9IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIgP1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcclxuXHJcblx0XHRcdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xyXG5cdFx0XHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdFx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XHJcblx0XHRcdHZhciBuYW1lID0gXCJvblwiICsgdHlwZTtcclxuXHJcblx0XHRcdGlmICggZWxlbS5kZXRhY2hFdmVudCApIHtcclxuXHJcblx0XHRcdFx0Ly8gIzg1NDUsICM3MDU0LCBwcmV2ZW50aW5nIG1lbW9yeSBsZWFrcyBmb3IgY3VzdG9tIGV2ZW50cyBpbiBJRTYtOFxyXG5cdFx0XHRcdC8vIGRldGFjaEV2ZW50IG5lZWRlZCBwcm9wZXJ0eSBvbiBlbGVtZW50LCBieSBuYW1lIG9mIHRoYXQgZXZlbnQsXHJcblx0XHRcdFx0Ly8gdG8gcHJvcGVybHkgZXhwb3NlIGl0IHRvIEdDXHJcblx0XHRcdFx0aWYgKCB0eXBlb2YgZWxlbVsgbmFtZSBdID09PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsZW0uZGV0YWNoRXZlbnQoIG5hbWUsIGhhbmRsZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcclxuXHJcblx0XHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRcdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEV2ZW50IG9iamVjdFxyXG5cdFx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XHJcblx0XHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcclxuXHRcdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XHJcblxyXG5cdFx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxyXG5cdFx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cclxuXHRcdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxyXG5cdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8IDksIEFuZHJvaWQgPCA0LjBcclxuXHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdFx0cmV0dXJuVHJ1ZSA6XHJcblx0XHRcdFx0cmV0dXJuRmFsc2U7XHJcblxyXG5cdFx0XHQvLyBFdmVudCB0eXBlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnR5cGUgPSBzcmM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3RcclxuXHRcdGlmICggcHJvcHMgKSB7XHJcblx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcclxuXHRcdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xyXG5cclxuXHRcdC8vIE1hcmsgaXQgYXMgZml4ZWRcclxuXHRcdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xyXG5cdH07XHJcblxyXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcclxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXHJcblx0alF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcclxuXHRcdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXHJcblx0XHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxyXG5cdFx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdFx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cclxuXHRcdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XHJcblx0XHRcdGlmICggIWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2ZW50RGVmYXVsdCBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcclxuXHRcdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xyXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2VcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlLnJldHVyblZhbHVlID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdFx0aWYgKCAhZSB8fCB0aGlzLmlzU2ltdWxhdGVkICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgc3RvcFByb3BhZ2F0aW9uIGV4aXN0cywgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudFxyXG5cdFx0XHRpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkge1xyXG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXHJcblx0XHRcdGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuXHRcdH0sXHJcblx0XHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdFx0aWYgKCBlICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICkge1xyXG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xyXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxyXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxyXG4vL1xyXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XHJcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxyXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XHJcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXHJcblx0alF1ZXJ5LmVhY2goIHtcclxuXHRcdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXHJcblx0XHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXHJcblx0XHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcclxuXHRcdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcclxuXHR9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xyXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXHJcblx0XHRcdGJpbmRUeXBlOiBmaXgsXHJcblxyXG5cdFx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcclxuXHRcdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxyXG5cdFx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xyXG5cclxuXHRcdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxyXG5cdFx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XHJcblx0XHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcclxuXHRcdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSApO1xyXG5cclxuLy8gSUUgc3VibWl0IGRlbGVnYXRpb25cclxuXHRpZiAoICFzdXBwb3J0LnN1Ym1pdCApIHtcclxuXHJcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbC5zdWJtaXQgPSB7XHJcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIExhenktYWRkIGEgc3VibWl0IGhhbmRsZXIgd2hlbiBhIGRlc2NlbmRhbnQgZm9ybSBtYXkgcG90ZW50aWFsbHkgYmUgc3VibWl0dGVkXHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJjbGljay5fc3VibWl0IGtleXByZXNzLl9zdWJtaXRcIiwgZnVuY3Rpb24oIGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gTm9kZSBuYW1lIGNoZWNrIGF2b2lkcyBhIFZNTC1yZWxhdGVkIGNyYXNoIGluIElFICgjOTgwNylcclxuXHRcdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQsXHJcblx0XHRcdFx0XHRcdGZvcm0gPSBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApID9cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XHJcblx0XHRcdFx0XHRcdFx0Ly8gV2UgdXNlIGpRdWVyeS5wcm9wIGluc3RlYWQgb2YgZWxlbS5mb3JtXHJcblx0XHRcdFx0XHRcdFx0Ly8gdG8gYWxsb3cgZml4aW5nIHRoZSBJRTggZGVsZWdhdGVkIHN1Ym1pdCBpc3N1ZSAoZ2gtMjMzMilcclxuXHRcdFx0XHRcdFx0XHQvLyBieSAzcmQgcGFydHkgcG9seWZpbGxzL3dvcmthcm91bmRzLlxyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5wcm9wKCBlbGVtLCBcImZvcm1cIiApIDpcclxuXHRcdFx0XHRcdFx0XHR1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBmb3JtICYmICFqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0XCIgKSApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZm9ybSwgXCJzdWJtaXQuX3N1Ym1pdFwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQuX3N1Ym1pdEJ1YmJsZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBmb3JtLCBcInN1Ym1pdFwiLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cclxuXHRcdFx0XHQvLyByZXR1cm4gdW5kZWZpbmVkIHNpbmNlIHdlIGRvbid0IG5lZWQgYW4gZXZlbnQgbGlzdGVuZXJcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBmb3JtIHdhcyBzdWJtaXR0ZWQgYnkgdGhlIHVzZXIsIGJ1YmJsZSB0aGUgZXZlbnQgdXAgdGhlIHRyZWVcclxuXHRcdFx0XHRpZiAoIGV2ZW50Ll9zdWJtaXRCdWJibGUgKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgZXZlbnQuX3N1Ym1pdEJ1YmJsZTtcclxuXHRcdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJzdWJtaXRcIiwgdGhpcy5wYXJlbnROb2RlLCBldmVudCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlbW92ZSBkZWxlZ2F0ZWQgaGFuZGxlcnM7IGNsZWFuRGF0YSBldmVudHVhbGx5IHJlYXBzIHN1Ym1pdCBoYW5kbGVycyBhdHRhY2hlZCBhYm92ZVxyXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIFwiLl9zdWJtaXRcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcbi8vIElFIGNoYW5nZSBkZWxlZ2F0aW9uIGFuZCBjaGVja2JveC9yYWRpbyBmaXhcclxuXHRpZiAoICFzdXBwb3J0LmNoYW5nZSApIHtcclxuXHJcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbC5jaGFuZ2UgPSB7XHJcblxyXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdGlmICggcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSUUgZG9lc24ndCBmaXJlIGNoYW5nZSBvbiBhIGNoZWNrL3JhZGlvIHVudGlsIGJsdXI7IHRyaWdnZXIgaXQgb24gY2xpY2tcclxuXHRcdFx0XHRcdC8vIGFmdGVyIGEgcHJvcGVydHljaGFuZ2UuIEVhdCB0aGUgYmx1ci1jaGFuZ2UgaW4gc3BlY2lhbC5jaGFuZ2UuaGFuZGxlLlxyXG5cdFx0XHRcdFx0Ly8gVGhpcyBzdGlsbCBmaXJlcyBvbmNoYW5nZSBhIHNlY29uZCB0aW1lIGZvciBjaGVjay9yYWRpbyBhZnRlciBibHVyLlxyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiB8fCB0aGlzLnR5cGUgPT09IFwicmFkaW9cIiApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSBcImNoZWNrZWRcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2p1c3RDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJjbGljay5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHRoaXMuX2p1c3RDaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9qdXN0Q2hhbmdlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgdHJpZ2dlcmVkLCBzaW11bGF0ZWQgY2hhbmdlIGV2ZW50cyAoIzExNTAwKVxyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcywgZXZlbnQgKTtcclxuXHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRGVsZWdhdGVkIGV2ZW50OyBsYXp5LWFkZCBhIGNoYW5nZSBoYW5kbGVyIG9uIGRlc2NlbmRhbnQgaW5wdXRzXHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBlICkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwiY2hhbmdlXCIgKSApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWxlbSwgXCJjaGFuZ2UuX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZVwiLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0XHRcdC8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZVxyXG5cdFx0XHRcdGlmICggdGhpcyAhPT0gZWxlbSB8fCBldmVudC5pc1NpbXVsYXRlZCB8fCBldmVudC5pc1RyaWdnZXIgfHxcclxuXHRcdFx0XHRcdCggZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIgKSApIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG4vLyBTdXBwb3J0OiBGaXJlZm94XHJcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcclxuLy9cclxuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcclxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXHJcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcclxuXHRpZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XHJcblx0XHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xyXG5cclxuXHRcdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcclxuXHRcdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xyXG5cdFx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XHJcblx0XHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICkgLSAxO1xyXG5cclxuXHRcdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGRvYywgZml4ICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCBhdHRhY2hlcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0XHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xyXG5cdFx0fSxcclxuXHRcdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XHJcblx0XHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xyXG5cdFx0fSxcclxuXHRcdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XHJcblx0XHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XHJcblx0XHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xyXG5cclxuXHRcdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XHJcblx0XHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xyXG5cdFx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXHJcblx0XHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcclxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxyXG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XHJcblx0XHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcclxuXHRcdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cdFx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuXHJcblx0dmFyIHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxcclxuXHRcdHJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoIFwiPCg/OlwiICsgbm9kZU5hbWVzICsgXCIpW1xcXFxzLz5dXCIsIFwiaVwiICksXHJcblx0XHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwLTExLCBFZGdlIDEwMjQwK1xyXG5cdFx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cclxuXHRcdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXHJcblx0XHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcclxuXHJcblx0XHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcclxuXHRcdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcclxuXHRcdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXHJcblx0XHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXHJcblx0XHRzYWZlRnJhZ21lbnQgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICksXHJcblx0XHRmcmFnbWVudERpdiA9IHNhZmVGcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG4vLyBTdXBwb3J0OiBJRTw4XHJcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxyXG5cdGZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXHJcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xyXG5cclxuXHRcdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fFxyXG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0Ym9keVwiICkgKSA6XHJcblx0XHRcdGVsZW07XHJcblx0fVxyXG5cclxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxyXG5cdGZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XHJcblx0XHRlbGVtLnR5cGUgPSAoIGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xyXG5cdFx0cmV0dXJuIGVsZW07XHJcblx0fVxyXG5cdGZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XHJcblx0XHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcclxuXHRcdGlmICggbWF0Y2ggKSB7XHJcblx0XHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcclxuXHRcdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5Lmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHR5cGUsIGksIGwsXHJcblx0XHRcdG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLFxyXG5cdFx0XHRjdXJEYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0LCBvbGREYXRhICksXHJcblx0XHRcdGV2ZW50cyA9IG9sZERhdGEuZXZlbnRzO1xyXG5cclxuXHRcdGlmICggZXZlbnRzICkge1xyXG5cdFx0XHRkZWxldGUgY3VyRGF0YS5oYW5kbGU7XHJcblx0XHRcdGN1ckRhdGEuZXZlbnRzID0ge307XHJcblxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtYWtlIHRoZSBjbG9uZWQgcHVibGljIGRhdGEgb2JqZWN0IGEgY29weSBmcm9tIHRoZSBvcmlnaW5hbFxyXG5cdFx0aWYgKCBjdXJEYXRhLmRhdGEgKSB7XHJcblx0XHRcdGN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGZpeENsb25lTm9kZUlzc3Vlcyggc3JjLCBkZXN0ICkge1xyXG5cdFx0dmFyIG5vZGVOYW1lLCBlLCBkYXRhO1xyXG5cclxuXHRcdC8vIFdlIGRvIG5vdCBuZWVkIHRvIGRvIGFueXRoaW5nIGZvciBub24tRWxlbWVudHNcclxuXHRcdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdC8vIElFNi04IGNvcGllcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50IHdoZW4gdXNpbmcgY2xvbmVOb2RlLlxyXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lRXZlbnQgJiYgZGVzdFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcclxuXHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCApO1xyXG5cclxuXHRcdFx0Zm9yICggZSBpbiBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGRlc3QsIGUsIGRhdGEuaGFuZGxlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvIGdldHMgY29waWVkIHRvb1xyXG5cdFx0XHRkZXN0LnJlbW92ZUF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dFxyXG5cdFx0aWYgKCBub2RlTmFtZSA9PT0gXCJzY3JpcHRcIiAmJiBkZXN0LnRleHQgIT09IHNyYy50ZXh0ICkge1xyXG5cdFx0XHRkaXNhYmxlU2NyaXB0KCBkZXN0ICkudGV4dCA9IHNyYy50ZXh0O1xyXG5cdFx0XHRyZXN0b3JlU2NyaXB0KCBkZXN0ICk7XHJcblxyXG5cdFx0XHQvLyBJRTYtMTAgaW1wcm9wZXJseSBjbG9uZXMgY2hpbGRyZW4gb2Ygb2JqZWN0IGVsZW1lbnRzIHVzaW5nIGNsYXNzaWQuXHJcblx0XHRcdC8vIElFMTAgdGhyb3dzIE5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIGlmIHBhcmVudCBpcyBudWxsLCAjMTIxMzIuXHJcblx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0aWYgKCBkZXN0LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZGVzdC5vdXRlckhUTUwgPSBzcmMub3V0ZXJIVE1MO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0XHJcblx0XHRcdC8vIGVsZW1lbnQgaW4gSUU5LCB0aGUgb3V0ZXJIVE1MIHN0cmF0ZWd5IGFib3ZlIGlzIG5vdCBzdWZmaWNpZW50LlxyXG5cdFx0XHQvLyBJZiB0aGUgc3JjIGhhcyBpbm5lckhUTUwgYW5kIHRoZSBkZXN0aW5hdGlvbiBkb2VzIG5vdCxcclxuXHRcdFx0Ly8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0XHJcblx0XHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lICYmICggc3JjLmlubmVySFRNTCAmJiAhalF1ZXJ5LnRyaW0oIGRlc3QuaW5uZXJIVE1MICkgKSApIHtcclxuXHRcdFx0XHRkZXN0LmlubmVySFRNTCA9IHNyYy5pbm5lckhUTUw7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XHJcblxyXG5cdFx0XHQvLyBJRTYtOCBmYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94XHJcblx0XHRcdC8vIG9yIHJhZGlvIGJ1dHRvbi4gV29yc2UsIElFNi03IGZhaWwgdG8gZ2l2ZSB0aGUgY2xvbmVkIGVsZW1lbnRcclxuXHRcdFx0Ly8gYSBjaGVja2VkIGFwcGVhcmFuY2UgaWYgdGhlIGRlZmF1bHRDaGVja2VkIHZhbHVlIGlzbid0IGFsc28gc2V0XHJcblxyXG5cdFx0XHRkZXN0LmRlZmF1bHRDaGVja2VkID0gZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XHJcblxyXG5cdFx0XHQvLyBJRTYtNyBnZXQgY29uZnVzZWQgYW5kIGVuZCB1cCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIGNsb25lZFxyXG5cdFx0XHQvLyBjaGVja2JveC9yYWRpbyBidXR0b24gdG8gYW4gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2YgXCJvblwiXHJcblx0XHRcdGlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkge1xyXG5cdFx0XHRcdGRlc3QudmFsdWUgPSBzcmMudmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElFNi04IGZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkXHJcblx0XHRcdC8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXHJcblx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiApIHtcclxuXHRcdFx0ZGVzdC5kZWZhdWx0U2VsZWN0ZWQgPSBkZXN0LnNlbGVjdGVkID0gc3JjLmRlZmF1bHRTZWxlY3RlZDtcclxuXHJcblx0XHRcdC8vIElFNi04IGZhaWxzIHRvIHNldCB0aGUgZGVmYXVsdFZhbHVlIHRvIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW5cclxuXHRcdFx0Ly8gY2xvbmluZyBvdGhlciB0eXBlcyBvZiBpbnB1dCBmaWVsZHNcclxuXHRcdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcclxuXHRcdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XHJcblxyXG5cdFx0dmFyIGZpcnN0LCBub2RlLCBoYXNTY3JpcHRzLFxyXG5cdFx0XHRzY3JpcHRzLCBkb2MsIGZyYWdtZW50LFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxyXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxyXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcclxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxyXG5cdFx0aWYgKCBpc0Z1bmN0aW9uIHx8XHJcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XHJcblx0XHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcclxuXHRcdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XHJcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBsICkge1xyXG5cdFx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xyXG5cdFx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XHJcblxyXG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xyXG5cdFx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XHJcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xyXG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxyXG5cdFx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxyXG5cdFx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xyXG5cclxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XHJcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cclxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcclxuXHRcdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcclxuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcclxuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXHJcblx0XHRcdFx0XHRcdFx0IWpRdWVyeS5fZGF0YSggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGUudGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJIVE1MIHx8IFwiXCIgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKVxyXG5cdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5XHJcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdCA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29sbGVjdGlvbjtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xyXG5cdFx0dmFyIG5vZGUsXHJcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoIG5vZGUgPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cclxuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XHJcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBlbGVtO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHR2YXIgZGVzdEVsZW1lbnRzLCBub2RlLCBjbG9uZSwgaSwgc3JjRWxlbWVudHMsXHJcblx0XHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lIHx8IGpRdWVyeS5pc1hNTERvYyggZWxlbSApIHx8XHJcblx0XHRcdFx0IXJub3NoaW1jYWNoZS50ZXN0KCBcIjxcIiArIGVsZW0ubm9kZU5hbWUgKyBcIj5cIiApICkge1xyXG5cclxuXHRcdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICk7XHJcblxyXG5cdFx0XHRcdC8vIElFPD04IGRvZXMgbm90IHByb3Blcmx5IGNsb25lIGRldGFjaGVkLCB1bmtub3duIGVsZW1lbnQgbm9kZXNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmcmFnbWVudERpdi5pbm5lckhUTUwgPSBlbGVtLm91dGVySFRNTDtcclxuXHRcdFx0XHRmcmFnbWVudERpdi5yZW1vdmVDaGlsZCggY2xvbmUgPSBmcmFnbWVudERpdi5maXJzdENoaWxkICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggKCAhc3VwcG9ydC5ub0Nsb25lRXZlbnQgfHwgIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgKSAmJlxyXG5cdFx0XHRcdCggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcclxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XHJcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0Ly8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3Vlc1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgKytpICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4N1xyXG5cdFx0XHRcdFx0aWYgKCBkZXN0RWxlbWVudHNbIGkgXSApIHtcclxuXHRcdFx0XHRcdFx0Zml4Q2xvbmVOb2RlSXNzdWVzKCBub2RlLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxyXG5cdFx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XHJcblx0XHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggbm9kZSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcclxuXHRcdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gc3JjRWxlbWVudHMgPSBub2RlID0gbnVsbDtcclxuXHJcblx0XHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxyXG5cdFx0XHRyZXR1cm4gY2xvbmU7XHJcblx0XHR9LFxyXG5cclxuXHRcdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBmb3JjZUFjY2VwdERhdGEgKSB7XHJcblx0XHRcdHZhciBlbGVtLCB0eXBlLCBpZCwgZGF0YSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxyXG5cdFx0XHRcdGNhY2hlID0galF1ZXJ5LmNhY2hlLFxyXG5cdFx0XHRcdGF0dHJpYnV0ZXMgPSBzdXBwb3J0LmF0dHJpYnV0ZXMsXHJcblx0XHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xyXG5cclxuXHRcdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggZm9yY2VBY2NlcHREYXRhIHx8IGFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0XHRpZCA9IGVsZW1bIGludGVybmFsS2V5IF07XHJcblx0XHRcdFx0XHRkYXRhID0gaWQgJiYgY2FjaGVbIGlkIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBkYXRhICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGNhY2hlIG9ubHkgaWYgaXQgd2FzIG5vdCBhbHJlYWR5IHJlbW92ZWQgYnkgalF1ZXJ5LmV2ZW50LnJlbW92ZVxyXG5cdFx0XHRcdFx0XHRpZiAoIGNhY2hlWyBpZCBdICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgY2FjaGVbIGlkIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBhbGxvdyB1cyB0byBkZWxldGUgZXhwYW5kbyBwcm9wZXJ0aWVzIGZyb20gbm9kZXNcclxuXHRcdFx0XHRcdFx0XHQvLyBJRSBjcmVhdGVzIGV4cGFuZG8gYXR0cmlidXRlcyBhbG9uZyB3aXRoIHRoZSBwcm9wZXJ0eVxyXG5cdFx0XHRcdFx0XHRcdC8vIElFIGRvZXMgbm90IGhhdmUgYSByZW1vdmVBdHRyaWJ1dGUgZnVuY3Rpb24gb24gRG9jdW1lbnQgbm9kZXNcclxuXHRcdFx0XHRcdFx0XHRpZiAoICFhdHRyaWJ1dGVzICYmIHR5cGVvZiBlbGVtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBpbnRlcm5hbEtleSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGVsZW1bIGludGVybmFsS2V5IF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRkZWxldGVkSWRzLnB1c2goIGlkICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0XHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxyXG5cdFx0ZG9tTWFuaXA6IGRvbU1hbmlwLFxyXG5cclxuXHRcdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XHJcblx0XHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKFxyXG5cdFx0XHRcdFx0XHQoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApLmNyZWF0ZVRleHROb2RlKCB2YWx1ZSApXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGJlZm9yZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xyXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5yZW1vdmVDaGlsZCggZWxlbS5maXJzdENoaWxkICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGEgc2VsZWN0LCBlbnN1cmUgdGhhdCBpdCBkaXNwbGF5cyBlbXB0eSAoIzEyMzM2KVxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRpZiAoIGVsZW0ub3B0aW9ucyAmJiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwic2VsZWN0XCIgKSApIHtcclxuXHRcdFx0XHRcdGVsZW0ub3B0aW9ucy5sZW5ndGggPSAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9LFxyXG5cclxuXHRcdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XHJcblx0XHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcclxuXHRcdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSA/XHJcblx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MLnJlcGxhY2UoIHJpbmxpbmVqUXVlcnksIFwiXCIgKSA6XHJcblx0XHRcdFx0XHRcdHVuZGVmaW5lZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcclxuXHRcdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcclxuXHRcdFx0XHRcdCggc3VwcG9ydC5odG1sU2VyaWFsaXplIHx8ICFybm9zaGltY2FjaGUudGVzdCggdmFsdWUgKSAgKSAmJlxyXG5cdFx0XHRcdFx0KCBzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmXHJcblx0XHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcclxuXHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XHJcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZWxlbSA9IDA7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpZ25vcmVkID0gW107XHJcblxyXG5cdFx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcclxuXHRcdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xyXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cclxuXHRcdFx0fSwgaWdub3JlZCApO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LmVhY2goIHtcclxuXHRcdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxyXG5cdFx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcclxuXHRcdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcclxuXHRcdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXHJcblx0XHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcclxuXHR9LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XHJcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0dmFyIGVsZW1zLFxyXG5cdFx0XHRcdGkgPSAwLFxyXG5cdFx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcclxuXHRcdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xyXG5cdFx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XHJcblx0XHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xyXG5cclxuXHRcdFx0XHQvLyBNb2Rlcm4gYnJvd3NlcnMgY2FuIGFwcGx5IGpRdWVyeSBjb2xsZWN0aW9ucyBhcyBhcnJheXMsIGJ1dCBvbGRJRSBuZWVkcyBhIC5nZXQoKVxyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcclxuXHRcdH07XHJcblx0fSApO1xyXG5cclxuXHJcblx0dmFyIGlmcmFtZSxcclxuXHRcdGVsZW1kaXNwbGF5ID0ge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveFxyXG5cdFx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxyXG5cdFx0XHRIVE1MOiBcImJsb2NrXCIsXHJcblx0XHRcdEJPRFk6IFwiYmxvY2tcIlxyXG5cdFx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XHJcblx0ICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcclxuXHQgKi9cclxuXHJcbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XHJcblx0ZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xyXG5cdFx0dmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcclxuXHJcblx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXHJcblx0XHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxyXG5cdFx0ZWxlbS5kZXRhY2goKTtcclxuXHJcblx0XHRyZXR1cm4gZGlzcGxheTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xyXG5cdFx0dmFyIGRvYyA9IGRvY3VtZW50LFxyXG5cdFx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XHJcblxyXG5cdFx0aWYgKCAhZGlzcGxheSApIHtcclxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHJcblx0XHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxyXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcclxuXHRcdFx0XHRpZnJhbWUgPSAoIGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkgKVxyXG5cdFx0XHRcdFx0LmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XHJcblxyXG5cdFx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxyXG5cdFx0XHRcdGRvYyA9ICggaWZyYW1lWyAwIF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUVcclxuXHRcdFx0XHRkb2Mud3JpdGUoKTtcclxuXHRcdFx0XHRkb2MuY2xvc2UoKTtcclxuXHJcblx0XHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHRcdFx0XHRpZnJhbWUuZGV0YWNoKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxyXG5cdFx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRpc3BsYXk7XHJcblx0fVxyXG5cdHZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcclxuXHJcblx0dmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xyXG5cclxuXHR2YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcclxuXHRcdHZhciByZXQsIG5hbWUsXHJcblx0XHRcdG9sZCA9IHt9O1xyXG5cclxuXHRcdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xyXG5cdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XHJcblxyXG5cdFx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXHJcblx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fTtcclxuXHJcblxyXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cclxuXHJcblx0KCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcclxuXHRcdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsLCByZWxpYWJsZU1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXHJcblx0XHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcclxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cclxuXHRcdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXHJcblx0XHRpZiAoICFkaXYuc3R5bGUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCI7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgZWxlbWVudCBvcGFjaXR5IGV4aXN0cyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXIpXHJcblx0XHRzdXBwb3J0Lm9wYWNpdHkgPSBkaXYuc3R5bGUub3BhY2l0eSA9PT0gXCIwLjVcIjtcclxuXHJcblx0XHQvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlXHJcblx0XHQvLyAoSUUgdXNlcyBzdHlsZUZsb2F0IGluc3RlYWQgb2YgY3NzRmxvYXQpXHJcblx0XHRzdXBwb3J0LmNzc0Zsb2F0ID0gISFkaXYuc3R5bGUuY3NzRmxvYXQ7XHJcblxyXG5cdFx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xyXG5cdFx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcclxuXHRcdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XHJcblxyXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xyXG5cdFx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xyXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XHJcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRcdHN1cHBvcnQuYm94U2l6aW5nID0gZGl2LnN0eWxlLmJveFNpemluZyA9PT0gXCJcIiB8fCBkaXYuc3R5bGUuTW96Qm94U2l6aW5nID09PSBcIlwiIHx8XHJcblx0XHRcdGRpdi5zdHlsZS5XZWJraXRCb3hTaXppbmcgPT09IFwiXCI7XHJcblxyXG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xyXG5cdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gV2UncmUgY2hlY2tpbmcgZm9yIHBpeGVsUG9zaXRpb25WYWwgaGVyZSBpbnN0ZWFkIG9mIGJveFNpemluZ1JlbGlhYmxlVmFsXHJcblx0XHRcdFx0Ly8gc2luY2UgdGhhdCBjb21wcmVzc2VzIGJldHRlciBhbmQgdGhleSdyZSBjb21wdXRlZCB0b2dldGhlciBhbnl3YXkuXHJcblx0XHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zXHJcblx0XHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpblJpZ2h0VmFsO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IG9ubHksIEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gMzdcclxuXHRcdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHJcblx0XHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcclxuXHRcdFx0dmFyIGNvbnRlbnRzLCBkaXZTdHlsZSxcclxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBTZXR1cFxyXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O1wiICtcclxuXHRcdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xyXG5cdFx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXHJcblx0XHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdC8vIEFzc3VtZSByZWFzb25hYmxlIHZhbHVlcyBpbiB0aGUgYWJzZW5jZSBvZiBnZXRDb21wdXRlZFN0eWxlXHJcblx0XHRcdHBpeGVsUG9zaXRpb25WYWwgPSBib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGZhbHNlO1xyXG5cdFx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gcmVsaWFibGVNYXJnaW5SaWdodFZhbCA9IHRydWU7XHJcblxyXG5cdFx0XHQvLyBDaGVjayBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzbyB0aGF0IHRoaXMgY29kZSBpcyBub3QgcnVuIGluIElFPDkuXHJcblx0XHRcdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XHJcblx0XHRcdFx0ZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XHJcblx0XHRcdFx0cGl4ZWxQb3NpdGlvblZhbCA9ICggZGl2U3R5bGUgfHwge30gKS50b3AgIT09IFwiMSVcIjtcclxuXHRcdFx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSAoIGRpdlN0eWxlIHx8IHt9ICkubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcclxuXHRcdFx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9ICggZGl2U3R5bGUgfHwgeyB3aWR0aDogXCI0cHhcIiB9ICkud2lkdGggPT09IFwiNHB4XCI7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcclxuXHRcdFx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3RcclxuXHRcdFx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xyXG5cdFx0XHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSAoIGRpdlN0eWxlIHx8IHsgbWFyZ2luUmlnaHQ6IFwiNHB4XCIgfSApLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XHJcblx0XHRcdFx0Ly8gRGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxyXG5cdFx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lciAoIzMzMzMpXHJcblx0XHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XHJcblx0XHRcdFx0Y29udGVudHMgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cclxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXHJcblx0XHRcdFx0Y29udGVudHMuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xyXG5cdFx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XHJcblx0XHRcdFx0Y29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9IFwiMFwiO1xyXG5cdFx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XHJcblxyXG5cdFx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPVxyXG5cdFx0XHRcdFx0IXBhcnNlRmxvYXQoICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGNvbnRlbnRzICkgfHwge30gKS5tYXJnaW5SaWdodCApO1xyXG5cclxuXHRcdFx0XHRkaXYucmVtb3ZlQ2hpbGQoIGNvbnRlbnRzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFNi04XHJcblx0XHRcdC8vIEZpcnN0IGNoZWNrIHRoYXQgZ2V0Q2xpZW50UmVjdHMgd29ya3MgYXMgZXhwZWN0ZWRcclxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXRcclxuXHRcdFx0Ly8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhXHJcblx0XHRcdC8vIHRhYmxlIHJvdzsgaWYgc28sIG9mZnNldFdpZHRoL0hlaWdodCBhcmUgbm90IHJlbGlhYmxlIGZvciB1c2Ugd2hlblxyXG5cdFx0XHQvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZ1xyXG5cdFx0XHQvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpc1xyXG5cdFx0XHQvLyBoaWRkZW47IGRvbiBzYWZldHkgZ29nZ2xlcyBhbmQgc2VlIGJ1ZyAjNDUxMiBmb3IgbW9yZSBpbmZvcm1hdGlvbikuXHJcblx0XHRcdGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblx0XHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGRpdi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMDtcclxuXHRcdFx0aWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7XHJcblx0XHRcdFx0ZGl2LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xyXG5cdFx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIjtcclxuXHRcdFx0XHRkaXYuY2hpbGROb2Rlc1sgMCBdLnN0eWxlLmJvcmRlckNvbGxhcHNlID0gXCJzZXBhcmF0ZVwiO1xyXG5cdFx0XHRcdGNvbnRlbnRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRkXCIgKTtcclxuXHRcdFx0XHRjb250ZW50c1sgMCBdLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MDtkaXNwbGF5Om5vbmVcIjtcclxuXHRcdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBjb250ZW50c1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMDtcclxuXHRcdFx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCApIHtcclxuXHRcdFx0XHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcblx0XHRcdFx0XHRjb250ZW50c1sgMSBdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHRcdFx0XHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGVhcmRvd25cclxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcclxuXHRcdH1cclxuXHJcblx0fSApKCk7XHJcblxyXG5cclxuXHR2YXIgZ2V0U3R5bGVzLCBjdXJDU1MsXHJcblx0XHRycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XHJcblxyXG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XHJcblx0XHRnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXHJcblx0XHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xyXG5cdFx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcclxuXHRcdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcblxyXG5cdFx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcclxuXHRcdFx0XHR2aWV3ID0gd2luZG93O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGN1ckNTUyA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcclxuXHRcdFx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcclxuXHRcdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xyXG5cclxuXHRcdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XHJcblx0XHRcdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMi4xeCBvbmx5XHJcblx0XHRcdC8vIEZhbGwgYmFjayB0byBzdHlsZSBldmVuIHdpdGhvdXQgY29tcHV0ZWRcclxuXHRcdFx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRcdFx0aWYgKCAoIHJldCA9PT0gXCJcIiB8fCByZXQgPT09IHVuZGVmaW5lZCApICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xyXG5cdFx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXHJcblx0XHRcdFx0Ly8gQ2hyb21lIDwgMTcgYW5kIFNhZmFyaSA1LjAgdXNlcyBcImNvbXB1dGVkIHZhbHVlXCJcclxuXHRcdFx0XHQvLyBpbnN0ZWFkIG9mIFwidXNlZCB2YWx1ZVwiIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0XHQvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsXHJcblx0XHRcdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xyXG5cdFx0XHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcclxuXHRcdFx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXHJcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcclxuXHRcdFx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XHJcblx0XHRcdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xyXG5cdFx0XHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XHJcblx0XHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XHJcblx0XHRcdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXHJcblx0XHRcdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcclxuXHRcdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxyXG5cdFx0XHRyZXR1cm4gcmV0ID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHJldCA6XHJcblx0XHRcdFx0cmV0ICsgXCJcIjtcclxuXHRcdH07XHJcblx0fSBlbHNlIGlmICggZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHtcclxuXHRcdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5jdXJyZW50U3R5bGU7XHJcblx0XHR9O1xyXG5cclxuXHRcdGN1ckNTUyA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcclxuXHRcdFx0dmFyIGxlZnQsIHJzLCByc0xlZnQsIHJldCxcclxuXHRcdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZVxyXG5cdFx0XHQvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG9cclxuXHRcdFx0aWYgKCByZXQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVsgbmFtZSBdICkge1xyXG5cdFx0XHRcdHJldCA9IHN0eWxlWyBuYW1lIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcclxuXHRcdFx0Ly8gaHR0cDovL2VyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA3LzA3LzI3LzE4LjU0LjE1LyNjb21tZW50LTEwMjI5MVxyXG5cclxuXHRcdFx0Ly8gSWYgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIHJlZ3VsYXIgcGl4ZWwgbnVtYmVyXHJcblx0XHRcdC8vIGJ1dCBhIG51bWJlciB0aGF0IGhhcyBhIHdlaXJkIGVuZGluZywgd2UgbmVlZCB0byBjb252ZXJ0IGl0IHRvIHBpeGVsc1xyXG5cdFx0XHQvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmVcclxuXHRcdFx0Ly8gcHJvcG9ydGlvbmFsIHRvIHRoZSBwYXJlbnQgZWxlbWVudCBpbnN0ZWFkXHJcblx0XHRcdC8vIGFuZCB3ZSBjYW4ndCBtZWFzdXJlIHRoZSBwYXJlbnQgaW5zdGVhZCBiZWNhdXNlIGl0XHJcblx0XHRcdC8vIG1pZ2h0IHRyaWdnZXIgYSBcInN0YWNraW5nIGRvbGxzXCIgcHJvYmxlbVxyXG5cdFx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiAhcnBvc2l0aW9uLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG5cdFx0XHRcdGxlZnQgPSBzdHlsZS5sZWZ0O1xyXG5cdFx0XHRcdHJzID0gZWxlbS5ydW50aW1lU3R5bGU7XHJcblx0XHRcdFx0cnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcclxuXHJcblx0XHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG5cdFx0XHRcdGlmICggcnNMZWZ0ICkge1xyXG5cdFx0XHRcdFx0cnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHN0eWxlLmxlZnQgPSBuYW1lID09PSBcImZvbnRTaXplXCIgPyBcIjFlbVwiIDogcmV0O1xyXG5cdFx0XHRcdHJldCA9IHN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcclxuXHJcblx0XHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG5cdFx0XHRcdHN0eWxlLmxlZnQgPSBsZWZ0O1xyXG5cdFx0XHRcdGlmICggcnNMZWZ0ICkge1xyXG5cdFx0XHRcdFx0cnMubGVmdCA9IHJzTGVmdDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXHJcblx0XHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0cmV0IDpcclxuXHRcdFx0XHRyZXQgKyBcIlwiIHx8IFwiYXV0b1wiO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cclxuXHJcblxyXG5cdGZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcclxuXHJcblx0XHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXHJcblx0XHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXHJcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cclxuXHRcdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cclxuXHR2YXJcclxuXHJcblx0XHRyYWxwaGEgPSAvYWxwaGFcXChbXildKlxcKS9pLFxyXG5cdFx0cm9wYWNpdHkgPSAvb3BhY2l0eVxccyo9XFxzKihbXildKikvaSxcclxuXHJcblx0XHQvLyBzd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdFxyXG5cdFx0Ly8gXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcclxuXHRcdC8vIHNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczpcclxuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcclxuXHRcdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcclxuXHRcdHJudW1zcGxpdCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoLiopJFwiLCBcImlcIiApLFxyXG5cclxuXHRcdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxyXG5cdFx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcclxuXHRcdFx0Zm9udFdlaWdodDogXCI0MDBcIlxyXG5cdFx0fSxcclxuXHJcblx0XHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdLFxyXG5cdFx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcclxuXHJcblxyXG4vLyByZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XHJcblx0ZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XHJcblxyXG5cdFx0Ly8gc2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcclxuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXHJcblx0XHR2YXIgY2FwTmFtZSA9IG5hbWUuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcclxuXHRcdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcclxuXHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xyXG5cdFx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcclxuXHRcdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xyXG5cdFx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcclxuXHRcdFx0dmFsdWVzID0gW10sXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcclxuXHRcdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xyXG5cdFx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xyXG5cdFx0XHRpZiAoIHNob3cgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcclxuXHRcdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XHJcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcclxuXHRcdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xyXG5cdFx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcclxuXHRcdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID1cclxuXHRcdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRpc3BsYXkgJiYgZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YShcclxuXHRcdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXHJcblx0XHRcdFx0XHRcdGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXHJcblx0XHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XHJcblx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XHJcblx0XHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcclxuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBlbGVtZW50cztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XHJcblx0XHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xyXG5cdFx0cmV0dXJuIG1hdGNoZXMgP1xyXG5cclxuXHRcdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3NcclxuXHRcdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XHJcblx0XHRcdHZhbHVlO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xyXG5cdFx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cclxuXHJcblx0XHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxyXG5cdFx0XHQ0IDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcclxuXHRcdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXHJcblxyXG5cdFx0XHR2YWwgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcclxuXHJcblx0XHRcdC8vIGJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XHJcblxyXG5cdFx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxyXG5cdFx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xyXG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcclxuXHRcdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xyXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHJcblx0XHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxyXG5cdFx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xyXG5cdFx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xyXG5cclxuXHRcdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXHJcblx0XHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXHJcblx0XHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcclxuXHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXHJcblx0XHRcdGlzQm9yZGVyQm94ID0gc3VwcG9ydC5ib3hTaXppbmcgJiZcclxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xyXG5cclxuXHRcdC8vIHNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxyXG5cdFx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XHJcblx0XHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2NjhcclxuXHRcdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XHJcblxyXG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3NhcnlcclxuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cclxuXHRcdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHRcdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcclxuXHRcdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHRcdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxyXG5cdFx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXHJcblx0XHRyZXR1cm4gKCB2YWwgK1xyXG5cdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdG5hbWUsXHJcblx0XHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXHJcblx0XHRcdFx0c3R5bGVzXHJcblx0XHRcdClcclxuXHRcdCkgKyBcInB4XCI7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdFx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XHJcblx0XHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcclxuXHRcdGNzc0hvb2tzOiB7XHJcblx0XHRcdG9wYWNpdHk6IHtcclxuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxyXG5cdFx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXHJcblx0XHRjc3NOdW1iZXI6IHtcclxuXHRcdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxyXG5cdFx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXHJcblx0XHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxyXG5cdFx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcclxuXHRcdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXHJcblx0XHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxyXG5cdFx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFx0XCJvcmRlclwiOiB0cnVlLFxyXG5cdFx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcclxuXHRcdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcclxuXHRcdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcclxuXHRcdFx0XCJ6b29tXCI6IHRydWVcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxyXG5cdFx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxyXG5cdFx0Y3NzUHJvcHM6IHtcclxuXHJcblx0XHRcdC8vIG5vcm1hbGl6ZSBmbG9hdCBjc3MgcHJvcGVydHlcclxuXHRcdFx0XCJmbG9hdFwiOiBzdXBwb3J0LmNzc0Zsb2F0ID8gXCJjc3NGbG9hdFwiIDogXCJzdHlsZUZsb2F0XCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcclxuXHRcdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xyXG5cclxuXHRcdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxyXG5cdFx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxyXG5cdFx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0XHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcclxuXHRcdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XHJcblxyXG5cdFx0XHQvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uXHJcblx0XHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcclxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcclxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcclxuXHRcdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0LiBTZWU6ICM3MTE2XHJcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxyXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGaXhlcyAjODkwOCwgaXQgY2FuIGJlIGRvbmUgbW9yZSBjb3JyZWN0bHkgYnkgc3BlY2lmaW5nIHNldHRlcnMgaW4gY3NzSG9va3MsXHJcblx0XHRcdFx0Ly8gYnV0IGl0IHdvdWxkIG1lYW4gdG8gZGVmaW5lIGVpZ2h0XHJcblx0XHRcdFx0Ly8gKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xyXG5cdFx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxyXG5cdFx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxyXG5cdFx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHRcdFx0XHQvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSlcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XHJcblx0XHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcclxuXHRcdFx0dmFyIG51bSwgdmFsLCBob29rcyxcclxuXHRcdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XHJcblx0XHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xyXG5cclxuXHRcdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxyXG5cdFx0XHQvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcclxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL2NvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxyXG5cdFx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcclxuXHRcdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuLCBjb252ZXJ0aW5nIHRvIG51bWJlciBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xyXG5cdFx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xyXG5cdFx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xyXG5cdFx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcclxuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIGNlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxyXG5cdFx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcclxuXHRcdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXHJcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cclxuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xyXG5cdFx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XHJcblx0XHRcdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0XHRcdFx0ZWxlbSxcclxuXHRcdFx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHRcdFx0ZXh0cmEsXHJcblx0XHRcdFx0XHRcdHN1cHBvcnQuYm94U2l6aW5nICYmXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXHJcblx0XHRcdFx0XHRcdHN0eWxlc1xyXG5cdFx0XHRcdFx0KSA6IDBcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0gKTtcclxuXHJcblx0aWYgKCAhc3VwcG9ydC5vcGFjaXR5ICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzLm9wYWNpdHkgPSB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdFx0XHQvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHlcclxuXHRcdFx0XHRyZXR1cm4gcm9wYWNpdHkudGVzdCggKCBjb21wdXRlZCAmJiBlbGVtLmN1cnJlbnRTdHlsZSA/XHJcblx0XHRcdFx0XHRlbGVtLmN1cnJlbnRTdHlsZS5maWx0ZXIgOlxyXG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5maWx0ZXIgKSB8fCBcIlwiICkgP1xyXG5cdFx0XHRcdFx0KCAwLjAxICogcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgKSArIFwiXCIgOlxyXG5cdFx0XHRcdFx0Y29tcHV0ZWQgPyBcIjFcIiA6IFwiXCI7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLFxyXG5cdFx0XHRcdFx0Y3VycmVudFN0eWxlID0gZWxlbS5jdXJyZW50U3R5bGUsXHJcblx0XHRcdFx0XHRvcGFjaXR5ID0galF1ZXJ5LmlzTnVtZXJpYyggdmFsdWUgKSA/IFwiYWxwaGEob3BhY2l0eT1cIiArIHZhbHVlICogMTAwICsgXCIpXCIgOiBcIlwiLFxyXG5cdFx0XHRcdFx0ZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8IFwiXCI7XHJcblxyXG5cdFx0XHRcdC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dFxyXG5cdFx0XHRcdC8vIEZvcmNlIGl0IGJ5IHNldHRpbmcgdGhlIHpvb20gbGV2ZWxcclxuXHRcdFx0XHRzdHlsZS56b29tID0gMTtcclxuXHJcblx0XHRcdFx0Ly8gaWYgc2V0dGluZyBvcGFjaXR5IHRvIDEsIGFuZCBubyBvdGhlciBmaWx0ZXJzIGV4aXN0IC1cclxuXHRcdFx0XHQvLyBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyXHJcblx0XHRcdFx0Ly8gaWYgdmFsdWUgPT09IFwiXCIsIHRoZW4gcmVtb3ZlIGlubGluZSBvcGFjaXR5ICMxMjY4NVxyXG5cdFx0XHRcdGlmICggKCB2YWx1ZSA+PSAxIHx8IHZhbHVlID09PSBcIlwiICkgJiZcclxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBmaWx0ZXIucmVwbGFjZSggcmFscGhhLCBcIlwiICkgKSA9PT0gXCJcIiAmJlxyXG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFNldHRpbmcgc3R5bGUuZmlsdGVyIHRvIG51bGwsIFwiXCIgJiBcIiBcIiBzdGlsbCBsZWF2ZSBcImZpbHRlcjpcIiBpbiB0aGUgY3NzVGV4dFxyXG5cdFx0XHRcdFx0Ly8gaWYgXCJmaWx0ZXI6XCIgaXMgcHJlc2VudCBhdCBhbGwsIGNsZWFyVHlwZSBpcyBkaXNhYmxlZCwgd2Ugd2FudCB0byBhdm9pZCB0aGlzXHJcblx0XHRcdFx0XHQvLyBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgaXMgSUUgT25seSwgYnV0IHNvIGFwcGFyZW50bHkgaXMgdGhpcyBjb2RlIHBhdGguLi5cclxuXHRcdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggXCJmaWx0ZXJcIiApO1xyXG5cclxuXHRcdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGVcclxuXHRcdFx0XHRcdC8vIG9yIHVuc2V0IGlubGluZSBvcGFjaXR5LCB3ZSBhcmUgZG9uZVxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiB8fCBjdXJyZW50U3R5bGUgJiYgIWN1cnJlbnRTdHlsZS5maWx0ZXIgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIG90aGVyd2lzZSwgc2V0IG5ldyBmaWx0ZXIgdmFsdWVzXHJcblx0XHRcdFx0c3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID9cclxuXHRcdFx0XHRcdGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIG9wYWNpdHkgKSA6XHJcblx0XHRcdFx0XHRmaWx0ZXIgKyBcIiBcIiArIG9wYWNpdHk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxyXG5cdFx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG5cclxuXHRqUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3JcclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOCBvbmx5XHJcblx0XHRcdFx0XHQvLyBnZXRDbGllbnRSZWN0cygpIGVycm9ycyBvbiBkaXNjb25uZWN0ZWQgZWxlbXNcclxuXHRcdFx0XHRcdCggalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSA/XHJcblx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cclxuXHRcdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG5cdFx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdFx0MFxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCkgKyBcInB4XCI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQpO1xyXG5cclxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xyXG5cdGpRdWVyeS5lYWNoKCB7XHJcblx0XHRtYXJnaW46IFwiXCIsXHJcblx0XHRwYWRkaW5nOiBcIlwiLFxyXG5cdFx0Ym9yZGVyOiBcIldpZHRoXCJcclxuXHR9LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XHJcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xyXG5cdFx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0XHRleHBhbmRlZCA9IHt9LFxyXG5cclxuXHRcdFx0XHRcdC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xyXG5cdFx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcclxuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xyXG5cdFx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxyXG5cdFx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcclxuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRcdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0dmFyIHN0eWxlcywgbGVuLFxyXG5cdFx0XHRcdFx0bWFwID0ge30sXHJcblx0XHRcdFx0XHRpID0gMDtcclxuXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xyXG5cdFx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0XHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiBtYXA7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHRcdH0sXHJcblx0XHRzaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XHJcblx0XHR9LFxyXG5cdFx0aGlkZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xyXG5cdFx0fSxcclxuXHRcdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xyXG5cdFx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcclxuXHR9XHJcblx0alF1ZXJ5LlR3ZWVuID0gVHdlZW47XHJcblxyXG5cdFR3ZWVuLnByb3RvdHlwZSA9IHtcclxuXHRcdGNvbnN0cnVjdG9yOiBUd2VlbixcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcclxuXHRcdFx0dGhpcy5lbGVtID0gZWxlbTtcclxuXHRcdFx0dGhpcy5wcm9wID0gcHJvcDtcclxuXHRcdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcclxuXHRcdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHRcdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcclxuXHRcdFx0dGhpcy5lbmQgPSBlbmQ7XHJcblx0XHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XHJcblx0XHR9LFxyXG5cdFx0Y3VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xyXG5cdFx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcclxuXHRcdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XHJcblx0XHR9LFxyXG5cdFx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcclxuXHRcdFx0dmFyIGVhc2VkLFxyXG5cdFx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcclxuXHJcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xyXG5cdFx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxyXG5cdFx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xyXG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XHJcblx0XHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdFR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcclxuXHJcblx0VHdlZW4ucHJvcEhvb2tzID0ge1xyXG5cdFx0X2RlZmF1bHQ6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblx0XHRcdFx0dmFyIHJlc3VsdDtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcclxuXHRcdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxyXG5cdFx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxyXG5cdFx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gcGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlsc1xyXG5cdFx0XHRcdC8vIHNvLCBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdC5cclxuXHRcdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzIGlzLlxyXG5cdFx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXHJcblx0XHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XHJcblx0XHRcdH0sXHJcblx0XHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cclxuXHRcdFx0XHQvLyB1c2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdCAtIHVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZSAtIHVzZSAuc3R5bGUgaWYgaXRzXHJcblx0XHRcdFx0Ly8gYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGVcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG4vLyBTdXBwb3J0OiBJRSA8PTlcclxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblxyXG5cdFR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcclxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5lYXNpbmcgPSB7XHJcblx0XHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0XHRyZXR1cm4gcDtcclxuXHRcdH0sXHJcblx0XHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XHJcblx0XHR9LFxyXG5cdFx0X2RlZmF1bHQ6IFwic3dpbmdcIlxyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xyXG5cclxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcclxuXHRqUXVlcnkuZnguc3RlcCA9IHt9O1xyXG5cclxuXHJcblxyXG5cclxuXHR2YXJcclxuXHRcdGZ4Tm93LCB0aW1lcklkLFxyXG5cdFx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXHJcblx0XHRycnVuID0gL3F1ZXVlSG9va3MkLztcclxuXHJcbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcclxuXHRmdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcclxuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0XHR9ICk7XHJcblx0XHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xyXG5cdH1cclxuXHJcbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXHJcblx0ZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdHZhciB3aGljaCxcclxuXHRcdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9LFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHQvLyBpZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXHJcblx0XHQvLyBpZiB3ZSBkb24ndCBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XHJcblx0XHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcclxuXHRcdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XHJcblx0XHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XHJcblx0XHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhdHRycztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xyXG5cdFx0dmFyIHR3ZWVuLFxyXG5cdFx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xyXG5cclxuXHRcdFx0XHQvLyB3ZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxyXG5cdFx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XHJcblx0XHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcblx0XHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXHJcblx0XHRcdGFuaW0gPSB0aGlzLFxyXG5cdFx0XHRvcmlnID0ge30sXHJcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcclxuXHRcdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxyXG5cdFx0XHRkYXRhU2hvdyA9IGpRdWVyeS5fZGF0YSggZWxlbSwgXCJmeHNob3dcIiApO1xyXG5cclxuXHRcdC8vIGhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcclxuXHRcdGlmICggIW9wdHMucXVldWUgKSB7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcclxuXHRcdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcclxuXHRcdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcclxuXHRcdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcclxuXHRcdFx0XHRcdFx0b2xkZmlyZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdFx0aG9va3MudW5xdWV1ZWQrKztcclxuXHJcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gZG9pbmcgdGhpcyBtYWtlcyBzdXJlIHRoYXQgdGhlIGNvbXBsZXRlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWRcclxuXHRcdFx0XHQvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcclxuXHRcdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xyXG5cdFx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBoZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxyXG5cdFx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90XHJcblx0XHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxyXG5cdFx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxyXG5cdFx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcclxuXHJcblx0XHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXHJcblx0XHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcclxuXHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdFx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxyXG5cdFx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XHJcblx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xyXG5cclxuXHRcdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xyXG5cclxuXHRcdFx0XHQvLyBpbmxpbmUtbGV2ZWwgZWxlbWVudHMgYWNjZXB0IGlubGluZS1ibG9jaztcclxuXHRcdFx0XHQvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dFxyXG5cdFx0XHRcdGlmICggIXN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApID09PSBcImlubGluZVwiICkge1xyXG5cdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0eWxlLnpvb20gPSAxO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggb3B0cy5vdmVyZmxvdyApIHtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cdFx0XHRpZiAoICFzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MoKSApIHtcclxuXHRcdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcclxuXHRcdFx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcclxuXHRcdFx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzaG93L2hpZGUgcGFzc1xyXG5cdFx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcclxuXHRcdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XHJcblx0XHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XHJcblx0XHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcclxuXHRcdFx0XHRcdC8vIGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XHJcblxyXG5cdFx0XHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcclxuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcclxuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XHJcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBzdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXHJcblx0XHRcdGlmICggdG9nZ2xlICkge1xyXG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHByb3A7XHJcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XHJcblxyXG5cdFx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xyXG5cdFx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcclxuXHRcdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xyXG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xyXG5cdFx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcclxuXHJcblx0XHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3NcclxuXHRcdGZvciAoIGluZGV4IGluIHByb3BzICkge1xyXG5cdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcclxuXHRcdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xyXG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XHJcblx0XHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XHJcblx0XHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcclxuXHRcdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xyXG5cdFx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0XHQvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuXHJcblx0XHRcdFx0Ly8gYWxzbyAtIHJldXNpbmcgJ2luZGV4JyBmcm9tIGFib3ZlIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxyXG5cdFx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xyXG5cdFx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xyXG5cdFx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcclxuXHRcdHZhciByZXN1bHQsXHJcblx0XHRcdHN0b3BwZWQsXHJcblx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxyXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIGRvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxyXG5cdFx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XHJcblx0XHRcdH0gKSxcclxuXHRcdFx0dGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxyXG5cdFx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxyXG5cdFx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxyXG5cdFx0XHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcclxuXHRcdFx0XHRcdHJldHVybiByZW1haW5pbmc7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XHJcblx0XHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcclxuXHRcdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XHJcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcclxuXHRcdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxyXG5cdFx0XHRcdH0sIG9wdGlvbnMgKSxcclxuXHRcdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXHJcblx0XHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxyXG5cdFx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcclxuXHRcdFx0XHR0d2VlbnM6IFtdLFxyXG5cdFx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xyXG5cdFx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxyXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XHJcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcclxuXHRcdFx0XHRcdHZhciBpbmRleCA9IDAsXHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XHJcblx0XHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XHJcblx0XHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyByZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lXHJcblx0XHRcdFx0XHQvLyBvdGhlcndpc2UsIHJlamVjdFxyXG5cdFx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKSxcclxuXHRcdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XHJcblxyXG5cdFx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcclxuXHJcblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcclxuXHRcdFx0aWYgKCByZXN1bHQgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xyXG5cdFx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcclxuXHRcdH1cclxuXHJcblx0XHRqUXVlcnkuZngudGltZXIoXHJcblx0XHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcclxuXHRcdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRcdGFuaW06IGFuaW1hdGlvbixcclxuXHRcdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcclxuXHRcdFx0fSApXHJcblx0XHQpO1xyXG5cclxuXHRcdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXHJcblx0XHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXHJcblx0XHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXHJcblx0XHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcclxuXHRcdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XHJcblxyXG5cdFx0dHdlZW5lcnM6IHtcclxuXHRcdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XHJcblx0XHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0XHR9IF1cclxuXHRcdH0sXHJcblxyXG5cdFx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0XHRjYWxsYmFjayA9IHByb3BzO1xyXG5cdFx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3R3aGl0ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgcHJvcCxcclxuXHRcdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XHJcblx0XHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcclxuXHJcblx0XHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcclxuXHRcdFx0aWYgKCBwcmVwZW5kICkge1xyXG5cdFx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xyXG5cdFx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xyXG5cdFx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxyXG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxyXG5cdFx0XHRkdXJhdGlvbjogc3BlZWQsXHJcblx0XHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xyXG5cdFx0fTtcclxuXHJcblx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxyXG5cdFx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XHJcblx0XHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xyXG5cclxuXHRcdC8vIG5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxyXG5cdFx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XHJcblx0XHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBRdWV1ZWluZ1xyXG5cdFx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcclxuXHJcblx0XHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xyXG5cdFx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcclxuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIG9wdDtcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0XHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0XHQvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcclxuXHRcdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcclxuXHJcblx0XHRcdC8vIGFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxyXG5cdFx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0XHR9LFxyXG5cdFx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxyXG5cdFx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcclxuXHRcdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XHJcblx0XHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XHJcblx0XHRcdFx0XHRpZiAoIGVtcHR5IHx8IGpRdWVyeS5fZGF0YSggdGhpcywgXCJmaW5pc2hcIiApICkge1xyXG5cdFx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcclxuXHJcblx0XHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cclxuXHRcdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxyXG5cdFx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcclxuXHRcdH0sXHJcblx0XHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcclxuXHRcdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcclxuXHRcdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XHJcblx0XHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdFx0c3RvcCggZ290b0VuZCApO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcclxuXHRcdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcclxuXHRcdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxyXG5cdFx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxyXG5cdFx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRcdGRhdGEgPSBqUXVlcnkuX2RhdGEoIHRoaXMgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XHJcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcclxuXHRcdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcclxuXHRcdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XHJcblx0XHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIHN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWRcclxuXHRcdFx0XHQvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZVxyXG5cdFx0XHRcdC8vIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kXHJcblx0XHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0sXHJcblx0XHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xyXG5cdFx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgaW5kZXgsXHJcblx0XHRcdFx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICksXHJcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcclxuXHRcdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXHJcblx0XHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xyXG5cclxuXHRcdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXHJcblx0XHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xyXG5cclxuXHRcdFx0XHQvLyBlbXB0eSB0aGUgcXVldWUgZmlyc3RcclxuXHRcdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XHJcblxyXG5cdFx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcclxuXHRcdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gbG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XHJcblx0XHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGxvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xyXG5cdFx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcclxuXHRcdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRcdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xyXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xyXG5cdFx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XHJcblx0XHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcblxyXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXHJcblx0alF1ZXJ5LmVhY2goIHtcclxuXHRcdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXHJcblx0XHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcclxuXHRcdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxyXG5cdFx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXHJcblx0XHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXHJcblx0XHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxyXG5cdH0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcclxuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHRcdH07XHJcblx0fSApO1xyXG5cclxuXHRqUXVlcnkudGltZXJzID0gW107XHJcblx0alF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciB0aW1lcixcclxuXHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XHJcblxyXG5cdFx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xyXG5cclxuXHRcdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXHJcblx0XHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xyXG5cdFx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHRcdH1cclxuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcclxuXHRcdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcclxuXHRcdGlmICggdGltZXIoKSApIHtcclxuXHRcdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xyXG5cclxuXHRqUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggIXRpbWVySWQgKSB7XHJcblx0XHRcdHRpbWVySWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcclxuXHRcdHRpbWVySWQgPSBudWxsO1xyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5meC5zcGVlZHMgPSB7XHJcblx0XHRzbG93OiA2MDAsXHJcblx0XHRmYXN0OiAyMDAsXHJcblxyXG5cdFx0Ly8gRGVmYXVsdCBzcGVlZFxyXG5cdFx0X2RlZmF1bHQ6IDQwMFxyXG5cdH07XHJcblxyXG5cclxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxyXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXHJcblx0alF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XHJcblx0XHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XHJcblx0XHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcclxuXHRcdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gKTtcclxuXHR9O1xyXG5cclxuXHJcblx0KCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBhLFxyXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxyXG5cdFx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0XHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcclxuXHRcdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcclxuXHJcblx0XHQvLyBTZXR1cFxyXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xyXG5cdFx0ZGl2LnNldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiwgXCJ0XCIgKTtcclxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xyXG5cdFx0YSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJhXCIgKVsgMCBdO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcclxuXHRcdC8vIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiY2hlY2tib3hcIiApO1xyXG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xyXG5cclxuXHRcdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYVwiIClbIDAgXTtcclxuXHJcblx0XHQvLyBGaXJzdCBiYXRjaCBvZiB0ZXN0cy5cclxuXHRcdGEuc3R5bGUuY3NzVGV4dCA9IFwidG9wOjFweFwiO1xyXG5cclxuXHRcdC8vIFRlc3Qgc2V0QXR0cmlidXRlIG9uIGNhbWVsQ2FzZSBjbGFzcy5cclxuXHRcdC8vIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KVxyXG5cdFx0c3VwcG9ydC5nZXRTZXRBdHRyaWJ1dGUgPSBkaXYuY2xhc3NOYW1lICE9PSBcInRcIjtcclxuXHJcblx0XHQvLyBHZXQgdGhlIHN0eWxlIGluZm9ybWF0aW9uIGZyb20gZ2V0QXR0cmlidXRlXHJcblx0XHQvLyAoSUUgdXNlcyAuY3NzVGV4dCBpbnN0ZWFkKVxyXG5cdFx0c3VwcG9ydC5zdHlsZSA9IC90b3AvLnRlc3QoIGEuZ2V0QXR0cmlidXRlKCBcInN0eWxlXCIgKSApO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IFVSTHMgYXJlbid0IG1hbmlwdWxhdGVkXHJcblx0XHQvLyAoSUUgbm9ybWFsaXplcyBpdCBieSBkZWZhdWx0KVxyXG5cdFx0c3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIi9hXCI7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gV2ViS2l0OyBcIm9uXCIgZWxzZXdoZXJlKVxyXG5cdFx0c3VwcG9ydC5jaGVja09uID0gISFpbnB1dC52YWx1ZTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuXHJcblx0XHQvLyAoV2ViS2l0IGRlZmF1bHRzIHRvIGZhbHNlIGluc3RlYWQgb2YgdHJ1ZSwgSUUgdG9vLCBpZiBpdCdzIGluIGFuIG9wdGdyb3VwKVxyXG5cdFx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcclxuXHJcblx0XHQvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpXHJcblx0XHRzdXBwb3J0LmVuY3R5cGUgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZm9ybVwiICkuZW5jdHlwZTtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgb3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmVuJ3QgbWFya2VkIGFzIGRpc2FibGVkXHJcblx0XHQvLyAoV2ViS2l0IG1hcmtzIHRoZW0gYXMgZGlzYWJsZWQpXHJcblx0XHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xyXG5cdFx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU4IG9ubHlcclxuXHRcdC8vIENoZWNrIGlmIHdlIGNhbiB0cnVzdCBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxyXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcclxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XHJcblx0XHRzdXBwb3J0LmlucHV0ID0gaW5wdXQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcclxuXHJcblx0XHQvLyBDaGVjayBpZiBhbiBpbnB1dCBtYWludGFpbnMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cclxuXHRcdGlucHV0LnZhbHVlID0gXCJ0XCI7XHJcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcclxuXHRcdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcclxuXHR9ICkoKTtcclxuXHJcblxyXG5cdHZhciBycmV0dXJuID0gL1xcci9nLFxyXG5cdFx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xyXG5cclxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0XHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcclxuXHJcblx0XHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XHJcblx0XHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHRob29rcyAmJlxyXG5cdFx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gaGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xyXG5cdFx0XHRcdFx0XHRyZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApIDpcclxuXHJcblx0XHRcdFx0XHRcdC8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxyXG5cdFx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdHZhciB2YWw7XHJcblxyXG5cdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHZhbCA9IHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xyXG5cdFx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0XHR2YWwgPSBcIlwiO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0XHR2YWwgKz0gXCJcIjtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XHJcblx0XHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XHJcblxyXG5cdFx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXHJcblx0XHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdHZhbEhvb2tzOiB7XHJcblx0XHRcdG9wdGlvbjoge1xyXG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xyXG5cdFx0XHRcdFx0XHR2YWwgOlxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMC0xMStcclxuXHRcdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxyXG5cdFx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sXHJcblx0XHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxyXG5cdFx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcclxuXHRcdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxyXG5cdFx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcclxuXHRcdFx0XHRcdFx0aSA9IGluZGV4IDwgMCA/XHJcblx0XHRcdFx0XHRcdFx0bWF4IDpcclxuXHRcdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XHJcblxyXG5cdFx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xyXG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XHJcblx0XHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxyXG5cdFx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxyXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/XHJcblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDpcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcclxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cclxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxyXG5cdFx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcclxuXHRcdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcclxuXHRcdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcclxuXHRcdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFNlxyXG5cdFx0XHRcdFx0XHRcdC8vIFdoZW4gbmV3IG9wdGlvbiBlbGVtZW50IGlzIGFkZGVkIHRvIHNlbGVjdCBib3ggd2UgbmVlZCB0b1xyXG5cdFx0XHRcdFx0XHRcdC8vIGZvcmNlIHJlZmxvdyBvZiBuZXdseSBhZGRlZCBub2RlIGluIG9yZGVyIHRvIHdvcmthcm91bmQgZGVsYXlcclxuXHRcdFx0XHRcdFx0XHQvLyBvZiBpbml0aWFsaXphdGlvbiBwcm9wZXJ0aWVzXHJcblx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvblNldCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBfICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFdpbGwgYmUgZXhlY3V0ZWQgb25seSBpbiBJRTZcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbi5zY3JvbGxIZWlnaHQ7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XHJcblx0XHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiBvcHRpb25zO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXHJcblx0alF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XHJcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xyXG5cdFx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuXHJcblxyXG5cdHZhciBub2RlSG9vaywgYm9vbEhvb2ssXHJcblx0XHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZSxcclxuXHRcdHJ1c2VEZWZhdWx0ID0gL14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaSxcclxuXHRcdGdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLFxyXG5cdFx0Z2V0U2V0SW5wdXQgPSBzdXBwb3J0LmlucHV0O1xyXG5cclxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0XHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cdGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHJldCwgaG9va3MsXHJcblx0XHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xyXG5cdFx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuXHRcdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXHJcblx0XHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcclxuXHRcdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxyXG5cdFx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XHJcblxyXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxyXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XHJcblx0XHR9LFxyXG5cclxuXHRcdGF0dHJIb29rczoge1xyXG5cdFx0XHR0eXBlOiB7XHJcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU2V0dGluZyB0aGUgdHlwZSBvbiBhIHJhZGlvIGJ1dHRvbiBhZnRlciB0aGUgdmFsdWUgcmVzZXRzIHRoZSB2YWx1ZSBpbiBJRTgtOVxyXG5cdFx0XHRcdFx0XHQvLyBSZXNldCB2YWx1ZSB0byBkZWZhdWx0IGluIGNhc2UgdHlwZSBpcyBzZXQgYWZ0ZXIgdmFsdWUgZHVyaW5nIGNyZWF0aW9uXHJcblx0XHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xyXG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XHJcblx0XHRcdFx0XHRcdGlmICggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XHJcblxyXG5cdFx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxyXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXHJcblx0XHRcdFx0XHRcdGlmICggZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlIHx8ICFydXNlRGVmYXVsdC50ZXN0KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbyBjbGVhciBkZWZhdWx0Q2hlY2tlZC9kZWZhdWx0U2VsZWN0ZWQgKGlmIGFwcHJvcHJpYXRlKVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID1cclxuXHRcdFx0XHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU2VlICM5Njk5IGZvciBleHBsYW5hdGlvbiBvZiB0aGlzIGFwcHJvYWNoIChzZXR0aW5nIGZpcnN0LCB0aGVuIHJlbW92YWwpXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuYXR0ciggZWxlbSwgbmFtZSwgXCJcIiApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBnZXRTZXRBdHRyaWJ1dGUgPyBuYW1lIDogcHJvcE5hbWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXHJcblx0Ym9vbEhvb2sgPSB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcclxuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSUU8OCBuZWVkcyB0aGUgKnByb3BlcnR5KiBuYW1lXHJcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoICFnZXRTZXRBdHRyaWJ1dGUgJiYgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lLCBuYW1lICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XHJcblx0XHRcdFx0Ly8gVXNlIGRlZmF1bHRDaGVja2VkIGFuZCBkZWZhdWx0U2VsZWN0ZWQgZm9yIG9sZElFXHJcblx0XHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPSBlbGVtWyBuYW1lIF0gPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuYW1lO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRcdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcclxuXHJcblx0XHRpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRcdFx0dmFyIHJldCwgaGFuZGxlO1xyXG5cdFx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcclxuXHRcdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcclxuXHRcdFx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcclxuXHRcdFx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cclxuXHRcdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdFx0bnVsbDtcclxuXHRcdFx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdFx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA/XHJcblx0XHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHRcdG51bGw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcbi8vIGZpeCBvbGRJRSBhdHRyb3BlcnRpZXNcclxuXHRpZiAoICFnZXRTZXRJbnB1dCB8fCAhZ2V0U2V0QXR0cmlidXRlICkge1xyXG5cdFx0alF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvZXMgbm90IHJldHVybiBzbyB0aGF0IHNldEF0dHJpYnV0ZSBpcyBhbHNvIHVzZWRcclxuXHRcdFx0XHRcdGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBVc2Ugbm9kZUhvb2sgaWYgZGVmaW5lZCAoIzE5NTQpOyBvdGhlcndpc2Ugc2V0QXR0cmlidXRlIGlzIGZpbmVcclxuXHRcdFx0XHRcdHJldHVybiBub2RlSG9vayAmJiBub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcbi8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlXHJcblx0aWYgKCAhZ2V0U2V0QXR0cmlidXRlICkge1xyXG5cclxuXHRcdC8vIFVzZSB0aGlzIGZvciBhbnkgYXR0cmlidXRlIGluIElFNi83XHJcblx0XHQvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZVxyXG5cdFx0bm9kZUhvb2sgPSB7XHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZXQgdGhlIGV4aXN0aW5nIG9yIGNyZWF0ZSBhIG5ldyBhdHRyaWJ1dGUgbm9kZVxyXG5cdFx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcclxuXHRcdFx0XHRpZiAoICFyZXQgKSB7XHJcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZU5vZGUoXHJcblx0XHRcdFx0XHRcdCggcmV0ID0gZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSggbmFtZSApIClcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXQudmFsdWUgPSB2YWx1ZSArPSBcIlwiO1xyXG5cclxuXHRcdFx0XHQvLyBCcmVhayBhc3NvY2lhdGlvbiB3aXRoIGNsb25lZCBlbGVtZW50cyBieSBhbHNvIHVzaW5nIHNldEF0dHJpYnV0ZSAoIzk2NDYpXHJcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcInZhbHVlXCIgfHwgdmFsdWUgPT09IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNvbWUgYXR0cmlidXRlcyBhcmUgY29uc3RydWN0ZWQgd2l0aCBlbXB0eS1zdHJpbmcgdmFsdWVzIHdoZW4gbm90IGRlZmluZWRcclxuXHRcdGF0dHJIYW5kbGUuaWQgPSBhdHRySGFuZGxlLm5hbWUgPSBhdHRySGFuZGxlLmNvb3JkcyA9XHJcblx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdFx0XHR2YXIgcmV0O1xyXG5cdFx0XHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICggcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiByZXQudmFsdWUgIT09IFwiXCIgP1xyXG5cdFx0XHRcdFx0XHRyZXQudmFsdWUgOlxyXG5cdFx0XHRcdFx0XHRudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBGaXhpbmcgdmFsdWUgcmV0cmlldmFsIG9uIGEgYnV0dG9uIHJlcXVpcmVzIHRoaXMgbW9kdWxlXHJcblx0XHRqUXVlcnkudmFsSG9va3MuYnV0dG9uID0ge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcclxuXHRcdFx0XHRpZiAoIHJldCAmJiByZXQuc3BlY2lmaWVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldC52YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdHNldDogbm9kZUhvb2suc2V0XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCBjb250ZW50ZWRpdGFibGUgdG8gZmFsc2Ugb24gcmVtb3ZhbHMoIzEwNDI5KVxyXG5cdFx0Ly8gU2V0dGluZyB0byBlbXB0eSBzdHJpbmcgdGhyb3dzIGFuIGVycm9yIGFzIGFuIGludmFsaWQgdmFsdWVcclxuXHRcdGpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0ge1xyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdFx0XHRub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlID09PSBcIlwiID8gZmFsc2UgOiB2YWx1ZSwgbmFtZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB3aWR0aCBhbmQgaGVpZ2h0IHRvIGF1dG8gaW5zdGVhZCBvZiAwIG9uIGVtcHR5IHN0cmluZyggQnVnICM4MTUwIClcclxuXHRcdC8vIFRoaXMgaXMgZm9yIHJlbW92YWxzXHJcblx0XHRqUXVlcnkuZWFjaCggWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0XHRcdGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSA9IHtcclxuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBcImF1dG9cIiApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0aWYgKCAhc3VwcG9ydC5zdHlsZSApIHtcclxuXHRcdGpRdWVyeS5hdHRySG9va3Muc3R5bGUgPSB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nXHJcblx0XHRcdFx0Ly8gTm90ZTogSUUgdXBwZXJjYXNlcyBjc3MgcHJvcGVydHkgbmFtZXMsIGJ1dCBpZiB3ZSB3ZXJlIHRvIC50b0xvd2VyQ2FzZSgpXHJcblx0XHRcdFx0Ly8gLmNzc1RleHQsIHRoYXQgd291bGQgZGVzdHJveSBjYXNlIHNlbnNpdGl2aXR5IGluIFVSTCdzLCBsaWtlIGluIFwiYmFja2dyb3VuZFwiXHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uc3R5bGUuY3NzVGV4dCB8fCB1bmRlZmluZWQ7XHJcblx0XHRcdH0sXHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0uc3R5bGUuY3NzVGV4dCA9IHZhbHVlICsgXCJcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHJcblx0dmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSxcclxuXHRcdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRcdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KVxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHR0aGlzWyBuYW1lIF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRkZWxldGUgdGhpc1sgbmFtZSBdO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgcmV0LCBob29rcyxcclxuXHRcdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdFx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xyXG5cdFx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcclxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF07XHJcblx0XHR9LFxyXG5cclxuXHRcdHByb3BIb29rczoge1xyXG5cdFx0XHR0YWJJbmRleDoge1xyXG5cdFx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXHJcblx0XHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcclxuXHRcdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXHJcblx0XHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxyXG5cdFx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cclxuXHRcdFx0XHRcdFx0cGFyc2VJbnQoIHRhYmluZGV4LCAxMCApIDpcclxuXHRcdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcclxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cclxuXHRcdFx0XHRcdFx0XHQwIDpcclxuXHRcdFx0XHRcdFx0XHQtMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0cHJvcEZpeDoge1xyXG5cdFx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcclxuXHRcdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuLy8gU29tZSBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBzcGVjaWFsIGNhbGwgb24gSUVcclxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxyXG5cdGlmICggIXN1cHBvcnQuaHJlZk5vcm1hbGl6ZWQgKSB7XHJcblxyXG5cdFx0Ly8gaHJlZi9zcmMgcHJvcGVydHkgc2hvdWxkIGdldCB0aGUgZnVsbCBub3JtYWxpemVkIFVSTCAoIzEwMjk5LyMxMjkxNSlcclxuXHRcdGpRdWVyeS5lYWNoKCBbIFwiaHJlZlwiLCBcInNyY1wiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdFx0XHRqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgNCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmksIElFOStcclxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XHJcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcclxuLy8gb24gdGhlIG9wdGlvblxyXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxyXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXHJcblx0aWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcclxuXHRcdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBpdCBhbHNvIHdvcmtzIHdpdGggb3B0Z3JvdXBzLCBzZWUgIzU3MDFcclxuXHRcdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblx0XHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5lYWNoKCBbXHJcblx0XHRcInRhYkluZGV4XCIsXHJcblx0XHRcInJlYWRPbmx5XCIsXHJcblx0XHRcIm1heExlbmd0aFwiLFxyXG5cdFx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFx0XCJjZWxsUGFkZGluZ1wiLFxyXG5cdFx0XCJyb3dTcGFuXCIsXHJcblx0XHRcImNvbFNwYW5cIixcclxuXHRcdFwidXNlTWFwXCIsXHJcblx0XHRcImZyYW1lQm9yZGVyXCIsXHJcblx0XHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcblx0XSwgZnVuY3Rpb24oKSB7XHJcblx0XHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xyXG5cdH0gKTtcclxuXHJcbi8vIElFNi83IGNhbGwgZW5jdHlwZSBlbmNvZGluZ1xyXG5cdGlmICggIXN1cHBvcnQuZW5jdHlwZSApIHtcclxuXHRcdGpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSBcImVuY29kaW5nXCI7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuXHR2YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XHJcblxyXG5cdGZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5hdHRyKCBlbGVtLCBcImNsYXNzXCIgKSB8fCBcIlwiO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xyXG5cdFx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcclxuXHRcdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjdXIgKSB7XHJcblx0XHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuYXR0ciggZWxlbSwgXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XHJcblx0XHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXHJcblx0XHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuYXR0ciggZWxlbSwgXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcclxuXHRcdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcblxyXG5cdFx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxyXG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxyXG5cdFx0XHRcdFx0XHRzdGF0ZVZhbFxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XHJcblxyXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xyXG5cdFx0XHRcdFx0aSA9IDA7XHJcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XHJcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XHJcblx0XHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xyXG5cdFx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIFwiZmFsc2VcIixcclxuXHRcdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXHJcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxyXG5cdFx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG5cdFx0XHRcdFx0alF1ZXJ5LmF0dHIoIHRoaXMsIFwiY2xhc3NcIixcclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdFx0XHRcdFx0XCJcIiA6XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XHJcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdCggXCIgXCIgKyBnZXRDbGFzcyggZWxlbSApICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiIClcclxuXHRcdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cclxuXHJcblxyXG5cdGpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xyXG5cdFx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXHJcblx0XHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cdFx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xyXG5cdFx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcclxuXHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xyXG5cdFx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XHJcblx0XHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gKTtcclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuXHR2YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcblxyXG5cdHZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcclxuXHJcblx0dmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcclxuXHJcblxyXG5cclxuXHR2YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO1xyXG5cclxuXHRqUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblxyXG5cdFx0Ly8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0XHJcblx0XHRpZiAoIHdpbmRvdy5KU09OICYmIHdpbmRvdy5KU09OLnBhcnNlICkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxuXHRcdFx0Ly8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcclxuXHRcdFx0cmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByZXF1aXJlTm9uQ29tbWEsXHJcblx0XHRcdGRlcHRoID0gbnVsbCxcclxuXHRcdFx0c3RyID0galF1ZXJ5LnRyaW0oIGRhdGEgKyBcIlwiICk7XHJcblxyXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWluc1xyXG5cdFx0Ly8gYWZ0ZXIgcmVtb3ZpbmcgdmFsaWQgdG9rZW5zXHJcblx0XHRyZXR1cm4gc3RyICYmICFqUXVlcnkudHJpbSggc3RyLnJlcGxhY2UoIHJ2YWxpZHRva2VucywgZnVuY3Rpb24oIHRva2VuLCBjb21tYSwgb3BlbiwgY2xvc2UgKSB7XHJcblxyXG5cdFx0XHQvLyBGb3JjZSB0ZXJtaW5hdGlvbiBpZiB3ZSBzZWUgYSBtaXNwbGFjZWQgY29tbWFcclxuXHRcdFx0aWYgKCByZXF1aXJlTm9uQ29tbWEgJiYgY29tbWEgKSB7XHJcblx0XHRcdFx0ZGVwdGggPSAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBQZXJmb3JtIG5vIG1vcmUgcmVwbGFjZW1lbnRzIGFmdGVyIHJldHVybmluZyB0byBvdXRlcm1vc3QgZGVwdGhcclxuXHRcdFx0aWYgKCBkZXB0aCA9PT0gMCApIHtcclxuXHRcdFx0XHRyZXR1cm4gdG9rZW47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbW1hcyBtdXN0IG5vdCBmb2xsb3cgXCJbXCIsIFwie1wiLCBvciBcIixcIlxyXG5cdFx0XHRyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hO1xyXG5cclxuXHRcdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkZXB0aFxyXG5cdFx0XHQvLyBhcnJheS9vYmplY3Qgb3BlbiAoXCJbXCIgb3IgXCJ7XCIpOiBkZXB0aCArPSB0cnVlIC0gZmFsc2UgKGluY3JlbWVudClcclxuXHRcdFx0Ly8gYXJyYXkvb2JqZWN0IGNsb3NlIChcIl1cIiBvciBcIn1cIik6IGRlcHRoICs9IGZhbHNlIC0gdHJ1ZSAoZGVjcmVtZW50KVxyXG5cdFx0XHQvLyBvdGhlciBjYXNlcyAoXCIsXCIgb3IgcHJpbWl0aXZlKTogZGVwdGggKz0gdHJ1ZSAtIHRydWUgKG51bWVyaWMgY2FzdClcclxuXHRcdFx0ZGVwdGggKz0gIWNsb3NlIC0gIW9wZW47XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgdGhpcyB0b2tlblxyXG5cdFx0XHRyZXR1cm4gXCJcIjtcclxuXHRcdH0gKSApID9cclxuXHRcdFx0KCBGdW5jdGlvbiggXCJyZXR1cm4gXCIgKyBzdHIgKSApKCkgOlxyXG5cdFx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBKU09OOiBcIiArIGRhdGEgKTtcclxuXHR9O1xyXG5cclxuXHJcbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcclxuXHRqUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRcdHZhciB4bWwsIHRtcDtcclxuXHRcdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0aWYgKCB3aW5kb3cuRE9NUGFyc2VyICkgeyAvLyBTdGFuZGFyZFxyXG5cdFx0XHRcdHRtcCA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCk7XHJcblx0XHRcdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XHJcblx0XHRcdH0gZWxzZSB7IC8vIElFXHJcblx0XHRcdFx0eG1sID0gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCBcIk1pY3Jvc29mdC5YTUxET01cIiApO1xyXG5cdFx0XHRcdHhtbC5hc3luYyA9IFwiZmFsc2VcIjtcclxuXHRcdFx0XHR4bWwubG9hZFhNTCggZGF0YSApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0eG1sID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAheG1sIHx8ICF4bWwuZG9jdW1lbnRFbGVtZW50IHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHhtbDtcclxuXHR9O1xyXG5cclxuXHJcblx0dmFyXHJcblx0XHRyaGFzaCA9IC8jLiokLyxcclxuXHRcdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcclxuXHJcblx0XHQvLyBJRSBsZWF2ZXMgYW4gXFxyIGNoYXJhY3RlciBhdCBFT0xcclxuXHRcdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopXFxyPyQvbWcsXHJcblxyXG5cdFx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXHJcblx0XHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxyXG5cdFx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXHJcblx0XHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXHJcblx0XHRydXJsID0gL14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sXHJcblxyXG5cdFx0LyogUHJlZmlsdGVyc1xyXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXHJcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcclxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XHJcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxyXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRcdHByZWZpbHRlcnMgPSB7fSxcclxuXHJcblx0XHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXHJcblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRcdHRyYW5zcG9ydHMgPSB7fSxcclxuXHJcblx0XHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cclxuXHRcdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcclxuXHJcblx0XHQvLyBEb2N1bWVudCBsb2NhdGlvblxyXG5cdFx0YWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZixcclxuXHJcblx0XHQvLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcclxuXHRcdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcclxuXHJcbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcclxuXHRmdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcclxuXHJcblx0XHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcclxuXHJcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xyXG5cdFx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZGF0YVR5cGUsXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xyXG5cclxuXHRcdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXHJcblx0XHRcdFx0XHRpZiAoIGRhdGFUeXBlLmNoYXJBdCggMCApID09PSBcIitcIiApIHtcclxuXHRcdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xyXG5cdFx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcclxuXHRmdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xyXG5cclxuXHRcdHZhciBpbnNwZWN0ZWQgPSB7fSxcclxuXHRcdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XHJcblxyXG5cdFx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XHJcblx0XHRcdHZhciBzZWxlY3RlZDtcclxuXHRcdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcclxuXHRcdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcclxuXHRcdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xyXG5cdFx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcclxuXHJcblx0XHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdFx0cmV0dXJuIHNlbGVjdGVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG5cdH1cclxuXHJcbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xyXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxyXG4vLyBGaXhlcyAjOTg4N1xyXG5cdGZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xyXG5cdFx0dmFyIGRlZXAsIGtleSxcclxuXHRcdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xyXG5cclxuXHRcdGZvciAoIGtleSBpbiBzcmMgKSB7XHJcblx0XHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmICggZGVlcCApIHtcclxuXHRcdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHR9XHJcblxyXG5cdC8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcclxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcclxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcbiAqL1xyXG5cdGZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XHJcblx0XHR2YXIgZmlyc3REYXRhVHlwZSwgY3QsIGZpbmFsRGF0YVR5cGUsIHR5cGUsXHJcblx0XHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcclxuXHRcdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHRcdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xyXG5cdFx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHRcdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXHJcblx0XHRpZiAoIGN0ICkge1xyXG5cdFx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xyXG5cdFx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XHJcblx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXHJcblx0XHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcclxuXHRcdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xyXG5cdFx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcclxuXHRcdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdFx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcclxuXHRcdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcclxuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcclxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXHJcbiAqL1xyXG5cdGZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcclxuXHRcdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0XHRjb252ZXJ0ZXJzID0ge30sXHJcblxyXG5cdFx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXHJcblx0XHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXHJcblx0XHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xyXG5cdFx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXHJcblx0XHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcclxuXHRcdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcclxuXHRcdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcmV2ID0gY3VycmVudDtcclxuXHRcdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdFx0aWYgKCBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXHJcblx0XHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcclxuXHJcblx0XHRcdFx0XHRjdXJyZW50ID0gcHJldjtcclxuXHJcblx0XHRcdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XHJcblx0XHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxyXG5cdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcclxuXHRcdFx0XHRcdGlmICggIWNvbnYgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxyXG5cdFx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XHJcblx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXHJcblx0XHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXHJcblx0XHRcdFx0XHRcdGlmICggY29udiAmJiBzWyBcInRocm93c1wiIF0gKSB7IC8vIGpzY3M6aWdub3JlIHJlcXVpcmVEb3ROb3RhdGlvblxyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XHJcblx0XHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0XHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcclxuXHRcdGFjdGl2ZTogMCxcclxuXHJcblx0XHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XHJcblx0XHRsYXN0TW9kaWZpZWQ6IHt9LFxyXG5cdFx0ZXRhZzoge30sXHJcblxyXG5cdFx0YWpheFNldHRpbmdzOiB7XHJcblx0XHRcdHVybDogYWpheExvY2F0aW9uLFxyXG5cdFx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxyXG5cdFx0XHRnbG9iYWw6IHRydWUsXHJcblx0XHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxyXG5cdFx0XHRhc3luYzogdHJ1ZSxcclxuXHRcdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXHJcblx0XHRcdC8qXHJcblx0XHR0aW1lb3V0OiAwLFxyXG5cdFx0ZGF0YTogbnVsbCxcclxuXHRcdGRhdGFUeXBlOiBudWxsLFxyXG5cdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdGNhY2hlOiBudWxsLFxyXG5cdFx0dGhyb3dzOiBmYWxzZSxcclxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcclxuXHRcdGhlYWRlcnM6IHt9LFxyXG5cdFx0Ki9cclxuXHJcblx0XHRcdGFjY2VwdHM6IHtcclxuXHRcdFx0XHRcIipcIjogYWxsVHlwZXMsXHJcblx0XHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcclxuXHRcdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxyXG5cdFx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGNvbnRlbnRzOiB7XHJcblx0XHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcclxuXHRcdFx0XHRodG1sOiAvXFxiaHRtbC8sXHJcblx0XHRcdFx0anNvbjogL1xcYmpzb25cXGIvXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRyZXNwb25zZUZpZWxkczoge1xyXG5cdFx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxyXG5cdFx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXHJcblx0XHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXHJcblx0XHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcclxuXHRcdFx0Y29udmVydGVyczoge1xyXG5cclxuXHRcdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcclxuXHRcdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXHJcblxyXG5cdFx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxyXG5cdFx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXHJcblxyXG5cdFx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cclxuXHRcdFx0XHRcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxyXG5cclxuXHRcdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxyXG5cdFx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxyXG5cdFx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXHJcblx0XHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXHJcblx0XHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxyXG5cdFx0XHRmbGF0T3B0aW9uczoge1xyXG5cdFx0XHRcdHVybDogdHJ1ZSxcclxuXHRcdFx0XHRjb250ZXh0OiB0cnVlXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcclxuXHRcdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cclxuXHRcdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXHJcblx0XHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xyXG5cdFx0XHRyZXR1cm4gc2V0dGluZ3MgP1xyXG5cclxuXHRcdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxyXG5cdFx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcclxuXHJcblx0XHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xyXG5cdFx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcclxuXHRcdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxyXG5cclxuXHRcdC8vIE1haW4gbWV0aG9kXHJcblx0XHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcclxuXHRcdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdG9wdGlvbnMgPSB1cmw7XHJcblx0XHRcdFx0dXJsID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxyXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcblx0XHRcdHZhclxyXG5cclxuXHRcdFx0XHQvLyBDcm9zcy1kb21haW4gZGV0ZWN0aW9uIHZhcnNcclxuXHRcdFx0XHRwYXJ0cyxcclxuXHJcblx0XHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxyXG5cdFx0XHRcdGksXHJcblxyXG5cdFx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cclxuXHRcdFx0XHRjYWNoZVVSTCxcclxuXHJcblx0XHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVycyBhcyBzdHJpbmdcclxuXHRcdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblxyXG5cdFx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdFx0dGltZW91dFRpbWVyLFxyXG5cclxuXHRcdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcclxuXHRcdFx0XHRmaXJlR2xvYmFscyxcclxuXHJcblx0XHRcdFx0dHJhbnNwb3J0LFxyXG5cclxuXHRcdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxyXG5cclxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XHJcblx0XHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXHJcblxyXG5cdFx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XHJcblx0XHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXHJcblxyXG5cdFx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcclxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXHJcblxyXG5cdFx0XHRcdC8vIERlZmVycmVkc1xyXG5cdFx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXHJcblxyXG5cdFx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXHJcblx0XHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcclxuXHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXHJcblxyXG5cdFx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxyXG5cdFx0XHRcdHN0YXRlID0gMCxcclxuXHJcblx0XHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXHJcblx0XHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXHJcblxyXG5cdFx0XHRcdC8vIEZha2UgeGhyXHJcblx0XHRcdFx0anFYSFIgPSB7XHJcblx0XHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxyXG5cclxuXHRcdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2g7XHJcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIFJhdyBzdHJpbmdcclxuXHRcdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXHJcblx0XHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxyXG5cdFx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xyXG5cdFx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGNvZGU7XHJcblx0XHRcdFx0XHRcdGlmICggbWFwICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcclxuXHRcdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcclxuXHRcdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xyXG5cdFx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcclxuXHRcdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXHJcblx0XHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKCM1ODY2OiBJRTcgaXNzdWUgd2l0aCBwcm90b2NvbC1sZXNzIHVybHMpXHJcblx0XHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXHJcblx0XHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxyXG5cdFx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiIClcclxuXHRcdFx0XHQucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxyXG5cdFx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XHJcblxyXG5cdFx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcclxuXHRcdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcclxuXHJcblx0XHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcclxuXHRcdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cclxuXHRcdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcclxuXHRcdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XHJcblx0XHRcdFx0cGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTtcclxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXHJcblx0XHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XHJcblx0XHRcdFx0XHRcdCggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApICE9PVxyXG5cdFx0XHRcdFx0XHQoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcclxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcclxuXHRcdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxyXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybiBqcVhIUjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cclxuXHRcdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcclxuXHRcdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XHJcblxyXG5cdFx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xyXG5cdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxyXG5cdFx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHJcblx0XHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XHJcblx0XHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXHJcblx0XHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxyXG5cdFx0XHRjYWNoZVVSTCA9IHMudXJsO1xyXG5cclxuXHRcdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcclxuXHRcdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXHJcblx0XHRcdFx0aWYgKCBzLmRhdGEgKSB7XHJcblx0XHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xyXG5cclxuXHRcdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcclxuXHRcdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXHJcblx0XHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcclxuXHRcdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXHJcblx0XHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XHJcblx0XHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxyXG5cdFx0XHRcdFwiQWNjZXB0XCIsXHJcblx0XHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XHJcblx0XHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXHJcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxyXG5cdFx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cclxuXHRcdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxyXG5cdFx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxyXG5cdFx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXHJcblx0XHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxyXG5cdFx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcclxuXHJcblx0XHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xyXG5cdFx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XHJcblx0XHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEdldCB0cmFuc3BvcnRcclxuXHRcdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcclxuXHRcdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XHJcblxyXG5cdFx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XHJcblx0XHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcclxuXHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVGltZW91dFxyXG5cdFx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xyXG5cdFx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcclxuXHRcdFx0XHRcdH0sIHMudGltZW91dCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHN0YXRlID0gMTtcclxuXHRcdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcclxuXHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXHJcblx0XHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xyXG5cdFx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbGVkIG9uY2VcclxuXHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XHJcblx0XHRcdFx0c3RhdGUgPSAyO1xyXG5cclxuXHRcdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xyXG5cdFx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xyXG5cdFx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxyXG5cdFx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXHJcblx0XHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xyXG5cclxuXHRcdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxyXG5cdFx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XHJcblxyXG5cdFx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXHJcblx0XHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XHJcblxyXG5cdFx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXHJcblx0XHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XHJcblx0XHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcclxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xyXG5cdFx0XHRcdGlmICggaXNTdWNjZXNzICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcclxuXHRcdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxyXG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xyXG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcclxuXHRcdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XHJcblx0XHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIFdlIGV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0XHJcblx0XHRcdFx0XHQvLyB0aGVuIG5vcm1hbGl6ZSBzdGF0dXNUZXh0IGFuZCBzdGF0dXMgZm9yIG5vbi1hYm9ydHNcclxuXHRcdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xyXG5cdFx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3RcclxuXHRcdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xyXG5cclxuXHRcdFx0XHQvLyBTdWNjZXNzL0Vycm9yXHJcblx0XHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XHJcblxyXG5cdFx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXHJcblx0XHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4ganFYSFI7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcblx0alF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcclxuXHRcdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcclxuXHJcblx0XHRcdC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcclxuXHRcdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcclxuXHRcdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXHJcblx0XHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xyXG5cdFx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0XHRkYXRhVHlwZTogdHlwZSxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcblxyXG5cclxuXHRqUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cclxuXHRcdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXHJcblx0XHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxyXG5cdFx0XHRjYWNoZTogdHJ1ZSxcclxuXHRcdFx0YXN5bmM6IGZhbHNlLFxyXG5cdFx0XHRnbG9iYWw6IGZhbHNlLFxyXG5cdFx0XHRcInRocm93c1wiOiB0cnVlXHJcblx0XHR9ICk7XHJcblx0fTtcclxuXHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRcdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCB0aGlzWyAwIF0gKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXHJcblx0XHRcdFx0dmFyIHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbTtcclxuXHRcdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSxcclxuXHJcblx0XHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxyXG5cdFx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHR1bndyYXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICkuZW5kKCk7XHJcblx0XHR9XHJcblx0fSApO1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gZ2V0RGlzcGxheSggZWxlbSApIHtcclxuXHRcdHJldHVybiBlbGVtLnN0eWxlICYmIGVsZW0uc3R5bGUuZGlzcGxheSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZmlsdGVySGlkZGVuKCBlbGVtICkge1xyXG5cclxuXHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBhcmUgY29uc2lkZXJlZCBoaWRkZW5cclxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50LCBlbGVtICkgKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0d2hpbGUgKCBlbGVtICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdGlmICggZ2V0RGlzcGxheSggZWxlbSApID09PSBcIm5vbmVcIiB8fCBlbGVtLnR5cGUgPT09IFwiaGlkZGVuXCIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcclxuXHRcdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcclxuXHRcdHJldHVybiBzdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpID9cclxuXHRcdFx0KCBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMCAmJlxyXG5cdFx0XHRcdCFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkgOlxyXG5cdFx0XHRmaWx0ZXJIaWRkZW4oIGVsZW0gKTtcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cclxuXHR2YXIgcjIwID0gLyUyMC9nLFxyXG5cdFx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0XHRyQ1JMRiA9IC9cXHI/XFxuL2csXHJcblx0XHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXHJcblx0XHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5cdGZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcclxuXHRcdHZhciBuYW1lO1xyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xyXG5cclxuXHRcdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXHJcblx0XHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xyXG5cdFx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxyXG5cdFx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cclxuXHRcdFx0XHRcdGJ1aWxkUGFyYW1zKFxyXG5cdFx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxyXG5cdFx0XHRcdFx0XHR2LFxyXG5cdFx0XHRcdFx0XHR0cmFkaXRpb25hbCxcclxuXHRcdFx0XHRcdFx0YWRkXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXHJcblx0XHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXHJcblx0XHRcdGFkZCggcHJlZml4LCBvYmogKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxyXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcclxuXHRqUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XHJcblx0XHR2YXIgcHJlZml4LFxyXG5cdFx0XHRzID0gW10sXHJcblx0XHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcclxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xyXG5cdFx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cclxuXHRcdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cclxuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblxyXG5cdFx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXHJcblx0XHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xyXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0XHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcclxuXHR9O1xyXG5cclxuXHRqUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0XHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcclxuXHRcdH0sXHJcblx0XHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XHJcblx0XHRcdH0gKVxyXG5cdFx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVXNlIC5pcyhcIjpkaXNhYmxlZFwiKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXHJcblx0XHRcdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcclxuXHRcdFx0XHR9IClcclxuXHRcdFx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuXHRcdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xyXG5cdFx0XHRcdFx0XHRudWxsIDpcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdFx0XHRcdH0gKSA6XHJcblx0XHRcdFx0XHRcdFx0eyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdH0gKS5nZXQoKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdFxyXG4vLyAoVGhpcyBpcyBzdGlsbCBhdHRhY2hlZCB0byBhamF4U2V0dGluZ3MgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpXHJcblx0alF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCAhPT0gdW5kZWZpbmVkID9cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBJRTYtSUU4XHJcblx0XHRmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFhIUiBjYW5ub3QgYWNjZXNzIGxvY2FsIGZpbGVzLCBhbHdheXMgdXNlIEFjdGl2ZVggZm9yIHRoYXQgY2FzZVxyXG5cdFx0XHRpZiAoIHRoaXMuaXNMb2NhbCApIHtcclxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlQWN0aXZlWEhSKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDktMTFcclxuXHRcdFx0Ly8gSUUgc2VlbXMgdG8gZXJyb3Igb24gY3Jvc3MtZG9tYWluIFBBVENIIHJlcXVlc3RzIHdoZW4gQWN0aXZlWCBYSFJcclxuXHRcdFx0Ly8gaXMgdXNlZC4gSW4gSUUgOSsgYWx3YXlzIHVzZSB0aGUgbmF0aXZlIFhIUi5cclxuXHRcdFx0Ly8gTm90ZTogdGhpcyBjb25kaXRpb24gd29uJ3QgY2F0Y2ggRWRnZSBhcyBpdCBkb2Vzbid0IGRlZmluZVxyXG5cdFx0XHQvLyBkb2N1bWVudC5kb2N1bWVudE1vZGUgYnV0IGl0IGFsc28gZG9lc24ndCBzdXBwb3J0IEFjdGl2ZVggc28gaXQgd29uJ3RcclxuXHRcdFx0Ly8gcmVhY2ggdGhpcyBjb2RlLlxyXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDggKSB7XHJcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZVN0YW5kYXJkWEhSKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0Ly8gb2xkSUUgWEhSIGRvZXMgbm90IHN1cHBvcnQgbm9uLVJGQzI2MTYgbWV0aG9kcyAoIzEzMjQwKVxyXG5cdFx0XHQvLyBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL21zNTM2NjQ4KHY9dnMuODUpLmFzcHhcclxuXHRcdFx0Ly8gYW5kIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjOS5odG1sI3NlYzlcclxuXHRcdFx0Ly8gQWx0aG91Z2ggdGhpcyBjaGVjayBmb3Igc2l4IG1ldGhvZHMgaW5zdGVhZCBvZiBlaWdodFxyXG5cdFx0XHQvLyBzaW5jZSBJRSBhbHNvIGRvZXMgbm90IHN1cHBvcnQgXCJ0cmFjZVwiIGFuZCBcImNvbm5lY3RcIlxyXG5cdFx0XHRyZXR1cm4gL14oZ2V0fHBvc3R8aGVhZHxwdXR8ZGVsZXRlfG9wdGlvbnMpJC9pLnRlc3QoIHRoaXMudHlwZSApICYmXHJcblx0XHRcdFx0Y3JlYXRlU3RhbmRhcmRYSFIoKSB8fCBjcmVhdGVBY3RpdmVYSFIoKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIEZvciBhbGwgb3RoZXIgYnJvd3NlcnMsIHVzZSB0aGUgc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0XHJcblx0XHRjcmVhdGVTdGFuZGFyZFhIUjtcclxuXHJcblx0dmFyIHhocklkID0gMCxcclxuXHRcdHhockNhbGxiYWNrcyA9IHt9LFxyXG5cdFx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFPDEwXHJcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXHJcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cclxuXHRpZiAoIHdpbmRvdy5hdHRhY2hFdmVudCApIHtcclxuXHRcdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XHJcblx0XHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSggdW5kZWZpbmVkLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG4vLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzXHJcblx0c3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xyXG5cdHhoclN1cHBvcnRlZCA9IHN1cHBvcnQuYWpheCA9ICEheGhyU3VwcG9ydGVkO1xyXG5cclxuLy8gQ3JlYXRlIHRyYW5zcG9ydCBpZiB0aGUgYnJvd3NlciBjYW4gcHJvdmlkZSBhbiB4aHJcclxuXHRpZiAoIHhoclN1cHBvcnRlZCApIHtcclxuXHJcblx0XHRqUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblxyXG5cdFx0XHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XHJcblx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gfHwgc3VwcG9ydC5jb3JzICkge1xyXG5cclxuXHRcdFx0XHR2YXIgY2FsbGJhY2s7XHJcblxyXG5cdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBpLFxyXG5cdFx0XHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXHJcblx0XHRcdFx0XHRcdFx0aWQgPSArK3hocklkO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gT3BlbiB0aGUgc29ja2V0XHJcblx0XHRcdFx0XHRcdHhoci5vcGVuKFxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLnVybCxcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxyXG5cdFx0XHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXHJcblx0XHRcdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcclxuXHRcdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxyXG5cdFx0XHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXHJcblx0XHRcdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXHJcblx0XHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxyXG5cdFx0XHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cclxuXHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xyXG5cdFx0XHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdFx0XHRcdFx0XHQvLyBJRSdzIEFjdGl2ZVhPYmplY3QgdGhyb3dzIGEgJ1R5cGUgTWlzbWF0Y2gnIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcclxuXHRcdFx0XHRcdFx0XHQvLyByZXF1ZXN0IGhlYWRlciB0byBhIG51bGwtdmFsdWUuXHJcblx0XHRcdFx0XHRcdFx0Ly9cclxuXHRcdFx0XHRcdFx0XHQvLyBUbyBrZWVwIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBYSFIgaW1wbGVtZW50YXRpb25zLCBjYXN0IHRoZSB2YWx1ZVxyXG5cdFx0XHRcdFx0XHRcdC8vIHRvIHN0cmluZyBhbmQgaWdub3JlIGB1bmRlZmluZWRgLlxyXG5cdFx0XHRcdFx0XHRcdGlmICggaGVhZGVyc1sgaSBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICsgXCJcIiApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdFx0XHQvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHlcclxuXHRcdFx0XHRcdFx0Ly8gaGFuZGxlZCBpbiBqUXVlcnkuYWpheCAoc28gbm8gdHJ5L2NhdGNoIGhlcmUpXHJcblx0XHRcdFx0XHRcdHhoci5zZW5kKCAoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgKSB8fCBudWxsICk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBMaXN0ZW5lclxyXG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcztcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gV2FzIG5ldmVyIGNhbGxlZCBhbmQgaXMgYWJvcnRlZCBvciBjb21wbGV0ZVxyXG5cdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgJiYgKCBpc0Fib3J0IHx8IHhoci5yZWFkeVN0YXRlID09PSA0ICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2xlYW4gdXBcclxuXHRcdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XHJcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBqUXVlcnkubm9vcDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBBYm9ydCBtYW51YWxseSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaXNBYm9ydCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VzID0ge307XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IHhoci5zdGF0dXM7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKCMxMTQyNilcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMudGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpcmVmb3ggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIGFjY2Vzc2luZ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiXCI7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbHRlciBzdGF0dXMgZm9yIG5vbiBzdGFuZGFyZCBiZWhhdmlvcnNcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IGlzIGxvY2FsIGFuZCB3ZSBoYXZlIGRhdGE6IGFzc3VtZSBhIHN1Y2Nlc3NcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKHN1Y2Nlc3Mgd2l0aCBubyBkYXRhIHdvbid0IGdldCBub3RpZmllZCwgdGhhdCdzIHRoZSBiZXN0IHdlXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucylcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAhc3RhdHVzICYmIG9wdGlvbnMuaXNMb2NhbCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSByZXNwb25zZXMudGV4dCA/IDIwMCA6IDQwNDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUUgLSAjMTQ1MDogc29tZXRpbWVzIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAxMjIzICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IDIwNDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBjb21wbGV0ZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcywgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRcdFx0XHQvLyBgeGhyLnNlbmRgIG1heSByYWlzZSBhbiBleGNlcHRpb24sIGJ1dCBpdCB3aWxsIGJlXHJcblx0XHRcdFx0XHRcdC8vIGhhbmRsZWQgaW4galF1ZXJ5LmFqYXggKHNvIG5vIHRyeS9jYXRjaCBoZXJlKVxyXG5cdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLmFzeW5jICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBJZiB3ZSdyZSBpbiBzeW5jIG1vZGUgd2UgZmlyZSB0aGUgY2FsbGJhY2tcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gKElFNiAmIElFNykgaWYgaXQncyBpbiBjYWNoZSBhbmQgaGFzIGJlZW5cclxuXHRcdFx0XHRcdFx0XHQvLyByZXRyaWV2ZWQgZGlyZWN0bHkgd2UgbmVlZCB0byBmaXJlIHRoZSBjYWxsYmFja1xyXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBjYWxsYmFjayApO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBSZWdpc3RlciB0aGUgY2FsbGJhY2ssIGJ1dCBkZWxheSBpdCBpbiBjYXNlIGB4aHIuc2VuZGAgdGhyb3dzXHJcblx0XHRcdFx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBsaXN0IG9mIGFjdGl2ZSB4aHIgY2FsbGJhY2tzXHJcblx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayggdW5kZWZpbmVkLCB0cnVlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuLy8gRnVuY3Rpb25zIHRvIGNyZWF0ZSB4aHJzXHJcblx0ZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0fSBjYXRjaCAoIGUgKSB7fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY3JlYXRlQWN0aXZlWEhSKCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XHJcblx0XHR9IGNhdGNoICggZSApIHt9XHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxuXHRqUXVlcnkuYWpheFNldHVwKCB7XHJcblx0XHRhY2NlcHRzOiB7XHJcblx0XHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcclxuXHRcdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXHJcblx0XHR9LFxyXG5cdFx0Y29udGVudHM6IHtcclxuXHRcdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cclxuXHRcdH0sXHJcblx0XHRjb252ZXJ0ZXJzOiB7XHJcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcclxuXHRcdFx0XHRyZXR1cm4gdGV4dDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gKTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgZ2xvYmFsXHJcblx0alF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdFx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHMuY2FjaGUgPSBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdFx0cy50eXBlID0gXCJHRVRcIjtcclxuXHRcdFx0cy5nbG9iYWwgPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcclxuXHRqUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblxyXG5cdFx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xyXG5cclxuXHRcdFx0dmFyIHNjcmlwdCxcclxuXHRcdFx0XHRoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBqUXVlcnkoIFwiaGVhZFwiIClbIDAgXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cclxuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY2FsbGJhY2sgKSB7XHJcblxyXG5cdFx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdFx0XHRcdHNjcmlwdC5hc3luYyA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBzLnNjcmlwdENoYXJzZXQgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gcy5zY3JpcHRDaGFyc2V0O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHNjcmlwdC5zcmMgPSBzLnVybDtcclxuXHJcblx0XHRcdFx0XHQvLyBBdHRhY2ggaGFuZGxlcnMgZm9yIGFsbCBicm93c2Vyc1xyXG5cdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggaXNBYm9ydCB8fCAhc2NyaXB0LnJlYWR5U3RhdGUgfHwgL2xvYWRlZHxjb21wbGV0ZS8udGVzdCggc2NyaXB0LnJlYWR5U3RhdGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIG1lbW9yeSBsZWFrIGluIElFXHJcblx0XHRcdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIHNjcmlwdFxyXG5cdFx0XHRcdFx0XHRcdGlmICggc2NyaXB0LnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0XHJcblx0XHRcdFx0XHRcdFx0c2NyaXB0ID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQ2FsbGJhY2sgaWYgbm90IGFib3J0XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhaXNBYm9ydCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrKCAyMDAsIFwic3VjY2Vzc1wiICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdC8vIENpcmN1bXZlbnQgSUU2IGJ1Z3Mgd2l0aCBiYXNlIGVsZW1lbnRzICgjMjcwOSBhbmQgIzQzNzgpIGJ5IHByZXBlbmRpbmdcclxuXHRcdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxyXG5cdFx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoIHNjcmlwdCwgaGVhZC5maXJzdENoaWxkICk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCBzY3JpcHQgKSB7XHJcblx0XHRcdFx0XHRcdHNjcmlwdC5vbmxvYWQoIHVuZGVmaW5lZCwgdHJ1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuXHJcblxyXG5cdHZhciBvbGRDYWxsYmFja3MgPSBbXSxcclxuXHRcdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XHJcblxyXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXHJcblx0alF1ZXJ5LmFqYXhTZXR1cCgge1xyXG5cdFx0anNvbnA6IFwiY2FsbGJhY2tcIixcclxuXHRcdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcclxuXHRcdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XHJcblx0XHRcdHJldHVybiBjYWxsYmFjaztcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcclxuXHRqUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0XHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXHJcblx0XHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XHJcblx0XHRcdFx0XHRcInVybFwiIDpcclxuXHRcdFx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcclxuXHRcdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxyXG5cdFx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxyXG5cdFx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XHJcblxyXG5cdFx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XHJcblx0XHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XHJcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxyXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcclxuXHRcdFx0aWYgKCBqc29uUHJvcCApIHtcclxuXHRcdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcclxuXHRcdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXHJcblx0XHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xyXG5cclxuXHRcdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xyXG5cdFx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxyXG5cdFx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcclxuXHRcdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXHJcblx0XHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcclxuXHRcdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXHJcblx0XHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2VcclxuXHRcdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xyXG5cdFx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0gKTtcclxuXHJcblx0XHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxyXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXHJcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XHJcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcclxuXHRqUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xyXG5cdFx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xyXG5cdFx0XHRjb250ZXh0ID0gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcclxuXHJcblx0XHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXHJcblx0XHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XHJcblxyXG5cdFx0Ly8gU2luZ2xlIHRhZ1xyXG5cdFx0aWYgKCBwYXJzZWQgKSB7XHJcblx0XHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XHJcblxyXG5cdFx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxuXHR9O1xyXG5cclxuXHJcbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcclxuXHR2YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcclxuXHJcblx0LyoqXHJcblx0ICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxyXG5cdCAqL1xyXG5cdGpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcclxuXHRcdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcclxuXHRcdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxyXG5cdFx0XHRzZWxmID0gdGhpcyxcclxuXHRcdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XHJcblxyXG5cdFx0aWYgKCBvZmYgPiAtMSApIHtcclxuXHRcdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKSApO1xyXG5cdFx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIGl0J3MgYSBmdW5jdGlvblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xyXG5cdFx0XHRjYWxsYmFjayA9IHBhcmFtcztcclxuXHRcdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xyXG5cdFx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdHR5cGUgPSBcIlBPU1RcIjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxyXG5cdFx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdGpRdWVyeS5hamF4KCB7XHJcblx0XHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXHJcblx0XHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXHJcblx0XHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXHJcblx0XHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0XHRkYXRhOiBwYXJhbXNcclxuXHRcdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xyXG5cclxuXHRcdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cclxuXHJcblx0XHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcclxuXHRcdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xyXG5cdFx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcclxuXHRcdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcclxuXHRcdFx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXHJcblx0XHRcdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxyXG5cdFx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcclxuXHRcdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cclxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcclxuXHRqUXVlcnkuZWFjaCggW1xyXG5cdFx0XCJhamF4U3RhcnRcIixcclxuXHRcdFwiYWpheFN0b3BcIixcclxuXHRcdFwiYWpheENvbXBsZXRlXCIsXHJcblx0XHRcImFqYXhFcnJvclwiLFxyXG5cdFx0XCJhamF4U3VjY2Vzc1wiLFxyXG5cdFx0XCJhamF4U2VuZFwiXHJcblx0XSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XHJcblx0XHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XHJcblx0XHR9O1xyXG5cdH0gKTtcclxuXHJcblxyXG5cclxuXHJcblx0alF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xyXG5cdFx0fSApLmxlbmd0aDtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgP1xyXG5cdFx0XHRlbGVtIDpcclxuXHRcdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XHJcblx0XHRcdFx0ZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6XHJcblx0XHRcdFx0ZmFsc2U7XHJcblx0fVxyXG5cclxuXHRqUXVlcnkub2Zmc2V0ID0ge1xyXG5cdFx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcclxuXHRcdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxyXG5cdFx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0XHRwcm9wcyA9IHt9O1xyXG5cclxuXHRcdFx0Ly8gc2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxyXG5cdFx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcclxuXHRcdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XHJcblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImF1dG9cIiwgWyBjdXJDU1NUb3AsIGN1ckNTU0xlZnQgXSApID4gLTE7XHJcblxyXG5cdFx0XHQvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdFxyXG5cdFx0XHQvLyBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcclxuXHRcdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcclxuXHRcdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcclxuXHRcdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XHJcblx0XHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXHJcblx0XHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XHJcblx0XHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XHJcblx0XHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0alF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdFx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdFx0dGhpcyA6XHJcblx0XHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZG9jRWxlbSwgd2luLFxyXG5cdFx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRcdGlmICggIWRvYyApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXHJcblx0XHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xyXG5cdFx0XHRcdHJldHVybiBib3g7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXHJcblx0XHRcdC8vIEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSlcclxuXHRcdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblx0XHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdHRvcDogYm94LnRvcCAgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCApICAtICggZG9jRWxlbS5jbGllbnRUb3AgIHx8IDAgKSxcclxuXHRcdFx0XHRsZWZ0OiBib3gubGVmdCArICggd2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsTGVmdCApIC0gKCBkb2NFbGVtLmNsaWVudExlZnQgfHwgMCApXHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhdGhpc1sgMCBdICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxyXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcclxuXHJcblx0XHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXHJcblx0XHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxyXG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHdlIGFzc3VtZSB0aGF0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBhdmFpbGFibGUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxyXG5cdFx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XHJcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcclxuXHJcblx0XHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xyXG5cdFx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XHJcblx0XHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXHJcblx0XHRcdC8vIG5vdGU6IHdoZW4gYW4gZWxlbWVudCBoYXMgbWFyZ2luOiBhdXRvIHRoZSBvZmZzZXRMZWZ0IGFuZCBtYXJnaW5MZWZ0XHJcblx0XHRcdC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0dG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxyXG5cdFx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJlxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xyXG5cdFx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcclxuXHRqUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XHJcblx0XHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcclxuXHJcblx0XHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xyXG5cdFx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiB3aW4gPyAoIHByb3AgaW4gd2luICkgPyB3aW5bIHByb3AgXSA6XHJcblx0XHRcdFx0XHRcdHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIG1ldGhvZCBdIDpcclxuXHRcdFx0XHRcdFx0ZWxlbVsgbWV0aG9kIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIHdpbiApIHtcclxuXHRcdFx0XHRcdHdpbi5zY3JvbGxUbyhcclxuXHRcdFx0XHRcdFx0IXRvcCA/IHZhbCA6IGpRdWVyeSggd2luICkuc2Nyb2xsTGVmdCgpLFxyXG5cdFx0XHRcdFx0XHR0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbFRvcCgpXHJcblx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xyXG5cdFx0fTtcclxuXHR9ICk7XHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmk8Ny04KywgQ2hyb21lPDM3LTQ0K1xyXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxyXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcclxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodFxyXG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZVxyXG5cdGpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xyXG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcclxuXHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xyXG5cclxuXHRcdFx0XHRcdC8vIGlmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxyXG5cdFx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cclxuXHRcdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcclxuXHRcdFx0XHRcdFx0Y29tcHV0ZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdH0gKTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxuXHRqUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XHJcblx0XHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXHJcblx0XHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xyXG5cclxuXHRcdFx0XHQvLyBtYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcclxuXHRcdFx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXHJcblx0XHRcdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRcdHZhciBkb2M7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxyXG5cdFx0XHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcclxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxyXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcclxuXHRcdFx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3RcclxuXHRcdFx0XHRcdFx0XHQvLyB1bmZvcnR1bmF0ZWx5LCB0aGlzIGNhdXNlcyBidWcgIzM4MzggaW4gSUU2Lzggb25seSxcclxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhlcmUgaXMgY3VycmVudGx5IG5vIGdvb2QsIHNtYWxsIHdheSB0byBmaXggaXQuXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxyXG5cdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxyXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcclxuXHRcdFx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSApO1xyXG5cdH0gKTtcclxuXHJcblxyXG5cdGpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0XHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XHJcblx0XHR9LFxyXG5cdFx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0XHR9LFxyXG5cdFx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XHJcblxyXG5cdFx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXHJcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cclxuXHRcdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcclxuXHRcdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcclxuXHRcdH1cclxuXHR9ICk7XHJcblxyXG4vLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldFxyXG5cdGpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGg7XHJcblx0fTtcclxuXHJcblx0alF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcclxuXHJcblxyXG5cclxuXHJcbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XHJcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxyXG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXHJcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxyXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcclxuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxyXG5cclxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcclxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxyXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXHJcblxyXG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0XHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0dmFyXHJcblxyXG5cdFx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcclxuXHJcblx0XHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG5cdFx0XyQgPSB3aW5kb3cuJDtcclxuXHJcblx0alF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcclxuXHRcdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcclxuXHRcdFx0d2luZG93LiQgPSBfJDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xyXG5cdFx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5O1xyXG5cdH07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluXHJcbi8vIEFNRCAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuXHRpZiAoICFub0dsb2JhbCApIHtcclxuXHRcdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn0pKTsiLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBmYW5jeUJveCB2My4yLjEwXHJcbi8vXHJcbi8vIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcclxuLy8gb3IgZmFuY3lCb3ggQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4vL1xyXG4vLyBodHRwOi8vZmFuY3lhcHBzLmNvbS9mYW5jeWJveC9cclxuLy8gQ29weXJpZ2h0IDIwMTcgZmFuY3lBcHBzXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiFmdW5jdGlvbih0LGUsbixvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3ZhciBlPW4odC5jdXJyZW50VGFyZ2V0KSxvPXQuZGF0YT90LmRhdGEub3B0aW9uczp7fSxpPWUuYXR0cihcImRhdGEtZmFuY3lib3hcIil8fFwiXCIsYT0wLHM9W107dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KHQucHJldmVudERlZmF1bHQoKSxpPyhzPW8uc2VsZWN0b3I/bihvLnNlbGVjdG9yKTp0LmRhdGE/dC5kYXRhLml0ZW1zOltdLHM9cy5sZW5ndGg/cy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94PVwiJytpKydcIl0nKTpuKCdbZGF0YS1mYW5jeWJveD1cIicraSsnXCJdJyksYT1zLmluZGV4KGUpLGE8MCYmKGE9MCkpOnM9W2VdLG4uZmFuY3lib3gub3BlbihzLG8sYSkpfWlmKG4pe2lmKG4uZm4uZmFuY3lib3gpcmV0dXJuIHZvaWQoXCJjb25zb2xlXCJpbiB0JiZjb25zb2xlLmxvZyhcImZhbmN5Qm94IGFscmVhZHkgaW5pdGlhbGl6ZWRcIikpO3ZhciBhPXtsb29wOiExLG1hcmdpbjpbNDQsMF0sZ3V0dGVyOjUwLGtleWJvYXJkOiEwLGFycm93czohMCxpbmZvYmFyOiEwLHRvb2xiYXI6ITAsYnV0dG9uczpbXCJzbGlkZVNob3dcIixcImZ1bGxTY3JlZW5cIixcInRodW1ic1wiLFwic2hhcmVcIixcImNsb3NlXCJdLGlkbGVUaW1lOjMsc21hbGxCdG46XCJhdXRvXCIscHJvdGVjdDohMSxtb2RhbDohMSxpbWFnZTp7cHJlbG9hZDpcImF1dG9cIn0sYWpheDp7c2V0dGluZ3M6e2RhdGE6e2ZhbmN5Ym94OiEwfX19LGlmcmFtZTp7dHBsOic8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBmcmFtZWJvcmRlcj1cIjBcIiB2c3BhY2U9XCIwXCIgaHNwYWNlPVwiMFwiIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dGdWxsU2NyZWVuIGFsbG93dHJhbnNwYXJlbmN5PVwidHJ1ZVwiIHNyYz1cIlwiPjwvaWZyYW1lPicscHJlbG9hZDohMCxjc3M6e30sYXR0cjp7c2Nyb2xsaW5nOlwiYXV0b1wifX0sZGVmYXVsdFR5cGU6XCJpbWFnZVwiLGFuaW1hdGlvbkVmZmVjdDpcInpvb21cIixhbmltYXRpb25EdXJhdGlvbjo1MDAsem9vbU9wYWNpdHk6XCJhdXRvXCIsdHJhbnNpdGlvbkVmZmVjdDpcImZhZGVcIix0cmFuc2l0aW9uRHVyYXRpb246MzY2LHNsaWRlQ2xhc3M6XCJcIixiYXNlQ2xhc3M6XCJcIixiYXNlVHBsOic8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGFpbmVyXCIgcm9sZT1cImRpYWxvZ1wiIHRhYmluZGV4PVwiLTFcIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtYmdcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5uZXJcIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5mb2JhclwiPjxzcGFuIGRhdGEtZmFuY3lib3gtaW5kZXg+PC9zcGFuPiZuYnNwOy8mbmJzcDs8c3BhbiBkYXRhLWZhbmN5Ym94LWNvdW50Pjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtdG9vbGJhclwiPnt7YnV0dG9uc319PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LW5hdmlnYXRpb25cIj57e2Fycm93c319PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LXN0YWdlXCI+PC9kaXY+PGRpdiBjbGFzcz1cImZhbmN5Ym94LWNhcHRpb24td3JhcFwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uXCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JyxzcGlubmVyVHBsOic8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbG9hZGluZ1wiPjwvZGl2PicsZXJyb3JUcGw6JzxkaXYgY2xhc3M9XCJmYW5jeWJveC1lcnJvclwiPjxwPnt7RVJST1J9fTxwPjwvZGl2PicsYnRuVHBsOntkb3dubG9hZDonPGEgZG93bmxvYWQgZGF0YS1mYW5jeWJveC1kb3dubG9hZCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWRvd25sb2FkXCIgdGl0bGU9XCJ7e0RPV05MT0FEfX1cIj48c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj48cGF0aCBkPVwiTTIwLDIzIEwyMCw4IEwyMCwyMyBMMTMsMTYgTDIwLDIzIEwyNywxNiBMMjAsMjMgTTI2LDI4IEwxMywyOCBMMjcsMjggTDE0LDI4XCIgLz48L3N2Zz48L2E+Jyx6b29tOic8YnV0dG9uIGRhdGEtZmFuY3lib3gtem9vbSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXpvb21cIiB0aXRsZT1cInt7Wk9PTX19XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+PHBhdGggZD1cIk0gMTgsMTcgbS04LDAgYSA4LDggMCAxLDAgMTYsMCBhIDgsOCAwIDEsMCAtMTYsMCBNMjUsMjMgTDMxLDI5IEwyNSwyM1wiIC8+PC9zdmc+PC9idXR0b24+JyxjbG9zZTonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tY2xvc2VcIiB0aXRsZT1cInt7Q0xPU0V9fVwiPjxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPjxwYXRoIGQ9XCJNMTAsMTAgTDMwLDMwIE0zMCwxMCBMMTAsMzBcIiAvPjwvc3ZnPjwvYnV0dG9uPicsc21hbGxCdG46JzxidXR0b24gZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWNsb3NlLXNtYWxsXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj48L2J1dHRvbj4nLGFycm93TGVmdDonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19sZWZ0XCIgdGl0bGU9XCJ7e1BSRVZ9fVwiPjxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPjxwYXRoIGQ9XCJNMTAsMjAgTDMwLDIwIEwxMCwyMCBMMTgsMjggTDEwLDIwIEwxOCwxMiBMMTAsMjBcIj48L3BhdGg+PC9zdmc+PC9idXR0b24+JyxhcnJvd1JpZ2h0Oic8YnV0dG9uIGRhdGEtZmFuY3lib3gtbmV4dCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X3JpZ2h0XCIgdGl0bGU9XCJ7e05FWFR9fVwiPjxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPjxwYXRoIGQ9XCJNMzAsMjAgTDEwLDIwIEwzMCwyMCBMMjIsMjggTDMwLDIwIEwyMiwxMiBMMzAsMjBcIj48L3BhdGg+PC9zdmc+PC9idXR0b24+J30scGFyZW50RWw6XCJib2R5XCIsYXV0b0ZvY3VzOiExLGJhY2tGb2N1czohMCx0cmFwRm9jdXM6ITAsZnVsbFNjcmVlbjp7YXV0b1N0YXJ0OiExfSx0b3VjaDp7dmVydGljYWw6ITAsbW9tZW50dW06ITB9LGhhc2g6bnVsbCxtZWRpYTp7fSxzbGlkZVNob3c6e2F1dG9TdGFydDohMSxzcGVlZDo0ZTN9LHRodW1iczp7YXV0b1N0YXJ0OiExLGhpZGVPbkNsb3NlOiEwLHBhcmVudEVsOlwiLmZhbmN5Ym94LWNvbnRhaW5lclwiLGF4aXM6XCJ5XCJ9LHdoZWVsOlwiYXV0b1wiLG9uSW5pdDpuLm5vb3AsYmVmb3JlTG9hZDpuLm5vb3AsYWZ0ZXJMb2FkOm4ubm9vcCxiZWZvcmVTaG93Om4ubm9vcCxhZnRlclNob3c6bi5ub29wLGJlZm9yZUNsb3NlOm4ubm9vcCxhZnRlckNsb3NlOm4ubm9vcCxvbkFjdGl2YXRlOm4ubm9vcCxvbkRlYWN0aXZhdGU6bi5ub29wLGNsaWNrQ29udGVudDpmdW5jdGlvbih0LGUpe3JldHVyblwiaW1hZ2VcIj09PXQudHlwZSYmXCJ6b29tXCJ9LGNsaWNrU2xpZGU6XCJjbG9zZVwiLGNsaWNrT3V0c2lkZTpcImNsb3NlXCIsZGJsY2xpY2tDb250ZW50OiExLGRibGNsaWNrU2xpZGU6ITEsZGJsY2xpY2tPdXRzaWRlOiExLG1vYmlsZTp7aWRsZVRpbWU6ITEsbWFyZ2luOjAsY2xpY2tDb250ZW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJpbWFnZVwiPT09dC50eXBlJiZcInRvZ2dsZUNvbnRyb2xzXCJ9LGNsaWNrU2xpZGU6ZnVuY3Rpb24odCxlKXtyZXR1cm5cImltYWdlXCI9PT10LnR5cGU/XCJ0b2dnbGVDb250cm9sc1wiOlwiY2xvc2VcIn0sZGJsY2xpY2tDb250ZW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJpbWFnZVwiPT09dC50eXBlJiZcInpvb21cIn0sZGJsY2xpY2tTbGlkZTpmdW5jdGlvbih0LGUpe3JldHVyblwiaW1hZ2VcIj09PXQudHlwZSYmXCJ6b29tXCJ9fSxsYW5nOlwiZW5cIixpMThuOntlbjp7Q0xPU0U6XCJDbG9zZVwiLE5FWFQ6XCJOZXh0XCIsUFJFVjpcIlByZXZpb3VzXCIsRVJST1I6XCJUaGUgcmVxdWVzdGVkIGNvbnRlbnQgY2Fubm90IGJlIGxvYWRlZC4gPGJyLz4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIixQTEFZX1NUQVJUOlwiU3RhcnQgc2xpZGVzaG93XCIsUExBWV9TVE9QOlwiUGF1c2Ugc2xpZGVzaG93XCIsRlVMTF9TQ1JFRU46XCJGdWxsIHNjcmVlblwiLFRIVU1CUzpcIlRodW1ibmFpbHNcIixET1dOTE9BRDpcIkRvd25sb2FkXCIsU0hBUkU6XCJTaGFyZVwiLFpPT006XCJab29tXCJ9LGRlOntDTE9TRTpcIlNjaGxpZXNzZW5cIixORVhUOlwiV2VpdGVyXCIsUFJFVjpcIlp1csO8Y2tcIixFUlJPUjpcIkRpZSBhbmdlZm9yZGVydGVuIERhdGVuIGtvbm50ZW4gbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIDxici8+IEJpdHRlIHZlcnN1Y2hlbiBTaWUgZXMgc3DDpHRlciBub2NobWFsLlwiLFBMQVlfU1RBUlQ6XCJEaWFzY2hhdSBzdGFydGVuXCIsUExBWV9TVE9QOlwiRGlhc2NoYXUgYmVlbmRlblwiLEZVTExfU0NSRUVOOlwiVm9sbGJpbGRcIixUSFVNQlM6XCJWb3JzY2hhdWJpbGRlclwiLERPV05MT0FEOlwiSGVydW50ZXJsYWRlblwiLFNIQVJFOlwiVGVpbGVuXCIsWk9PTTpcIk1hw59zdGFiXCJ9fX0scz1uKHQpLHI9bihlKSxjPTAsbD1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5oYXNPd25Qcm9wZXJ0eSYmdCBpbnN0YW5jZW9mIG59LHU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbihlKXtyZXR1cm4gdC5zZXRUaW1lb3V0KGUsMWUzLzYwKX19KCksZD1mdW5jdGlvbigpe3ZhciB0LG49ZS5jcmVhdGVFbGVtZW50KFwiZmFrZWVsZW1lbnRcIiksaT17dHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixPVHJhbnNpdGlvbjpcIm9UcmFuc2l0aW9uRW5kXCIsTW96VHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixXZWJraXRUcmFuc2l0aW9uOlwid2Via2l0VHJhbnNpdGlvbkVuZFwifTtmb3IodCBpbiBpKWlmKG4uc3R5bGVbdF0hPT1vKXJldHVybiBpW3RdO3JldHVyblwidHJhbnNpdGlvbmVuZFwifSgpLGY9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQubGVuZ3RoJiZ0WzBdLm9mZnNldEhlaWdodH0scD1mdW5jdGlvbih0LG8saSl7dmFyIGE9dGhpczthLm9wdHM9bi5leHRlbmQoITAse2luZGV4Oml9LG4uZmFuY3lib3guZGVmYXVsdHMsb3x8e30pLG4uZmFuY3lib3guaXNNb2JpbGUmJihhLm9wdHM9bi5leHRlbmQoITAse30sYS5vcHRzLGEub3B0cy5tb2JpbGUpKSxvJiZuLmlzQXJyYXkoby5idXR0b25zKSYmKGEub3B0cy5idXR0b25zPW8uYnV0dG9ucyksYS5pZD1hLm9wdHMuaWR8fCsrYyxhLmdyb3VwPVtdLGEuY3VyckluZGV4PXBhcnNlSW50KGEub3B0cy5pbmRleCwxMCl8fDAsYS5wcmV2SW5kZXg9bnVsbCxhLnByZXZQb3M9bnVsbCxhLmN1cnJQb3M9MCxhLmZpcnN0UnVuPW51bGwsYS5jcmVhdGVHcm91cCh0KSxhLmdyb3VwLmxlbmd0aCYmKGEuJGxhc3RGb2N1cz1uKGUuYWN0aXZlRWxlbWVudCkuYmx1cigpLGEuc2xpZGVzPXt9LGEuaW5pdCgpKX07bi5leHRlbmQocC5wcm90b3R5cGUse2luaXQ6ZnVuY3Rpb24oKXt2YXIgaSxhLHMsYz10aGlzLGw9Yy5ncm91cFtjLmN1cnJJbmRleF0sdT1sLm9wdHMsZD1uLmZhbmN5Ym94LnNjcm9sbGJhcldpZHRoO2Muc2Nyb2xsVG9wPXIuc2Nyb2xsVG9wKCksYy5zY3JvbGxMZWZ0PXIuc2Nyb2xsTGVmdCgpLG4uZmFuY3lib3guZ2V0SW5zdGFuY2UoKXx8KG4oXCJib2R5XCIpLmFkZENsYXNzKFwiZmFuY3lib3gtYWN0aXZlXCIpLC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhdC5NU1N0cmVhbT9cImltYWdlXCIhPT1sLnR5cGUmJm4oXCJib2R5XCIpLmNzcyhcInRvcFwiLG4oXCJib2R5XCIpLnNjcm9sbFRvcCgpKi0xKS5hZGRDbGFzcyhcImZhbmN5Ym94LWlvc2ZpeFwiKTohbi5mYW5jeWJveC5pc01vYmlsZSYmZS5ib2R5LnNjcm9sbEhlaWdodD50LmlubmVySGVpZ2h0JiYoZD09PW8mJihpPW4oJzxkaXYgc3R5bGU9XCJ3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OnNjcm9sbDtcIiAvPicpLmFwcGVuZFRvKFwiYm9keVwiKSxkPW4uZmFuY3lib3guc2Nyb2xsYmFyV2lkdGg9aVswXS5vZmZzZXRXaWR0aC1pWzBdLmNsaWVudFdpZHRoLGkucmVtb3ZlKCkpLG4oXCJoZWFkXCIpLmFwcGVuZCgnPHN0eWxlIGlkPVwiZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIiB0eXBlPVwidGV4dC9jc3NcIj4uY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyIHsgbWFyZ2luLXJpZ2h0OiAnK2QrXCJweDsgfTwvc3R5bGU+XCIpLG4oXCJib2R5XCIpLmFkZENsYXNzKFwiY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyXCIpKSkscz1cIlwiLG4uZWFjaCh1LmJ1dHRvbnMsZnVuY3Rpb24odCxlKXtzKz11LmJ0blRwbFtlXXx8XCJcIn0pLGE9bihjLnRyYW5zbGF0ZShjLHUuYmFzZVRwbC5yZXBsYWNlKFwie3tidXR0b25zfX1cIixzKS5yZXBsYWNlKFwie3thcnJvd3N9fVwiLHUuYnRuVHBsLmFycm93TGVmdCt1LmJ0blRwbC5hcnJvd1JpZ2h0KSkpLmF0dHIoXCJpZFwiLFwiZmFuY3lib3gtY29udGFpbmVyLVwiK2MuaWQpLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLmFkZENsYXNzKHUuYmFzZUNsYXNzKS5kYXRhKFwiRmFuY3lCb3hcIixjKS5hcHBlbmRUbyh1LnBhcmVudEVsKSxjLiRyZWZzPXtjb250YWluZXI6YX0sW1wiYmdcIixcImlubmVyXCIsXCJpbmZvYmFyXCIsXCJ0b29sYmFyXCIsXCJzdGFnZVwiLFwiY2FwdGlvblwiLFwibmF2aWdhdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2MuJHJlZnNbdF09YS5maW5kKFwiLmZhbmN5Ym94LVwiK3QpfSksYy50cmlnZ2VyKFwib25Jbml0XCIpLGMuYWN0aXZhdGUoKSxjLmp1bXBUbyhjLmN1cnJJbmRleCl9LHRyYW5zbGF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXQub3B0cy5pMThuW3Qub3B0cy5sYW5nXTtyZXR1cm4gZS5yZXBsYWNlKC9cXHtcXHsoXFx3KylcXH1cXH0vZyxmdW5jdGlvbih0LGUpe3ZhciBpPW5bZV07cmV0dXJuIGk9PT1vP3Q6aX0pfSxjcmVhdGVHcm91cDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLGk9bi5tYWtlQXJyYXkodCk7bi5lYWNoKGksZnVuY3Rpb24odCxpKXt2YXIgYSxzLHIsYyxsLHU9e30sZD17fTtuLmlzUGxhaW5PYmplY3QoaSk/KHU9aSxkPWkub3B0c3x8aSk6XCJvYmplY3RcIj09PW4udHlwZShpKSYmbihpKS5sZW5ndGg/KGE9bihpKSxkPWEuZGF0YSgpLGQ9bi5leHRlbmQoe30sZCxkLm9wdGlvbnN8fHt9KSxkLiRvcmlnPWEsdS5zcmM9ZC5zcmN8fGEuYXR0cihcImhyZWZcIiksdS50eXBlfHx1LnNyY3x8KHUudHlwZT1cImlubGluZVwiLHUuc3JjPWkpKTp1PXt0eXBlOlwiaHRtbFwiLHNyYzppK1wiXCJ9LHUub3B0cz1uLmV4dGVuZCghMCx7fSxlLm9wdHMsZCksbi5pc0FycmF5KGQuYnV0dG9ucykmJih1Lm9wdHMuYnV0dG9ucz1kLmJ1dHRvbnMpLHM9dS50eXBlfHx1Lm9wdHMudHlwZSxjPXUuc3JjfHxcIlwiLCFzJiZjJiYoYy5tYXRjaCgvKF5kYXRhOmltYWdlXFwvW2EtejAtOStcXC89XSosKXwoXFwuKGpwKGV8Z3xlZyl8Z2lmfHBuZ3xibXB8d2VicHxzdmd8aWNvKSgoXFw/fCMpLiopPyQpL2kpP3M9XCJpbWFnZVwiOmMubWF0Y2goL1xcLihwZGYpKChcXD98IykuKik/JC9pKT9zPVwicGRmXCI6KHI9Yy5tYXRjaCgvXFwuKG1wNHxtb3Z8b2d2KSgoXFw/fCMpLiopPyQvaSkpPyhzPVwidmlkZW9cIix1Lm9wdHMudmlkZW9Gb3JtYXR8fCh1Lm9wdHMudmlkZW9Gb3JtYXQ9XCJ2aWRlby9cIisoXCJvZ3ZcIj09PXJbMV0/XCJvZ2dcIjpyWzFdKSkpOlwiI1wiPT09Yy5jaGFyQXQoMCkmJihzPVwiaW5saW5lXCIpKSxzP3UudHlwZT1zOmUudHJpZ2dlcihcIm9iamVjdE5lZWRzVHlwZVwiLHUpLHUuaW5kZXg9ZS5ncm91cC5sZW5ndGgsdS5vcHRzLiRvcmlnJiYhdS5vcHRzLiRvcmlnLmxlbmd0aCYmZGVsZXRlIHUub3B0cy4kb3JpZywhdS5vcHRzLiR0aHVtYiYmdS5vcHRzLiRvcmlnJiYodS5vcHRzLiR0aHVtYj11Lm9wdHMuJG9yaWcuZmluZChcImltZzpmaXJzdFwiKSksdS5vcHRzLiR0aHVtYiYmIXUub3B0cy4kdGh1bWIubGVuZ3RoJiZkZWxldGUgdS5vcHRzLiR0aHVtYixcImZ1bmN0aW9uXCI9PT1uLnR5cGUodS5vcHRzLmNhcHRpb24pJiYodS5vcHRzLmNhcHRpb249dS5vcHRzLmNhcHRpb24uYXBwbHkoaSxbZSx1XSkpLFwiZnVuY3Rpb25cIj09PW4udHlwZShlLm9wdHMuY2FwdGlvbikmJih1Lm9wdHMuY2FwdGlvbj1lLm9wdHMuY2FwdGlvbi5hcHBseShpLFtlLHVdKSksdS5vcHRzLmNhcHRpb24gaW5zdGFuY2VvZiBufHwodS5vcHRzLmNhcHRpb249dS5vcHRzLmNhcHRpb249PT1vP1wiXCI6dS5vcHRzLmNhcHRpb24rXCJcIiksXCJhamF4XCI9PT1zJiYobD1jLnNwbGl0KC9cXHMrLywyKSxsLmxlbmd0aD4xJiYodS5zcmM9bC5zaGlmdCgpLHUub3B0cy5maWx0ZXI9bC5zaGlmdCgpKSksXCJhdXRvXCI9PXUub3B0cy5zbWFsbEJ0biYmKG4uaW5BcnJheShzLFtcImh0bWxcIixcImlubGluZVwiLFwiYWpheFwiXSk+LTE/KHUub3B0cy50b29sYmFyPSExLHUub3B0cy5zbWFsbEJ0bj0hMCk6dS5vcHRzLnNtYWxsQnRuPSExKSxcInBkZlwiPT09cyYmKHUudHlwZT1cImlmcmFtZVwiLHUub3B0cy5pZnJhbWUucHJlbG9hZD0hMSksdS5vcHRzLm1vZGFsJiYodS5vcHRzPW4uZXh0ZW5kKCEwLHUub3B0cyx7aW5mb2JhcjowLHRvb2xiYXI6MCxzbWFsbEJ0bjowLGtleWJvYXJkOjAsc2xpZGVTaG93OjAsZnVsbFNjcmVlbjowLHRodW1iczowLHRvdWNoOjAsY2xpY2tDb250ZW50OiExLGNsaWNrU2xpZGU6ITEsY2xpY2tPdXRzaWRlOiExLGRibGNsaWNrQ29udGVudDohMSxkYmxjbGlja1NsaWRlOiExLGRibGNsaWNrT3V0c2lkZTohMX0pKSxlLmdyb3VwLnB1c2godSl9KX0sYWRkRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIG89dGhpcztvLnJlbW92ZUV2ZW50cygpLG8uJHJlZnMuY29udGFpbmVyLm9uKFwiY2xpY2suZmItY2xvc2VcIixcIltkYXRhLWZhbmN5Ym94LWNsb3NlXVwiLGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLG8uY2xvc2UodCl9KS5vbihcImNsaWNrLmZiLXByZXYgdG91Y2hlbmQuZmItcHJldlwiLFwiW2RhdGEtZmFuY3lib3gtcHJldl1cIixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSxvLnByZXZpb3VzKCl9KS5vbihcImNsaWNrLmZiLW5leHQgdG91Y2hlbmQuZmItbmV4dFwiLFwiW2RhdGEtZmFuY3lib3gtbmV4dF1cIixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSxvLm5leHQoKX0pLm9uKFwiY2xpY2suZmJcIixcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIsZnVuY3Rpb24odCl7b1tvLmlzU2NhbGVkRG93bigpP1wic2NhbGVUb0FjdHVhbFwiOlwic2NhbGVUb0ZpdFwiXSgpfSkscy5vbihcIm9yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYlwiLGZ1bmN0aW9uKHQpe3QmJnQub3JpZ2luYWxFdmVudCYmXCJyZXNpemVcIj09PXQub3JpZ2luYWxFdmVudC50eXBlP3UoZnVuY3Rpb24oKXtvLnVwZGF0ZSgpfSk6KG8uJHJlZnMuc3RhZ2UuaGlkZSgpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLiRyZWZzLnN0YWdlLnNob3coKSxvLnVwZGF0ZSgpfSw2MDApKX0pLHIub24oXCJmb2N1c2luLmZiXCIsZnVuY3Rpb24odCl7dmFyIGk9bi5mYW5jeWJveD9uLmZhbmN5Ym94LmdldEluc3RhbmNlKCk6bnVsbDtpLmlzQ2xvc2luZ3x8IWkuY3VycmVudHx8IWkuY3VycmVudC5vcHRzLnRyYXBGb2N1c3x8bih0LnRhcmdldCkuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250YWluZXJcIil8fG4odC50YXJnZXQpLmlzKGUpfHxpJiZcImZpeGVkXCIhPT1uKHQudGFyZ2V0KS5jc3MoXCJwb3NpdGlvblwiKSYmIWkuJHJlZnMuY29udGFpbmVyLmhhcyh0LnRhcmdldCkubGVuZ3RoJiYodC5zdG9wUHJvcGFnYXRpb24oKSxpLmZvY3VzKCkscy5zY3JvbGxUb3Aoby5zY3JvbGxUb3ApLnNjcm9sbExlZnQoby5zY3JvbGxMZWZ0KSl9KSxyLm9uKFwia2V5ZG93bi5mYlwiLGZ1bmN0aW9uKHQpe3ZhciBlPW8uY3VycmVudCxpPXQua2V5Q29kZXx8dC53aGljaDtpZihlJiZlLm9wdHMua2V5Ym9hcmQmJiFuKHQudGFyZ2V0KS5pcyhcImlucHV0XCIpJiYhbih0LnRhcmdldCkuaXMoXCJ0ZXh0YXJlYVwiKSlyZXR1cm4gOD09PWl8fDI3PT09aT8odC5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgby5jbG9zZSh0KSk6Mzc9PT1pfHwzOD09PWk/KHQucHJldmVudERlZmF1bHQoKSx2b2lkIG8ucHJldmlvdXMoKSk6Mzk9PT1pfHw0MD09PWk/KHQucHJldmVudERlZmF1bHQoKSx2b2lkIG8ubmV4dCgpKTp2b2lkIG8udHJpZ2dlcihcImFmdGVyS2V5ZG93blwiLHQsaSl9KSxvLmdyb3VwW28uY3VyckluZGV4XS5vcHRzLmlkbGVUaW1lJiYoby5pZGxlU2Vjb25kc0NvdW50ZXI9MCxyLm9uKFwibW91c2Vtb3ZlLmZiLWlkbGUgbW91c2VsZWF2ZS5mYi1pZGxlIG1vdXNlZG93bi5mYi1pZGxlIHRvdWNoc3RhcnQuZmItaWRsZSB0b3VjaG1vdmUuZmItaWRsZSBzY3JvbGwuZmItaWRsZSBrZXlkb3duLmZiLWlkbGVcIixmdW5jdGlvbih0KXtvLmlkbGVTZWNvbmRzQ291bnRlcj0wLG8uaXNJZGxlJiZvLnNob3dDb250cm9scygpLG8uaXNJZGxlPSExfSksby5pZGxlSW50ZXJ2YWw9dC5zZXRJbnRlcnZhbChmdW5jdGlvbigpe28uaWRsZVNlY29uZHNDb3VudGVyKyssby5pZGxlU2Vjb25kc0NvdW50ZXI+PW8uZ3JvdXBbby5jdXJySW5kZXhdLm9wdHMuaWRsZVRpbWUmJiFvLmlzRHJhZ2dpbmcmJihvLmlzSWRsZT0hMCxvLmlkbGVTZWNvbmRzQ291bnRlcj0wLG8uaGlkZUNvbnRyb2xzKCkpfSwxZTMpKX0scmVtb3ZlRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztzLm9mZihcIm9yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYlwiKSxyLm9mZihcImZvY3VzaW4uZmIga2V5ZG93bi5mYiAuZmItaWRsZVwiKSx0aGlzLiRyZWZzLmNvbnRhaW5lci5vZmYoXCIuZmItY2xvc2UgLmZiLXByZXYgLmZiLW5leHRcIiksZS5pZGxlSW50ZXJ2YWwmJih0LmNsZWFySW50ZXJ2YWwoZS5pZGxlSW50ZXJ2YWwpLGUuaWRsZUludGVydmFsPW51bGwpfSxwcmV2aW91czpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5qdW1wVG8odGhpcy5jdXJyUG9zLTEsdCl9LG5leHQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuanVtcFRvKHRoaXMuY3VyclBvcysxLHQpfSxqdW1wVG86ZnVuY3Rpb24odCxlLGkpe3ZhciBhLHMscixjLGwsdSxkLHA9dGhpcyxoPXAuZ3JvdXAubGVuZ3RoO2lmKCEocC5pc0RyYWdnaW5nfHxwLmlzQ2xvc2luZ3x8cC5pc0FuaW1hdGluZyYmcC5maXJzdFJ1bikpe2lmKHQ9cGFyc2VJbnQodCwxMCkscz1wLmN1cnJlbnQ/cC5jdXJyZW50Lm9wdHMubG9vcDpwLm9wdHMubG9vcCwhcyYmKHQ8MHx8dD49aCkpcmV0dXJuITE7aWYoYT1wLmZpcnN0UnVuPW51bGw9PT1wLmZpcnN0UnVuLCEoaDwyJiYhYSYmcC5pc0RyYWdnaW5nKSl7aWYoYz1wLmN1cnJlbnQscC5wcmV2SW5kZXg9cC5jdXJySW5kZXgscC5wcmV2UG9zPXAuY3VyclBvcyxyPXAuY3JlYXRlU2xpZGUodCksaD4xJiYoKHN8fHIuaW5kZXg+MCkmJnAuY3JlYXRlU2xpZGUodC0xKSwoc3x8ci5pbmRleDxoLTEpJiZwLmNyZWF0ZVNsaWRlKHQrMSkpLHAuY3VycmVudD1yLHAuY3VyckluZGV4PXIuaW5kZXgscC5jdXJyUG9zPXIucG9zLHAudHJpZ2dlcihcImJlZm9yZVNob3dcIixhKSxwLnVwZGF0ZUNvbnRyb2xzKCksdT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShyLiRzbGlkZSksci5pc01vdmVkPSgwIT09dS5sZWZ0fHwwIT09dS50b3ApJiYhci4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSxyLmZvcmNlZER1cmF0aW9uPW8sbi5pc051bWVyaWMoZSk/ci5mb3JjZWREdXJhdGlvbj1lOmU9ci5vcHRzW2E/XCJhbmltYXRpb25EdXJhdGlvblwiOlwidHJhbnNpdGlvbkR1cmF0aW9uXCJdLGU9cGFyc2VJbnQoZSwxMCksYSlyZXR1cm4gci5vcHRzLmFuaW1hdGlvbkVmZmVjdCYmZSYmcC4kcmVmcy5jb250YWluZXIuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLGUrXCJtc1wiKSxwLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKSxmKHAuJHJlZnMuY29udGFpbmVyKSxwLiRyZWZzLmNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIiksci4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKSxwLmxvYWRTbGlkZShyKSx2b2lkIHAucHJlbG9hZChcImltYWdlXCIpO24uZWFjaChwLnNsaWRlcyxmdW5jdGlvbih0LGUpe24uZmFuY3lib3guc3RvcChlLiRzbGlkZSl9KSxyLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpLHIuaXNNb3ZlZD8obD1NYXRoLnJvdW5kKHIuJHNsaWRlLndpZHRoKCkpLG4uZWFjaChwLnNsaWRlcyxmdW5jdGlvbih0LG8pe3ZhciBpPW8ucG9zLXIucG9zO24uZmFuY3lib3guYW5pbWF0ZShvLiRzbGlkZSx7dG9wOjAsbGVmdDppKmwraSpvLm9wdHMuZ3V0dGVyfSxlLGZ1bmN0aW9uKCl7by4kc2xpZGUucmVtb3ZlQXR0cihcInN0eWxlXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLG8ucG9zPT09cC5jdXJyUG9zJiYoci5pc01vdmVkPSExLHAuY29tcGxldGUoKSl9KX0pKTpwLiRyZWZzLnN0YWdlLmNoaWxkcmVuKCkucmVtb3ZlQXR0cihcInN0eWxlXCIpLHIuaXNMb2FkZWQ/cC5yZXZlYWxDb250ZW50KHIpOnAubG9hZFNsaWRlKHIpLHAucHJlbG9hZChcImltYWdlXCIpLGMucG9zIT09ci5wb3MmJihkPVwiZmFuY3lib3gtc2xpZGUtLVwiKyhjLnBvcz5yLnBvcz9cIm5leHRcIjpcInByZXZpb3VzXCIpLGMuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1jdXJyZW50IGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKSxjLmlzQ29tcGxldGU9ITEsZSYmKHIuaXNNb3ZlZHx8ci5vcHRzLnRyYW5zaXRpb25FZmZlY3QpJiYoci5pc01vdmVkP2MuJHNsaWRlLmFkZENsYXNzKGQpOihkPVwiZmFuY3lib3gtYW5pbWF0ZWQgXCIrZCtcIiBmYW5jeWJveC1meC1cIityLm9wdHMudHJhbnNpdGlvbkVmZmVjdCxuLmZhbmN5Ym94LmFuaW1hdGUoYy4kc2xpZGUsZCxlLGZ1bmN0aW9uKCl7Yy4kc2xpZGUucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihcInN0eWxlXCIpfSkpKSl9fX0sY3JlYXRlU2xpZGU6ZnVuY3Rpb24odCl7dmFyIGUsbyxpPXRoaXM7cmV0dXJuIG89dCVpLmdyb3VwLmxlbmd0aCxvPW88MD9pLmdyb3VwLmxlbmd0aCtvOm8sIWkuc2xpZGVzW3RdJiZpLmdyb3VwW29dJiYoZT1uKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2xpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyhpLiRyZWZzLnN0YWdlKSxpLnNsaWRlc1t0XT1uLmV4dGVuZCghMCx7fSxpLmdyb3VwW29dLHtwb3M6dCwkc2xpZGU6ZSxpc0xvYWRlZDohMX0pLGkudXBkYXRlU2xpZGUoaS5zbGlkZXNbdF0pKSxpLnNsaWRlc1t0XX0sc2NhbGVUb0FjdHVhbDpmdW5jdGlvbih0LGUsaSl7dmFyIGEscyxyLGMsbCx1PXRoaXMsZD11LmN1cnJlbnQsZj1kLiRjb250ZW50LHA9cGFyc2VJbnQoZC4kc2xpZGUud2lkdGgoKSwxMCksaD1wYXJzZUludChkLiRzbGlkZS5oZWlnaHQoKSwxMCksZz1kLndpZHRoLGI9ZC5oZWlnaHQ7XCJpbWFnZVwiIT1kLnR5cGV8fGQuaGFzRXJyb3J8fCFmfHx1LmlzQW5pbWF0aW5nfHwobi5mYW5jeWJveC5zdG9wKGYpLHUuaXNBbmltYXRpbmc9ITAsdD10PT09bz8uNSpwOnQsZT1lPT09bz8uNSpoOmUsYT1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShmKSxjPWcvYS53aWR0aCxsPWIvYS5oZWlnaHQscz0uNSpwLS41Kmcscj0uNSpoLS41KmIsZz5wJiYocz1hLmxlZnQqYy0odCpjLXQpLHM+MCYmKHM9MCksczxwLWcmJihzPXAtZykpLGI+aCYmKHI9YS50b3AqbC0oZSpsLWUpLHI+MCYmKHI9MCkscjxoLWImJihyPWgtYikpLHUudXBkYXRlQ3Vyc29yKGcsYiksbi5mYW5jeWJveC5hbmltYXRlKGYse3RvcDpyLGxlZnQ6cyxzY2FsZVg6YyxzY2FsZVk6bH0saXx8MzMwLGZ1bmN0aW9uKCl7dS5pc0FuaW1hdGluZz0hMX0pLHUuU2xpZGVTaG93JiZ1LlNsaWRlU2hvdy5pc0FjdGl2ZSYmdS5TbGlkZVNob3cuc3RvcCgpKX0sc2NhbGVUb0ZpdDpmdW5jdGlvbih0KXt2YXIgZSxvPXRoaXMsaT1vLmN1cnJlbnQsYT1pLiRjb250ZW50O1wiaW1hZ2VcIiE9aS50eXBlfHxpLmhhc0Vycm9yfHwhYXx8by5pc0FuaW1hdGluZ3x8KG4uZmFuY3lib3guc3RvcChhKSxvLmlzQW5pbWF0aW5nPSEwLGU9by5nZXRGaXRQb3MoaSksby51cGRhdGVDdXJzb3IoZS53aWR0aCxlLmhlaWdodCksbi5mYW5jeWJveC5hbmltYXRlKGEse3RvcDplLnRvcCxsZWZ0OmUubGVmdCxzY2FsZVg6ZS53aWR0aC9hLndpZHRoKCksc2NhbGVZOmUuaGVpZ2h0L2EuaGVpZ2h0KCl9LHR8fDMzMCxmdW5jdGlvbigpe28uaXNBbmltYXRpbmc9ITF9KSl9LGdldEZpdFBvczpmdW5jdGlvbih0KXt2YXIgZSxvLGksYSxzLHI9dGhpcyxjPXQuJGNvbnRlbnQsbD10LndpZHRoLHU9dC5oZWlnaHQsZD10Lm9wdHMubWFyZ2luO3JldHVybiEoIWN8fCFjLmxlbmd0aHx8IWwmJiF1KSYmKFwibnVtYmVyXCI9PT1uLnR5cGUoZCkmJihkPVtkLGRdKSwyPT1kLmxlbmd0aCYmKGQ9W2RbMF0sZFsxXSxkWzBdLGRbMV1dKSxlPXBhcnNlSW50KHIuJHJlZnMuc3RhZ2Uud2lkdGgoKSwxMCktKGRbMV0rZFszXSksbz1wYXJzZUludChyLiRyZWZzLnN0YWdlLmhlaWdodCgpLDEwKS0oZFswXStkWzJdKSxpPU1hdGgubWluKDEsZS9sLG8vdSksYT1NYXRoLmZsb29yKGkqbCkscz1NYXRoLmZsb29yKGkqdSkse3RvcDpNYXRoLmZsb29yKC41KihvLXMpKStkWzBdLGxlZnQ6TWF0aC5mbG9vciguNSooZS1hKSkrZFszXSx3aWR0aDphLGhlaWdodDpzfSl9LHVwZGF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7bi5lYWNoKHQuc2xpZGVzLGZ1bmN0aW9uKGUsbil7dC51cGRhdGVTbGlkZShuKX0pfSx1cGRhdGVTbGlkZTpmdW5jdGlvbih0LGUpe3ZhciBvPXRoaXMsaT10JiZ0LiRjb250ZW50O2kmJih0LndpZHRofHx0LmhlaWdodCkmJihvLmlzQW5pbWF0aW5nPSExLG4uZmFuY3lib3guc3RvcChpKSxuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShpLG8uZ2V0Rml0UG9zKHQpKSx0LnBvcz09PW8uY3VyclBvcyYmby51cGRhdGVDdXJzb3IoKSksdC4kc2xpZGUudHJpZ2dlcihcInJlZnJlc2hcIiksby50cmlnZ2VyKFwib25VcGRhdGVcIix0KX0sY2VudGVyU2xpZGU6ZnVuY3Rpb24odCxlKXt2YXIgaSxhLHM9dGhpcztzLmN1cnJlbnQmJihpPU1hdGgucm91bmQodC4kc2xpZGUud2lkdGgoKSksYT10LnBvcy1zLmN1cnJlbnQucG9zLG4uZmFuY3lib3guYW5pbWF0ZSh0LiRzbGlkZSx7dG9wOjAsbGVmdDphKmkrYSp0Lm9wdHMuZ3V0dGVyLG9wYWNpdHk6MX0sZT09PW8/MDplLG51bGwsITEpKX0sdXBkYXRlQ3Vyc29yOmZ1bmN0aW9uKHQsZSl7dmFyIG4saT10aGlzLGE9aS4kcmVmcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy16b29tYWJsZSBmYW5jeWJveC1jYW4tem9vbUluIGZhbmN5Ym94LWNhbi1kcmFnIGZhbmN5Ym94LWNhbi16b29tT3V0XCIpO2kuY3VycmVudCYmIWkuaXNDbG9zaW5nJiYoaS5pc1pvb21hYmxlKCk/KGEuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy16b29tYWJsZVwiKSxuPXQhPT1vJiZlIT09bz90PGkuY3VycmVudC53aWR0aCYmZTxpLmN1cnJlbnQuaGVpZ2h0OmkuaXNTY2FsZWREb3duKCksbj9hLmFkZENsYXNzKFwiZmFuY3lib3gtY2FuLXpvb21JblwiKTppLmN1cnJlbnQub3B0cy50b3VjaD9hLmFkZENsYXNzKFwiZmFuY3lib3gtY2FuLWRyYWdcIik6YS5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi16b29tT3V0XCIpKTppLmN1cnJlbnQub3B0cy50b3VjaCYmYS5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi1kcmFnXCIpKX0saXNab29tYWJsZTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcyxvPWUuY3VycmVudDtpZihvJiYhZS5pc0Nsb3NpbmcpcmV0dXJuISEoXCJpbWFnZVwiPT09by50eXBlJiZvLmlzTG9hZGVkJiYhby5oYXNFcnJvciYmKFwiem9vbVwiPT09by5vcHRzLmNsaWNrQ29udGVudHx8bi5pc0Z1bmN0aW9uKG8ub3B0cy5jbGlja0NvbnRlbnQpJiZcInpvb21cIj09PW8ub3B0cy5jbGlja0NvbnRlbnQobykpJiYodD1lLmdldEZpdFBvcyhvKSxvLndpZHRoPnQud2lkdGh8fG8uaGVpZ2h0PnQuaGVpZ2h0KSl9LGlzU2NhbGVkRG93bjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LmN1cnJlbnQsbz1lLiRjb250ZW50LGk9ITE7cmV0dXJuIG8mJihpPW4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKG8pLGk9aS53aWR0aDxlLndpZHRofHxpLmhlaWdodDxlLmhlaWdodCksaX0sY2FuUGFuOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuY3VycmVudCxuPWUuJGNvbnRlbnQsbz0hMTtyZXR1cm4gbiYmKG89dC5nZXRGaXRQb3MoZSksbz1NYXRoLmFicyhuLndpZHRoKCktby53aWR0aCk+MXx8TWF0aC5hYnMobi5oZWlnaHQoKS1vLmhlaWdodCk+MSksb30sbG9hZFNsaWRlOmZ1bmN0aW9uKHQpe3ZhciBlLG8saSxhPXRoaXM7aWYoIXQuaXNMb2FkaW5nJiYhdC5pc0xvYWRlZCl7c3dpdGNoKHQuaXNMb2FkaW5nPSEwLGEudHJpZ2dlcihcImJlZm9yZUxvYWRcIix0KSxlPXQudHlwZSxvPXQuJHNsaWRlLG8ub2ZmKFwicmVmcmVzaFwiKS50cmlnZ2VyKFwib25SZXNldFwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIisoZXx8XCJ1bmtub3duXCIpKS5hZGRDbGFzcyh0Lm9wdHMuc2xpZGVDbGFzcyksZSl7Y2FzZVwiaW1hZ2VcIjphLnNldEltYWdlKHQpO2JyZWFrO2Nhc2VcImlmcmFtZVwiOmEuc2V0SWZyYW1lKHQpO2JyZWFrO2Nhc2VcImh0bWxcIjphLnNldENvbnRlbnQodCx0LnNyY3x8dC5jb250ZW50KTticmVhaztjYXNlXCJpbmxpbmVcIjpuKHQuc3JjKS5sZW5ndGg/YS5zZXRDb250ZW50KHQsbih0LnNyYykpOmEuc2V0RXJyb3IodCk7YnJlYWs7Y2FzZVwiYWpheFwiOmEuc2hvd0xvYWRpbmcodCksaT1uLmFqYXgobi5leHRlbmQoe30sdC5vcHRzLmFqYXguc2V0dGluZ3Mse3VybDp0LnNyYyxzdWNjZXNzOmZ1bmN0aW9uKGUsbil7XCJzdWNjZXNzXCI9PT1uJiZhLnNldENvbnRlbnQodCxlKX0sZXJyb3I6ZnVuY3Rpb24oZSxuKXtlJiZcImFib3J0XCIhPT1uJiZhLnNldEVycm9yKHQpfX0pKSxvLm9uZShcIm9uUmVzZXRcIixmdW5jdGlvbigpe2kuYWJvcnQoKX0pO2JyZWFrO2Nhc2VcInZpZGVvXCI6YS5zZXRDb250ZW50KHQsJzx2aWRlbyBjb250cm9scz48c291cmNlIHNyYz1cIicrdC5zcmMrJ1wiIHR5cGU9XCInK3Qub3B0cy52aWRlb0Zvcm1hdCtcIlxcXCI+WW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBIVE1MNSB2aWRlbzwvdmlkZW8+XCIpO2JyZWFrO2RlZmF1bHQ6YS5zZXRFcnJvcih0KX1yZXR1cm4hMH19LHNldEltYWdlOmZ1bmN0aW9uKGUpe3ZhciBvLGksYSxzLHI9dGhpcyxjPWUub3B0cy5zcmNzZXR8fGUub3B0cy5pbWFnZS5zcmNzZXQ7aWYoYyl7YT10LmRldmljZVBpeGVsUmF0aW98fDEscz10LmlubmVyV2lkdGgqYSxpPWMuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gdC50cmltKCkuc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7dmFyIG89cGFyc2VJbnQodC5zdWJzdHJpbmcoMCx0Lmxlbmd0aC0xKSwxMCk7cmV0dXJuIDA9PT1uP2UudXJsPXQ6dm9pZChvJiYoZS52YWx1ZT1vLGUucG9zdGZpeD10W3QubGVuZ3RoLTFdKSl9KSxlfSksaS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQudmFsdWUtZS52YWx1ZX0pO2Zvcih2YXIgbD0wO2w8aS5sZW5ndGg7bCsrKXt2YXIgdT1pW2xdO2lmKFwid1wiPT09dS5wb3N0Zml4JiZ1LnZhbHVlPj1zfHxcInhcIj09PXUucG9zdGZpeCYmdS52YWx1ZT49YSl7bz11O2JyZWFrfX0hbyYmaS5sZW5ndGgmJihvPWlbaS5sZW5ndGgtMV0pLG8mJihlLnNyYz1vLnVybCxlLndpZHRoJiZlLmhlaWdodCYmXCJ3XCI9PW8ucG9zdGZpeCYmKGUuaGVpZ2h0PWUud2lkdGgvZS5oZWlnaHQqby52YWx1ZSxlLndpZHRoPW8udmFsdWUpKX1lLiRjb250ZW50PW4oJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbWFnZS13cmFwXCI+PC9kaXY+JykuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIikuYXBwZW5kVG8oZS4kc2xpZGUpLGUub3B0cy5wcmVsb2FkIT09ITEmJmUub3B0cy53aWR0aCYmZS5vcHRzLmhlaWdodCYmKGUub3B0cy50aHVtYnx8ZS5vcHRzLiR0aHVtYik/KGUud2lkdGg9ZS5vcHRzLndpZHRoLGUuaGVpZ2h0PWUub3B0cy5oZWlnaHQsZS4kZ2hvc3Q9bihcIjxpbWcgLz5cIikub25lKFwiZXJyb3JcIixmdW5jdGlvbigpe24odGhpcykucmVtb3ZlKCksZS4kZ2hvc3Q9bnVsbCxyLnNldEJpZ0ltYWdlKGUpfSkub25lKFwibG9hZFwiLGZ1bmN0aW9uKCl7ci5hZnRlckxvYWQoZSksci5zZXRCaWdJbWFnZShlKX0pLmFkZENsYXNzKFwiZmFuY3lib3gtaW1hZ2VcIikuYXBwZW5kVG8oZS4kY29udGVudCkuYXR0cihcInNyY1wiLGUub3B0cy50aHVtYnx8ZS5vcHRzLiR0aHVtYi5hdHRyKFwic3JjXCIpKSk6ci5zZXRCaWdJbWFnZShlKX0sc2V0QmlnSW1hZ2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxvPW4oXCI8aW1nIC8+XCIpO3QuJGltYWdlPW8ub25lKFwiZXJyb3JcIixmdW5jdGlvbigpe2Uuc2V0RXJyb3IodCl9KS5vbmUoXCJsb2FkXCIsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodC50aW1vdXRzKSx0LnRpbW91dHM9bnVsbCxlLmlzQ2xvc2luZ3x8KHQud2lkdGg9dC5vcHRzLndpZHRofHx0aGlzLm5hdHVyYWxXaWR0aCx0LmhlaWdodD10Lm9wdHMuaGVpZ2h0fHx0aGlzLm5hdHVyYWxIZWlnaHQsdC5vcHRzLmltYWdlLnNyY3NldCYmby5hdHRyKFwic2l6ZXNcIixcIjEwMHZ3XCIpLmF0dHIoXCJzcmNzZXRcIix0Lm9wdHMuaW1hZ2Uuc3Jjc2V0KSxlLmhpZGVMb2FkaW5nKHQpLHQuJGdob3N0P3QudGltb3V0cz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC50aW1vdXRzPW51bGwsdC4kZ2hvc3QuaGlkZSgpfSxNYXRoLm1pbigzMDAsTWF0aC5tYXgoMWUzLHQuaGVpZ2h0LzE2MDApKSk6ZS5hZnRlckxvYWQodCkpfSkuYWRkQ2xhc3MoXCJmYW5jeWJveC1pbWFnZVwiKS5hdHRyKFwic3JjXCIsdC5zcmMpLmFwcGVuZFRvKHQuJGNvbnRlbnQpLChvWzBdLmNvbXBsZXRlfHxcImNvbXBsZXRlXCI9PW9bMF0ucmVhZHlTdGF0ZSkmJm9bMF0ubmF0dXJhbFdpZHRoJiZvWzBdLm5hdHVyYWxIZWlnaHQ/by50cmlnZ2VyKFwibG9hZFwiKTpvWzBdLmVycm9yP28udHJpZ2dlcihcImVycm9yXCIpOnQudGltb3V0cz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7b1swXS5jb21wbGV0ZXx8dC5oYXNFcnJvcnx8ZS5zaG93TG9hZGluZyh0KX0sMTAwKX0sc2V0SWZyYW1lOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcyxhPXQub3B0cy5pZnJhbWUscz10LiRzbGlkZTt0LiRjb250ZW50PW4oJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250ZW50JysoYS5wcmVsb2FkP1wiIGZhbmN5Ym94LWlzLWhpZGRlblwiOlwiXCIpKydcIj48L2Rpdj4nKS5jc3MoYS5jc3MpLmFwcGVuZFRvKHMpLGU9bihhLnRwbC5yZXBsYWNlKC9cXHtybmRcXH0vZywobmV3IERhdGUpLmdldFRpbWUoKSkpLmF0dHIoYS5hdHRyKS5hcHBlbmRUbyh0LiRjb250ZW50KSxhLnByZWxvYWQ/KGkuc2hvd0xvYWRpbmcodCksZS5vbihcImxvYWQuZmIgZXJyb3IuZmJcIixmdW5jdGlvbihlKXt0aGlzLmlzUmVhZHk9MSx0LiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKSxpLmFmdGVyTG9hZCh0KX0pLHMub24oXCJyZWZyZXNoLmZiXCIsZnVuY3Rpb24oKXt2YXIgbixpLHMscj10LiRjb250ZW50LGM9YS5jc3Mud2lkdGgsbD1hLmNzcy5oZWlnaHQ7aWYoMT09PWVbMF0uaXNSZWFkeSl7dHJ5e2k9ZS5jb250ZW50cygpLHM9aS5maW5kKFwiYm9keVwiKX1jYXRjaCh0KXt9cyYmcy5sZW5ndGgmJihjPT09byYmKG49ZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCxjPU1hdGguY2VpbChzLm91dGVyV2lkdGgoITApKyhyLndpZHRoKCktbikpLGMrPXIub3V0ZXJXaWR0aCgpLXIuaW5uZXJXaWR0aCgpKSxsPT09byYmKGw9TWF0aC5jZWlsKHMub3V0ZXJIZWlnaHQoITApKSxsKz1yLm91dGVySGVpZ2h0KCktci5pbm5lckhlaWdodCgpKSxjJiZyLndpZHRoKGMpLGwmJnIuaGVpZ2h0KGwpKSxyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpfX0pKTp0aGlzLmFmdGVyTG9hZCh0KSxlLmF0dHIoXCJzcmNcIix0LnNyYyksdC5vcHRzLnNtYWxsQnRuPT09ITAmJnQuJGNvbnRlbnQucHJlcGVuZChpLnRyYW5zbGF0ZSh0LHQub3B0cy5idG5UcGwuc21hbGxCdG4pKSxzLm9uZShcIm9uUmVzZXRcIixmdW5jdGlvbigpe3RyeXtuKHRoaXMpLmZpbmQoXCJpZnJhbWVcIikuaGlkZSgpLmF0dHIoXCJzcmNcIixcIi8vYWJvdXQ6YmxhbmtcIil9Y2F0Y2godCl7fW4odGhpcykuZW1wdHkoKSx0LmlzTG9hZGVkPSExfSl9LHNldENvbnRlbnQ6ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzO28uaXNDbG9zaW5nfHwoby5oaWRlTG9hZGluZyh0KSx0LiRzbGlkZS5lbXB0eSgpLGwoZSkmJmUucGFyZW50KCkubGVuZ3RoPyhlLnBhcmVudChcIi5mYW5jeWJveC1zbGlkZS0taW5saW5lXCIpLnRyaWdnZXIoXCJvblJlc2V0XCIpLHQuJHBsYWNlaG9sZGVyPW4oXCI8ZGl2PjwvZGl2PlwiKS5oaWRlKCkuaW5zZXJ0QWZ0ZXIoZSksZS5jc3MoXCJkaXNwbGF5XCIsXCJpbmxpbmUtYmxvY2tcIikpOnQuaGFzRXJyb3J8fChcInN0cmluZ1wiPT09bi50eXBlKGUpJiYoZT1uKFwiPGRpdj5cIikuYXBwZW5kKG4udHJpbShlKSkuY29udGVudHMoKSwzPT09ZVswXS5ub2RlVHlwZSYmKGU9bihcIjxkaXY+XCIpLmh0bWwoZSkpKSx0Lm9wdHMuZmlsdGVyJiYoZT1uKFwiPGRpdj5cIikuaHRtbChlKS5maW5kKHQub3B0cy5maWx0ZXIpKSksdC4kc2xpZGUub25lKFwib25SZXNldFwiLGZ1bmN0aW9uKCl7bih0aGlzKS5maW5kKFwidmlkZW8sYXVkaW9cIikudHJpZ2dlcihcInBhdXNlXCIpLHQuJHBsYWNlaG9sZGVyJiYodC4kcGxhY2Vob2xkZXIuYWZ0ZXIoZS5oaWRlKCkpLnJlbW92ZSgpLHQuJHBsYWNlaG9sZGVyPW51bGwpLHQuJHNtYWxsQnRuJiYodC4kc21hbGxCdG4ucmVtb3ZlKCksdC4kc21hbGxCdG49bnVsbCksdC5oYXNFcnJvcnx8KG4odGhpcykuZW1wdHkoKSx0LmlzTG9hZGVkPSExKX0pLHQuJGNvbnRlbnQ9bihlKS5hcHBlbmRUbyh0LiRzbGlkZSksdGhpcy5hZnRlckxvYWQodCkpfSxzZXRFcnJvcjpmdW5jdGlvbih0KXt0Lmhhc0Vycm9yPSEwLHQuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiK3QudHlwZSksdGhpcy5zZXRDb250ZW50KHQsdGhpcy50cmFuc2xhdGUodCx0Lm9wdHMuZXJyb3JUcGwpKX0sc2hvd0xvYWRpbmc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0PXR8fGUuY3VycmVudCx0JiYhdC4kc3Bpbm5lciYmKHQuJHNwaW5uZXI9bihlLm9wdHMuc3Bpbm5lclRwbCkuYXBwZW5kVG8odC4kc2xpZGUpKX0saGlkZUxvYWRpbmc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0PXR8fGUuY3VycmVudCx0JiZ0LiRzcGlubmVyJiYodC4kc3Bpbm5lci5yZW1vdmUoKSxkZWxldGUgdC4kc3Bpbm5lcil9LGFmdGVyTG9hZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2UuaXNDbG9zaW5nfHwodC5pc0xvYWRpbmc9ITEsdC5pc0xvYWRlZD0hMCxlLnRyaWdnZXIoXCJhZnRlckxvYWRcIix0KSxlLmhpZGVMb2FkaW5nKHQpLHQub3B0cy5zbWFsbEJ0biYmIXQuJHNtYWxsQnRuJiYodC4kc21hbGxCdG49bihlLnRyYW5zbGF0ZSh0LHQub3B0cy5idG5UcGwuc21hbGxCdG4pKS5hcHBlbmRUbyh0LiRjb250ZW50LmZpbHRlcihcImRpdixmb3JtXCIpLmZpcnN0KCkpKSx0Lm9wdHMucHJvdGVjdCYmdC4kY29udGVudCYmIXQuaGFzRXJyb3ImJih0LiRjb250ZW50Lm9uKFwiY29udGV4dG1lbnUuZmJcIixmdW5jdGlvbih0KXtyZXR1cm4gMj09dC5idXR0b24mJnQucHJldmVudERlZmF1bHQoKSwhMH0pLFwiaW1hZ2VcIj09PXQudHlwZSYmbignPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNwYWNlYmFsbFwiPjwvZGl2PicpLmFwcGVuZFRvKHQuJGNvbnRlbnQpKSxlLnJldmVhbENvbnRlbnQodCkpfSxyZXZlYWxDb250ZW50OmZ1bmN0aW9uKHQpe3ZhciBlLGksYSxzLHIsYz10aGlzLGw9dC4kc2xpZGUsdT0hMTtyZXR1cm4gZT10Lm9wdHNbYy5maXJzdFJ1bj9cImFuaW1hdGlvbkVmZmVjdFwiOlwidHJhbnNpdGlvbkVmZmVjdFwiXSxhPXQub3B0c1tjLmZpcnN0UnVuP1wiYW5pbWF0aW9uRHVyYXRpb25cIjpcInRyYW5zaXRpb25EdXJhdGlvblwiXSxhPXBhcnNlSW50KHQuZm9yY2VkRHVyYXRpb249PT1vP2E6dC5mb3JjZWREdXJhdGlvbiwxMCksIXQuaXNNb3ZlZCYmdC5wb3M9PT1jLmN1cnJQb3MmJmF8fChlPSExKSxcInpvb21cIiE9PWV8fHQucG9zPT09Yy5jdXJyUG9zJiZhJiZcImltYWdlXCI9PT10LnR5cGUmJiF0Lmhhc0Vycm9yJiYodT1jLmdldFRodW1iUG9zKHQpKXx8KGU9XCJmYWRlXCIpLFwiem9vbVwiPT09ZT8ocj1jLmdldEZpdFBvcyh0KSxyLnNjYWxlWD1yLndpZHRoL3Uud2lkdGgsci5zY2FsZVk9ci5oZWlnaHQvdS5oZWlnaHQsZGVsZXRlIHIud2lkdGgsZGVsZXRlIHIuaGVpZ2h0LHM9dC5vcHRzLnpvb21PcGFjaXR5LFwiYXV0b1wiPT1zJiYocz1NYXRoLmFicyh0LndpZHRoL3QuaGVpZ2h0LXUud2lkdGgvdS5oZWlnaHQpPi4xKSxzJiYodS5vcGFjaXR5PS4xLHIub3BhY2l0eT0xKSxuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSh0LiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLHUpLGYodC4kY29udGVudCksdm9pZCBuLmZhbmN5Ym94LmFuaW1hdGUodC4kY29udGVudCxyLGEsZnVuY3Rpb24oKXtjLmNvbXBsZXRlKCl9KSk6KGMudXBkYXRlU2xpZGUodCksZT8obi5mYW5jeWJveC5zdG9wKGwpLGk9XCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1zbGlkZS0tXCIrKHQucG9zPj1jLnByZXZQb3M/XCJuZXh0XCI6XCJwcmV2aW91c1wiKStcIiBmYW5jeWJveC1meC1cIitlLGwucmVtb3ZlQXR0cihcInN0eWxlXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLmFkZENsYXNzKGkpLHQuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIiksZihsKSx2b2lkIG4uZmFuY3lib3guYW5pbWF0ZShsLFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIixhLGZ1bmN0aW9uKGUpe2wucmVtb3ZlQ2xhc3MoaSkucmVtb3ZlQXR0cihcInN0eWxlXCIpLHQucG9zPT09Yy5jdXJyUG9zJiZjLmNvbXBsZXRlKCl9LCEwKSk6KGYobCksdC4kY29udGVudC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKSx2b2lkKHQucG9zPT09Yy5jdXJyUG9zJiZjLmNvbXBsZXRlKCkpKSl9LGdldFRodW1iUG9zOmZ1bmN0aW9uKG8pe3ZhciBpLGE9dGhpcyxzPSExLHI9ZnVuY3Rpb24oZSl7Zm9yKHZhciBvLGk9ZVswXSxhPWkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscz1bXTtudWxsIT09aS5wYXJlbnRFbGVtZW50OylcImhpZGRlblwiIT09bihpLnBhcmVudEVsZW1lbnQpLmNzcyhcIm92ZXJmbG93XCIpJiZcImF1dG9cIiE9PW4oaS5wYXJlbnRFbGVtZW50KS5jc3MoXCJvdmVyZmxvd1wiKXx8cy5wdXNoKGkucGFyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksaT1pLnBhcmVudEVsZW1lbnQ7cmV0dXJuIG89cy5ldmVyeShmdW5jdGlvbih0KXt2YXIgZT1NYXRoLm1pbihhLnJpZ2h0LHQucmlnaHQpLU1hdGgubWF4KGEubGVmdCx0LmxlZnQpLG49TWF0aC5taW4oYS5ib3R0b20sdC5ib3R0b20pLU1hdGgubWF4KGEudG9wLHQudG9wKTtyZXR1cm4gZT4wJiZuPjB9KSxvJiZhLmJvdHRvbT4wJiZhLnJpZ2h0PjAmJmEubGVmdDxuKHQpLndpZHRoKCkmJmEudG9wPG4odCkuaGVpZ2h0KCl9LGM9by5vcHRzLiR0aHVtYixsPWM/Yy5vZmZzZXQoKTowO3JldHVybiBsJiZjWzBdLm93bmVyRG9jdW1lbnQ9PT1lJiZyKGMpJiYoaT1hLiRyZWZzLnN0YWdlLm9mZnNldCgpLHM9e3RvcDpsLnRvcC1pLnRvcCtwYXJzZUZsb2F0KGMuY3NzKFwiYm9yZGVyLXRvcC13aWR0aFwiKXx8MCksbGVmdDpsLmxlZnQtaS5sZWZ0K3BhcnNlRmxvYXQoYy5jc3MoXCJib3JkZXItbGVmdC13aWR0aFwiKXx8MCksd2lkdGg6Yy53aWR0aCgpLGhlaWdodDpjLmhlaWdodCgpLHNjYWxlWDoxLHNjYWxlWToxfSksc30sY29tcGxldGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLG89dC5jdXJyZW50LGk9e307by5pc01vdmVkfHwhby5pc0xvYWRlZHx8by5pc0NvbXBsZXRlfHwoby5pc0NvbXBsZXRlPSEwLG8uJHNsaWRlLnNpYmxpbmdzKCkudHJpZ2dlcihcIm9uUmVzZXRcIiksdC5wcmVsb2FkKFwiaW5saW5lXCIpLGYoby4kc2xpZGUpLG8uJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlXCIpLG4uZWFjaCh0LnNsaWRlcyxmdW5jdGlvbihlLG8pe28ucG9zPj10LmN1cnJQb3MtMSYmby5wb3M8PXQuY3VyclBvcysxP2lbby5wb3NdPW86byYmKG4uZmFuY3lib3guc3RvcChvLiRzbGlkZSksby4kc2xpZGUub2ZmKCkucmVtb3ZlKCkpfSksdC5zbGlkZXM9aSx0LnVwZGF0ZUN1cnNvcigpLHQudHJpZ2dlcihcImFmdGVyU2hvd1wiKSxvLiRzbGlkZS5maW5kKFwidmlkZW8sYXVkaW9cIikuZmlyc3QoKS50cmlnZ2VyKFwicGxheVwiKSwobihlLmFjdGl2ZUVsZW1lbnQpLmlzKFwiW2Rpc2FibGVkXVwiKXx8by5vcHRzLmF1dG9Gb2N1cyYmXCJpbWFnZVwiIT1vLnR5cGUmJlwiaWZyYW1lXCIhPT1vLnR5cGUpJiZ0LmZvY3VzKCkpfSxwcmVsb2FkOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1lLnNsaWRlc1tlLmN1cnJQb3MrMV0sbz1lLnNsaWRlc1tlLmN1cnJQb3MtMV07biYmbi50eXBlPT09dCYmZS5sb2FkU2xpZGUobiksbyYmby50eXBlPT09dCYmZS5sb2FkU2xpZGUobyl9LGZvY3VzOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLmN1cnJlbnQ7dGhpcy5pc0Nsb3Npbmd8fChlJiZlLmlzQ29tcGxldGUmJih0PWUuJHNsaWRlLmZpbmQoXCJpbnB1dFthdXRvZm9jdXNdOmVuYWJsZWQ6dmlzaWJsZTpmaXJzdFwiKSx0Lmxlbmd0aHx8KHQ9ZS4kc2xpZGUuZmluZChcImJ1dHRvbiw6aW5wdXQsW3RhYmluZGV4XSxhXCIpLmZpbHRlcihcIjplbmFibGVkOnZpc2libGU6Zmlyc3RcIikpKSx0PXQmJnQubGVuZ3RoP3Q6dGhpcy4kcmVmcy5jb250YWluZXIsdC5mb2N1cygpKX0sYWN0aXZhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO24oXCIuZmFuY3lib3gtY29udGFpbmVyXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1uKHRoaXMpLmRhdGEoXCJGYW5jeUJveFwiKTtlJiZlLmlkIT09dC5pZCYmIWUuaXNDbG9zaW5nJiYoZS50cmlnZ2VyKFwib25EZWFjdGl2YXRlXCIpLGUucmVtb3ZlRXZlbnRzKCksZS5pc1Zpc2libGU9ITEpfSksdC5pc1Zpc2libGU9ITAsKHQuY3VycmVudHx8dC5pc0lkbGUpJiYodC51cGRhdGUoKSx0LnVwZGF0ZUNvbnRyb2xzKCkpLHQudHJpZ2dlcihcIm9uQWN0aXZhdGVcIiksdC5hZGRFdmVudHMoKX0sY2xvc2U6ZnVuY3Rpb24odCxlKXt2YXIgbyxpLGEscyxyLGMsbD10aGlzLHA9bC5jdXJyZW50LGg9ZnVuY3Rpb24oKXtsLmNsZWFuVXAodCl9O3JldHVybiFsLmlzQ2xvc2luZyYmKGwuaXNDbG9zaW5nPSEwLGwudHJpZ2dlcihcImJlZm9yZUNsb3NlXCIsdCk9PT0hMT8obC5pc0Nsb3Npbmc9ITEsdShmdW5jdGlvbigpe2wudXBkYXRlKCl9KSwhMSk6KGwucmVtb3ZlRXZlbnRzKCkscC50aW1vdXRzJiZjbGVhclRpbWVvdXQocC50aW1vdXRzKSxhPXAuJGNvbnRlbnQsbz1wLm9wdHMuYW5pbWF0aW9uRWZmZWN0LGk9bi5pc051bWVyaWMoZSk/ZTpvP3Aub3B0cy5hbmltYXRpb25EdXJhdGlvbjowLHAuJHNsaWRlLm9mZihkKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZSBmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMgZmFuY3lib3gtYW5pbWF0ZWRcIikscC4kc2xpZGUuc2libGluZ3MoKS50cmlnZ2VyKFwib25SZXNldFwiKS5yZW1vdmUoKSxpJiZsLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIikuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1jbG9zaW5nXCIpLGwuaGlkZUxvYWRpbmcocCksbC5oaWRlQ29udHJvbHMoKSxsLnVwZGF0ZUN1cnNvcigpLFwiem9vbVwiIT09b3x8dCE9PSEwJiZhJiZpJiZcImltYWdlXCI9PT1wLnR5cGUmJiFwLmhhc0Vycm9yJiYoYz1sLmdldFRodW1iUG9zKHApKXx8KG89XCJmYWRlXCIpLFwiem9vbVwiPT09bz8obi5mYW5jeWJveC5zdG9wKGEpLHI9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoYSksci53aWR0aD1yLndpZHRoKnIuc2NhbGVYLHIuaGVpZ2h0PXIuaGVpZ2h0KnIuc2NhbGVZLHM9cC5vcHRzLnpvb21PcGFjaXR5LFwiYXV0b1wiPT1zJiYocz1NYXRoLmFicyhwLndpZHRoL3AuaGVpZ2h0LWMud2lkdGgvYy5oZWlnaHQpPi4xKSxzJiYoYy5vcGFjaXR5PTApLHIuc2NhbGVYPXIud2lkdGgvYy53aWR0aCxyLnNjYWxlWT1yLmhlaWdodC9jLmhlaWdodCxyLndpZHRoPWMud2lkdGgsci5oZWlnaHQ9Yy5oZWlnaHQsbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUocC4kY29udGVudCxyKSxmKHAuJGNvbnRlbnQpLG4uZmFuY3lib3guYW5pbWF0ZShwLiRjb250ZW50LGMsaSxoKSwhMCk6KG8mJmk/dD09PSEwP3NldFRpbWVvdXQoaCxpKTpuLmZhbmN5Ym94LmFuaW1hdGUocC4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKSxcImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1meC1cIitvLGksaCk6aCgpLCEwKSkpfSxjbGVhblVwOmZ1bmN0aW9uKHQpe3ZhciBvLGksYT10aGlzLHI9bihcImJvZHlcIik7YS5jdXJyZW50LiRzbGlkZS50cmlnZ2VyKFwib25SZXNldFwiKSxhLiRyZWZzLmNvbnRhaW5lci5lbXB0eSgpLnJlbW92ZSgpLGEudHJpZ2dlcihcImFmdGVyQ2xvc2VcIix0KSxhLiRsYXN0Rm9jdXMmJmEuY3VycmVudC5vcHRzLmJhY2tGb2N1cyYmYS4kbGFzdEZvY3VzLmZvY3VzKCksYS5jdXJyZW50PW51bGwsbz1uLmZhbmN5Ym94LmdldEluc3RhbmNlKCksbz9vLmFjdGl2YXRlKCk6KHMuc2Nyb2xsVG9wKGEuc2Nyb2xsVG9wKS5zY3JvbGxMZWZ0KGEuc2Nyb2xsTGVmdCksci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFjdGl2ZSBjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIiksci5oYXNDbGFzcyhcImZhbmN5Ym94LWlvc2ZpeFwiKSYmKGk9cGFyc2VJbnQoZS5ib2R5LnN0eWxlLnRvcCwxMCksci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlvc2ZpeFwiKS5jc3MoXCJ0b3BcIixcIlwiKS5zY3JvbGxUb3AoaSotMSkpLG4oXCIjZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIikucmVtb3ZlKCkpfSx0cmlnZ2VyOmZ1bmN0aW9uKHQsZSl7dmFyIG8saT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksYT10aGlzLHM9ZSYmZS5vcHRzP2U6YS5jdXJyZW50O3JldHVybiBzP2kudW5zaGlmdChzKTpzPWEsaS51bnNoaWZ0KGEpLG4uaXNGdW5jdGlvbihzLm9wdHNbdF0pJiYobz1zLm9wdHNbdF0uYXBwbHkocyxpKSksbz09PSExP286dm9pZChcImFmdGVyQ2xvc2VcIiE9PXQmJmEuJHJlZnM/YS4kcmVmcy5jb250YWluZXIudHJpZ2dlcih0K1wiLmZiXCIsaSk6ci50cmlnZ2VyKHQrXCIuZmJcIixpKSl9LHVwZGF0ZUNvbnRyb2xzOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1lLmN1cnJlbnQsbz1uLmluZGV4LGk9bi5vcHRzLmNhcHRpb24sYT1lLiRyZWZzLmNvbnRhaW5lcixzPWUuJHJlZnMuY2FwdGlvbjtuLiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKSxlLiRjYXB0aW9uPWkmJmkubGVuZ3RoP3MuaHRtbChpKTpudWxsLGUuaXNIaWRkZW5Db250cm9sc3x8ZS5pc0lkbGV8fGUuc2hvd0NvbnRyb2xzKCksYS5maW5kKFwiW2RhdGEtZmFuY3lib3gtY291bnRdXCIpLmh0bWwoZS5ncm91cC5sZW5ndGgpLGEuZmluZChcIltkYXRhLWZhbmN5Ym94LWluZGV4XVwiKS5odG1sKG8rMSksYS5maW5kKFwiW2RhdGEtZmFuY3lib3gtcHJldl1cIikucHJvcChcImRpc2FibGVkXCIsIW4ub3B0cy5sb29wJiZvPD0wKSxhLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1uZXh0XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwhbi5vcHRzLmxvb3AmJm8+PWUuZ3JvdXAubGVuZ3RoLTEpLFwiaW1hZ2VcIj09PW4udHlwZT9hLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF1cIikuYXR0cihcImhyZWZcIixuLm9wdHMuaW1hZ2Uuc3JjfHxuLnNyYykuc2hvdygpOmEuZmluZChcIltkYXRhLWZhbmN5Ym94LWRvd25sb2FkXSxbZGF0YS1mYW5jeWJveC16b29tXVwiKS5oaWRlKCl9LGhpZGVDb250cm9sczpmdW5jdGlvbigpe3RoaXMuaXNIaWRkZW5Db250cm9scz0hMCx0aGlzLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhciBmYW5jeWJveC1zaG93LXRvb2xiYXIgZmFuY3lib3gtc2hvdy1jYXB0aW9uIGZhbmN5Ym94LXNob3ctbmF2XCIpfSxzaG93Q29udHJvbHM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5jdXJyZW50P3QuY3VycmVudC5vcHRzOnQub3B0cyxuPXQuJHJlZnMuY29udGFpbmVyO3QuaXNIaWRkZW5Db250cm9scz0hMSx0LmlkbGVTZWNvbmRzQ291bnRlcj0wLG4udG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LXRvb2xiYXJcIiwhKCFlLnRvb2xiYXJ8fCFlLmJ1dHRvbnMpKS50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhclwiLCEhKGUuaW5mb2JhciYmdC5ncm91cC5sZW5ndGg+MSkpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy1uYXZcIiwhIShlLmFycm93cyYmdC5ncm91cC5sZW5ndGg+MSkpLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtbW9kYWxcIiwhIWUubW9kYWwpLHQuJGNhcHRpb24/bi5hZGRDbGFzcyhcImZhbmN5Ym94LXNob3ctY2FwdGlvbiBcIik6bi5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNob3ctY2FwdGlvblwiKX0sdG9nZ2xlQ29udHJvbHM6ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVuQ29udHJvbHM/dGhpcy5zaG93Q29udHJvbHMoKTp0aGlzLmhpZGVDb250cm9scygpfX0pLG4uZmFuY3lib3g9e3ZlcnNpb246XCIzLjIuMTBcIixkZWZhdWx0czphLGdldEluc3RhbmNlOmZ1bmN0aW9uKHQpe3ZhciBlPW4oJy5mYW5jeWJveC1jb250YWluZXI6bm90KFwiLmZhbmN5Ym94LWlzLWNsb3NpbmdcIik6bGFzdCcpLmRhdGEoXCJGYW5jeUJveFwiKSxvPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZSBpbnN0YW5jZW9mIHAmJihcInN0cmluZ1wiPT09bi50eXBlKHQpP2VbdF0uYXBwbHkoZSxvKTpcImZ1bmN0aW9uXCI9PT1uLnR5cGUodCkmJnQuYXBwbHkoZSxvKSxlKX0sb3BlbjpmdW5jdGlvbih0LGUsbil7cmV0dXJuIG5ldyBwKHQsZSxuKX0sY2xvc2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJbnN0YW5jZSgpO2UmJihlLmNsb3NlKCksdD09PSEwJiZ0aGlzLmNsb3NlKCkpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5jbG9zZSghMCksci5vZmYoXCJjbGljay5mYi1zdGFydFwiKX0saXNNb2JpbGU6ZS5jcmVhdGVUb3VjaCE9PW8mJi9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSx1c2UzZDpmdW5jdGlvbigpe3ZhciBuPWUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gdC5nZXRDb21wdXRlZFN0eWxlJiZ0LmdldENvbXB1dGVkU3R5bGUobikuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKSYmIShlLmRvY3VtZW50TW9kZSYmZS5kb2N1bWVudE1vZGU8MTEpfSgpLGdldFRyYW5zbGF0ZTpmdW5jdGlvbih0KXt2YXIgZTtpZighdHx8IXQubGVuZ3RoKXJldHVybiExO2lmKGU9dC5lcSgwKS5jc3MoXCJ0cmFuc2Zvcm1cIiksZSYmZS5pbmRleE9mKFwibWF0cml4XCIpIT09LTE/KGU9ZS5zcGxpdChcIihcIilbMV0sZT1lLnNwbGl0KFwiKVwiKVswXSxlPWUuc3BsaXQoXCIsXCIpKTplPVtdLGUubGVuZ3RoKWU9ZS5sZW5ndGg+MTA/W2VbMTNdLGVbMTJdLGVbMF0sZVs1XV06W2VbNV0sZVs0XSxlWzBdLGVbM11dLGU9ZS5tYXAocGFyc2VGbG9hdCk7ZWxzZXtlPVswLDAsMSwxXTt2YXIgbj0vXFwuKnRyYW5zbGF0ZVxcKCguKilweCwoLiopcHhcXCkvaSxvPW4uZXhlYyh0LmVxKDApLmF0dHIoXCJzdHlsZVwiKSk7byYmKGVbMF09cGFyc2VGbG9hdChvWzJdKSxlWzFdPXBhcnNlRmxvYXQob1sxXSkpfXJldHVybnt0b3A6ZVswXSxsZWZ0OmVbMV0sc2NhbGVYOmVbMl0sc2NhbGVZOmVbM10sb3BhY2l0eTpwYXJzZUZsb2F0KHQuY3NzKFwib3BhY2l0eVwiKSksd2lkdGg6dC53aWR0aCgpLGhlaWdodDp0LmhlaWdodCgpfX0sc2V0VHJhbnNsYXRlOmZ1bmN0aW9uKHQsZSl7dmFyIG49XCJcIixpPXt9O2lmKHQmJmUpcmV0dXJuIGUubGVmdD09PW8mJmUudG9wPT09b3x8KG49KGUubGVmdD09PW8/dC5wb3NpdGlvbigpLmxlZnQ6ZS5sZWZ0KStcInB4LCBcIisoZS50b3A9PT1vP3QucG9zaXRpb24oKS50b3A6ZS50b3ApK1wicHhcIixuPXRoaXMudXNlM2Q/XCJ0cmFuc2xhdGUzZChcIituK1wiLCAwcHgpXCI6XCJ0cmFuc2xhdGUoXCIrbitcIilcIiksZS5zY2FsZVghPT1vJiZlLnNjYWxlWSE9PW8mJihuPShuLmxlbmd0aD9uK1wiIFwiOlwiXCIpK1wic2NhbGUoXCIrZS5zY2FsZVgrXCIsIFwiK2Uuc2NhbGVZK1wiKVwiKSxuLmxlbmd0aCYmKGkudHJhbnNmb3JtPW4pLGUub3BhY2l0eSE9PW8mJihpLm9wYWNpdHk9ZS5vcGFjaXR5KSxlLndpZHRoIT09byYmKGkud2lkdGg9ZS53aWR0aCksZS5oZWlnaHQhPT1vJiYoaS5oZWlnaHQ9ZS5oZWlnaHQpLHQuY3NzKGkpfSxhbmltYXRlOmZ1bmN0aW9uKHQsZSxpLGEscyl7bi5pc0Z1bmN0aW9uKGkpJiYoYT1pLGk9bnVsbCksbi5pc1BsYWluT2JqZWN0KGUpfHx0LnJlbW92ZUF0dHIoXCJzdHlsZVwiKSx0Lm9uKGQsZnVuY3Rpb24oaSl7KCFpfHwhaS5vcmlnaW5hbEV2ZW50fHx0LmlzKGkub3JpZ2luYWxFdmVudC50YXJnZXQpJiZcInotaW5kZXhcIiE9aS5vcmlnaW5hbEV2ZW50LnByb3BlcnR5TmFtZSkmJihuLmZhbmN5Ym94LnN0b3AodCksbi5pc1BsYWluT2JqZWN0KGUpPyhlLnNjYWxlWCE9PW8mJmUuc2NhbGVZIT09byYmKHQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFwiXCIpLGUud2lkdGg9TWF0aC5yb3VuZCh0LndpZHRoKCkqZS5zY2FsZVgpLGUuaGVpZ2h0PU1hdGgucm91bmQodC5oZWlnaHQoKSplLnNjYWxlWSksZS5zY2FsZVg9MSxlLnNjYWxlWT0xLG4uZmFuY3lib3guc2V0VHJhbnNsYXRlKHQsZSkpLHM9PT0hMSYmdC5yZW1vdmVBdHRyKFwic3R5bGVcIikpOnMhPT0hMCYmdC5yZW1vdmVDbGFzcyhlKSxuLmlzRnVuY3Rpb24oYSkmJmEoaSkpfSksbi5pc051bWVyaWMoaSkmJnQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLGkrXCJtc1wiKSxuLmlzUGxhaW5PYmplY3QoZSk/bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUodCxlKTp0LmFkZENsYXNzKGUpLGUuc2NhbGVYJiZ0Lmhhc0NsYXNzKFwiZmFuY3lib3gtaW1hZ2Utd3JhcFwiKSYmdC5wYXJlbnQoKS5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIiksdC5kYXRhKFwidGltZXJcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC50cmlnZ2VyKFwidHJhbnNpdGlvbmVuZFwiKX0saSsxNikpfSxzdG9wOmZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0LmRhdGEoXCJ0aW1lclwiKSksdC5vZmYoXCJ0cmFuc2l0aW9uZW5kXCIpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIixcIlwiKSx0Lmhhc0NsYXNzKFwiZmFuY3lib3gtaW1hZ2Utd3JhcFwiKSYmdC5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIil9fSxuLmZuLmZhbmN5Ym94PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB0PXR8fHt9LGU9dC5zZWxlY3Rvcnx8ITEsZT9uKFwiYm9keVwiKS5vZmYoXCJjbGljay5mYi1zdGFydFwiLGUpLm9uKFwiY2xpY2suZmItc3RhcnRcIixlLHtvcHRpb25zOnR9LGkpOnRoaXMub2ZmKFwiY2xpY2suZmItc3RhcnRcIikub24oXCJjbGljay5mYi1zdGFydFwiLHtpdGVtczp0aGlzLG9wdGlvbnM6dH0saSksdGhpc30sci5vbihcImNsaWNrLmZiLXN0YXJ0XCIsXCJbZGF0YS1mYW5jeWJveF1cIixpKX19KHdpbmRvdyxkb2N1bWVudCx3aW5kb3cualF1ZXJ5fHxqUXVlcnkpLGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBlPWZ1bmN0aW9uKGUsbixvKXtpZihlKXJldHVybiBvPW98fFwiXCIsXCJvYmplY3RcIj09PXQudHlwZShvKSYmKG89dC5wYXJhbShvLCEwKSksdC5lYWNoKG4sZnVuY3Rpb24odCxuKXtlPWUucmVwbGFjZShcIiRcIit0LG58fFwiXCIpfSksby5sZW5ndGgmJihlKz0oZS5pbmRleE9mKFwiP1wiKT4wP1wiJlwiOlwiP1wiKStvKSxlfSxuPXt5b3V0dWJlOnttYXRjaGVyOi8oeW91dHViZVxcLmNvbXx5b3V0dVxcLmJlfHlvdXR1YmVcXC1ub2Nvb2tpZVxcLmNvbSlcXC8od2F0Y2hcXD8oLiomKT92PXx2XFwvfHVcXC98ZW1iZWRcXC8/KT8odmlkZW9zZXJpZXNcXD9saXN0PSguKil8W1xcdy1dezExfXxcXD9saXN0VHlwZT0oLiopJmxpc3Q9KC4qKSkoLiopL2kscGFyYW1zOnthdXRvcGxheToxLGF1dG9oaWRlOjEsZnM6MSxyZWw6MCxoZDoxLHdtb2RlOlwidHJhbnNwYXJlbnRcIixlbmFibGVqc2FwaToxLGh0bWw1OjF9LHBhcmFtUGxhY2U6OCx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy93d3cueW91dHViZS5jb20vZW1iZWQvJDRcIix0aHVtYjpcIi8vaW1nLnlvdXR1YmUuY29tL3ZpLyQ0L2hxZGVmYXVsdC5qcGdcIlxyXG59LHZpbWVvOnttYXRjaGVyOi9eLit2aW1lby5jb21cXC8oLipcXC8pPyhbXFxkXSspKC4qKT8vLHBhcmFtczp7YXV0b3BsYXk6MSxoZDoxLHNob3dfdGl0bGU6MSxzaG93X2J5bGluZToxLHNob3dfcG9ydHJhaXQ6MCxmdWxsc2NyZWVuOjEsYXBpOjF9LHBhcmFtUGxhY2U6Myx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyQyXCJ9LG1ldGFjYWZlOnttYXRjaGVyOi9tZXRhY2FmZS5jb21cXC93YXRjaFxcLyhcXGQrKVxcLyguKik/Lyx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy93d3cubWV0YWNhZmUuY29tL2VtYmVkLyQxLz9hcD0xXCJ9LGRhaWx5bW90aW9uOnttYXRjaGVyOi9kYWlseW1vdGlvbi5jb21cXC92aWRlb1xcLyguKilcXC8/KC4qKS8scGFyYW1zOnthZGRpdGlvbmFsSW5mb3M6MCxhdXRvU3RhcnQ6MX0sdHlwZTpcImlmcmFtZVwiLHVybDpcIi8vd3d3LmRhaWx5bW90aW9uLmNvbS9lbWJlZC92aWRlby8kMVwifSx2aW5lOnttYXRjaGVyOi92aW5lLmNvXFwvdlxcLyhbYS16QS1aMC05XFw/XFw9XFwtXSspLyx0eXBlOlwiaWZyYW1lXCIsdXJsOlwiLy92aW5lLmNvL3YvJDEvZW1iZWQvc2ltcGxlXCJ9LGluc3RhZ3JhbTp7bWF0Y2hlcjovKGluc3RhZ3JcXC5hbXxpbnN0YWdyYW1cXC5jb20pXFwvcFxcLyhbYS16QS1aMC05X1xcLV0rKVxcLz8vaSx0eXBlOlwiaW1hZ2VcIix1cmw6XCIvLyQxL3AvJDIvbWVkaWEvP3NpemU9bFwifSxnbWFwX3BsYWNlOnttYXRjaGVyOi8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8oKChtYXBzXFwvKHBsYWNlXFwvKC4qKVxcLyk/XFxAKC4qKSwoXFxkKy4/XFxkKz8peikpfChcXD9sbD0pKSguKik/L2ksdHlwZTpcImlmcmFtZVwiLHVybDpmdW5jdGlvbih0KXtyZXR1cm5cIi8vbWFwcy5nb29nbGUuXCIrdFsyXStcIi8/bGw9XCIrKHRbOV0/dFs5XStcIiZ6PVwiK01hdGguZmxvb3IodFsxMF0pKyh0WzEyXT90WzEyXS5yZXBsYWNlKC9eXFwvLyxcIiZcIik6XCJcIik6dFsxMl0pK1wiJm91dHB1dD1cIisodFsxMl0mJnRbMTJdLmluZGV4T2YoXCJsYXllcj1jXCIpPjA/XCJzdmVtYmVkXCI6XCJlbWJlZFwiKX19LGdtYXBfc2VhcmNoOnttYXRjaGVyOi8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8obWFwc1xcL3NlYXJjaFxcLykoLiopL2ksdHlwZTpcImlmcmFtZVwiLHVybDpmdW5jdGlvbih0KXtyZXR1cm5cIi8vbWFwcy5nb29nbGUuXCIrdFsyXStcIi9tYXBzP3E9XCIrdFs1XS5yZXBsYWNlKFwicXVlcnk9XCIsXCJxPVwiKS5yZXBsYWNlKFwiYXBpPTFcIixcIlwiKStcIiZvdXRwdXQ9ZW1iZWRcIn19fTt0KGRvY3VtZW50KS5vbihcIm9iamVjdE5lZWRzVHlwZS5mYlwiLGZ1bmN0aW9uKG8saSxhKXt2YXIgcyxyLGMsbCx1LGQsZixwPWEuc3JjfHxcIlwiLGg9ITE7cz10LmV4dGVuZCghMCx7fSxuLGEub3B0cy5tZWRpYSksdC5lYWNoKHMsZnVuY3Rpb24obixvKXtpZihjPXAubWF0Y2goby5tYXRjaGVyKSl7aWYoaD1vLnR5cGUsZD17fSxvLnBhcmFtUGxhY2UmJmNbby5wYXJhbVBsYWNlXSl7dT1jW28ucGFyYW1QbGFjZV0sXCI/XCI9PXVbMF0mJih1PXUuc3Vic3RyaW5nKDEpKSx1PXUuc3BsaXQoXCImXCIpO2Zvcih2YXIgaT0wO2k8dS5sZW5ndGg7KytpKXt2YXIgcz11W2ldLnNwbGl0KFwiPVwiLDIpOzI9PXMubGVuZ3RoJiYoZFtzWzBdXT1kZWNvZGVVUklDb21wb25lbnQoc1sxXS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpKX19cmV0dXJuIGw9dC5leHRlbmQoITAse30sby5wYXJhbXMsYS5vcHRzW25dLGQpLHA9XCJmdW5jdGlvblwiPT09dC50eXBlKG8udXJsKT9vLnVybC5jYWxsKHRoaXMsYyxsLGEpOmUoby51cmwsYyxsKSxyPVwiZnVuY3Rpb25cIj09PXQudHlwZShvLnRodW1iKT9vLnRodW1iLmNhbGwodGhpcyxjLGwsYSk6ZShvLnRodW1iLGMpLFwidmltZW9cIj09PW4mJihwPXAucmVwbGFjZShcIiYlMjNcIixcIiNcIikpLCExfX0pLGg/KGEuc3JjPXAsYS50eXBlPWgsYS5vcHRzLnRodW1ifHxhLm9wdHMuJHRodW1iJiZhLm9wdHMuJHRodW1iLmxlbmd0aHx8KGEub3B0cy50aHVtYj1yKSxcImlmcmFtZVwiPT09aCYmKHQuZXh0ZW5kKCEwLGEub3B0cyx7aWZyYW1lOntwcmVsb2FkOiExLGF0dHI6e3Njcm9sbGluZzpcIm5vXCJ9fX0pLGEuY29udGVudFByb3ZpZGVyPWYsYS5vcHRzLnNsaWRlQ2xhc3MrPVwiIGZhbmN5Ym94LXNsaWRlLS1cIisoXCJnbWFwX3BsYWNlXCI9PWZ8fFwiZ21hcF9zZWFyY2hcIj09Zj9cIm1hcFwiOlwidmlkZW9cIikpKTpwJiYoYS50eXBlPWEub3B0cy5kZWZhdWx0VHlwZSl9KX0od2luZG93LmpRdWVyeXx8alF1ZXJ5KSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZnVuY3Rpb24oKXtyZXR1cm4gdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx0Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZXx8dC5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxmdW5jdGlvbihlKXtyZXR1cm4gdC5zZXRUaW1lb3V0KGUsMWUzLzYwKX19KCksaT1mdW5jdGlvbigpe3JldHVybiB0LmNhbmNlbEFuaW1hdGlvbkZyYW1lfHx0LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lfHx0Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHx0Lm9DYW5jZWxBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oZSl7dC5jbGVhclRpbWVvdXQoZSl9fSgpLGE9ZnVuY3Rpb24oZSl7dmFyIG49W107ZT1lLm9yaWdpbmFsRXZlbnR8fGV8fHQuZSxlPWUudG91Y2hlcyYmZS50b3VjaGVzLmxlbmd0aD9lLnRvdWNoZXM6ZS5jaGFuZ2VkVG91Y2hlcyYmZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg/ZS5jaGFuZ2VkVG91Y2hlczpbZV07Zm9yKHZhciBvIGluIGUpZVtvXS5wYWdlWD9uLnB1c2goe3g6ZVtvXS5wYWdlWCx5OmVbb10ucGFnZVl9KTplW29dLmNsaWVudFgmJm4ucHVzaCh7eDplW29dLmNsaWVudFgseTplW29dLmNsaWVudFl9KTtyZXR1cm4gbn0scz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGUmJnQ/XCJ4XCI9PT1uP3QueC1lLng6XCJ5XCI9PT1uP3QueS1lLnk6TWF0aC5zcXJ0KE1hdGgucG93KHQueC1lLngsMikrTWF0aC5wb3codC55LWUueSwyKSk6MH0scj1mdW5jdGlvbih0KXtpZih0LmlzKCdhLGFyZWEsYnV0dG9uLFtyb2xlPVwiYnV0dG9uXCJdLGlucHV0LGxhYmVsLHNlbGVjdCxzdW1tYXJ5LHRleHRhcmVhJyl8fG4uaXNGdW5jdGlvbih0LmdldCgwKS5vbmNsaWNrKXx8dC5kYXRhKFwic2VsZWN0YWJsZVwiKSlyZXR1cm4hMDtmb3IodmFyIGU9MCxvPXRbMF0uYXR0cmlidXRlcyxpPW8ubGVuZ3RoO2U8aTtlKyspaWYoXCJkYXRhLWZhbmN5Ym94LVwiPT09b1tlXS5ub2RlTmFtZS5zdWJzdHIoMCwxNCkpcmV0dXJuITA7cmV0dXJuITF9LGM9ZnVuY3Rpb24oZSl7dmFyIG49dC5nZXRDb21wdXRlZFN0eWxlKGUpW1wib3ZlcmZsb3cteVwiXSxvPXQuZ2V0Q29tcHV0ZWRTdHlsZShlKVtcIm92ZXJmbG93LXhcIl0saT0oXCJzY3JvbGxcIj09PW58fFwiYXV0b1wiPT09bikmJmUuc2Nyb2xsSGVpZ2h0PmUuY2xpZW50SGVpZ2h0LGE9KFwic2Nyb2xsXCI9PT1vfHxcImF1dG9cIj09PW8pJiZlLnNjcm9sbFdpZHRoPmUuY2xpZW50V2lkdGg7cmV0dXJuIGl8fGF9LGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSExOzspe2lmKGU9Yyh0LmdldCgwKSkpYnJlYWs7aWYodD10LnBhcmVudCgpLCF0Lmxlbmd0aHx8dC5oYXNDbGFzcyhcImZhbmN5Ym94LXN0YWdlXCIpfHx0LmlzKFwiYm9keVwiKSlicmVha31yZXR1cm4gZX0sdT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2UuaW5zdGFuY2U9dCxlLiRiZz10LiRyZWZzLmJnLGUuJHN0YWdlPXQuJHJlZnMuc3RhZ2UsZS4kY29udGFpbmVyPXQuJHJlZnMuY29udGFpbmVyLGUuZGVzdHJveSgpLGUuJGNvbnRhaW5lci5vbihcInRvdWNoc3RhcnQuZmIudG91Y2ggbW91c2Vkb3duLmZiLnRvdWNoXCIsbi5wcm94eShlLFwib250b3VjaHN0YXJ0XCIpKX07dS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGNvbnRhaW5lci5vZmYoXCIuZmIudG91Y2hcIil9LHUucHJvdG90eXBlLm9udG91Y2hzdGFydD1mdW5jdGlvbihvKXt2YXIgaT10aGlzLGM9bihvLnRhcmdldCksdT1pLmluc3RhbmNlLGQ9dS5jdXJyZW50LGY9ZC4kY29udGVudCxwPVwidG91Y2hzdGFydFwiPT1vLnR5cGU7aWYocCYmaS4kY29udGFpbmVyLm9mZihcIm1vdXNlZG93bi5mYi50b3VjaFwiKSwoIW8ub3JpZ2luYWxFdmVudHx8MiE9by5vcmlnaW5hbEV2ZW50LmJ1dHRvbikmJmMubGVuZ3RoJiYhcihjKSYmIXIoYy5wYXJlbnQoKSkmJihjLmlzKFwiaW1nXCIpfHwhKG8ub3JpZ2luYWxFdmVudC5jbGllbnRYPmNbMF0uY2xpZW50V2lkdGgrYy5vZmZzZXQoKS5sZWZ0KSkpe2lmKCFkfHxpLmluc3RhbmNlLmlzQW5pbWF0aW5nfHxpLmluc3RhbmNlLmlzQ2xvc2luZylyZXR1cm4gby5zdG9wUHJvcGFnYXRpb24oKSx2b2lkIG8ucHJldmVudERlZmF1bHQoKTtpZihpLnJlYWxQb2ludHM9aS5zdGFydFBvaW50cz1hKG8pLGkuc3RhcnRQb2ludHMpe2lmKG8uc3RvcFByb3BhZ2F0aW9uKCksaS5zdGFydEV2ZW50PW8saS5jYW5UYXA9ITAsaS4kdGFyZ2V0PWMsaS4kY29udGVudD1mLGkub3B0cz1kLm9wdHMudG91Y2gsaS5pc1Bhbm5pbmc9ITEsaS5pc1N3aXBpbmc9ITEsaS5pc1pvb21pbmc9ITEsaS5pc1Njcm9sbGluZz0hMSxpLnNsaWRlclN0YXJ0UG9zPWkuc2xpZGVyTGFzdFBvc3x8e3RvcDowLGxlZnQ6MH0saS5jb250ZW50U3RhcnRQb3M9bi5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaS4kY29udGVudCksaS5jb250ZW50TGFzdFBvcz1udWxsLGkuc3RhcnRUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGkuZGlzdGFuY2VYPWkuZGlzdGFuY2VZPWkuZGlzdGFuY2U9MCxpLmNhbnZhc1dpZHRoPU1hdGgucm91bmQoZC4kc2xpZGVbMF0uY2xpZW50V2lkdGgpLGkuY2FudmFzSGVpZ2h0PU1hdGgucm91bmQoZC4kc2xpZGVbMF0uY2xpZW50SGVpZ2h0KSxuKGUpLm9mZihcIi5mYi50b3VjaFwiKS5vbihwP1widG91Y2hlbmQuZmIudG91Y2ggdG91Y2hjYW5jZWwuZmIudG91Y2hcIjpcIm1vdXNldXAuZmIudG91Y2ggbW91c2VsZWF2ZS5mYi50b3VjaFwiLG4ucHJveHkoaSxcIm9udG91Y2hlbmRcIikpLm9uKHA/XCJ0b3VjaG1vdmUuZmIudG91Y2hcIjpcIm1vdXNlbW92ZS5mYi50b3VjaFwiLG4ucHJveHkoaSxcIm9udG91Y2htb3ZlXCIpKSxuLmZhbmN5Ym94LmlzTW9iaWxlJiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixpLm9uc2Nyb2xsLCEwKSwhaS5vcHRzJiYhdS5jYW5QYW4oKXx8IWMuaXMoaS4kc3RhZ2UpJiYhaS4kc3RhZ2UuZmluZChjKS5sZW5ndGgpcmV0dXJuIHZvaWQoYy5pcyhcImltZ1wiKSYmby5wcmV2ZW50RGVmYXVsdCgpKTtuLmZhbmN5Ym94LmlzTW9iaWxlJiYobChjKXx8bChjLnBhcmVudCgpKSl8fG8ucHJldmVudERlZmF1bHQoKSwxPT09aS5zdGFydFBvaW50cy5sZW5ndGgmJihcImltYWdlXCI9PT1kLnR5cGUmJihpLmNvbnRlbnRTdGFydFBvcy53aWR0aD5pLmNhbnZhc1dpZHRoKzF8fGkuY29udGVudFN0YXJ0UG9zLmhlaWdodD5pLmNhbnZhc0hlaWdodCsxKT8obi5mYW5jeWJveC5zdG9wKGkuJGNvbnRlbnQpLGkuJGNvbnRlbnQuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFwiXCIpLGkuaXNQYW5uaW5nPSEwKTppLmlzU3dpcGluZz0hMCxpLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1jb250cm9scy0taXNHcmFiYmluZ1wiKSksMiE9PWkuc3RhcnRQb2ludHMubGVuZ3RofHx1LmlzQW5pbWF0aW5nfHxkLmhhc0Vycm9yfHxcImltYWdlXCIhPT1kLnR5cGV8fCFkLmlzTG9hZGVkJiYhZC4kZ2hvc3R8fChpLmNhblRhcD0hMSxpLmlzU3dpcGluZz0hMSxpLmlzUGFubmluZz0hMSxpLmlzWm9vbWluZz0hMCxuLmZhbmN5Ym94LnN0b3AoaS4kY29udGVudCksaS4kY29udGVudC5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsXCJcIiksaS5jZW50ZXJQb2ludFN0YXJ0WD0uNSooaS5zdGFydFBvaW50c1swXS54K2kuc3RhcnRQb2ludHNbMV0ueCktbih0KS5zY3JvbGxMZWZ0KCksaS5jZW50ZXJQb2ludFN0YXJ0WT0uNSooaS5zdGFydFBvaW50c1swXS55K2kuc3RhcnRQb2ludHNbMV0ueSktbih0KS5zY3JvbGxUb3AoKSxpLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WD0oaS5jZW50ZXJQb2ludFN0YXJ0WC1pLmNvbnRlbnRTdGFydFBvcy5sZWZ0KS9pLmNvbnRlbnRTdGFydFBvcy53aWR0aCxpLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WT0oaS5jZW50ZXJQb2ludFN0YXJ0WS1pLmNvbnRlbnRTdGFydFBvcy50b3ApL2kuY29udGVudFN0YXJ0UG9zLmhlaWdodCxpLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2Vycz1zKGkuc3RhcnRQb2ludHNbMF0saS5zdGFydFBvaW50c1sxXSkpfX19LHUucHJvdG90eXBlLm9uc2Nyb2xsPWZ1bmN0aW9uKHQpe3NlbGYuaXNTY3JvbGxpbmc9ITB9LHUucHJvdG90eXBlLm9udG91Y2htb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbz1uKHQudGFyZ2V0KTtyZXR1cm4gZS5pc1Njcm9sbGluZ3x8IW8uaXMoZS4kc3RhZ2UpJiYhZS4kc3RhZ2UuZmluZChvKS5sZW5ndGg/dm9pZChlLmNhblRhcD0hMSk6KGUubmV3UG9pbnRzPWEodCksdm9pZCgoZS5vcHRzfHxlLmluc3RhbmNlLmNhblBhbigpKSYmZS5uZXdQb2ludHMmJmUubmV3UG9pbnRzLmxlbmd0aCYmKGUuaXNTd2lwaW5nJiZlLmlzU3dpcGluZz09PSEwfHx0LnByZXZlbnREZWZhdWx0KCksZS5kaXN0YW5jZVg9cyhlLm5ld1BvaW50c1swXSxlLnN0YXJ0UG9pbnRzWzBdLFwieFwiKSxlLmRpc3RhbmNlWT1zKGUubmV3UG9pbnRzWzBdLGUuc3RhcnRQb2ludHNbMF0sXCJ5XCIpLGUuZGlzdGFuY2U9cyhlLm5ld1BvaW50c1swXSxlLnN0YXJ0UG9pbnRzWzBdKSxlLmRpc3RhbmNlPjAmJihlLmlzU3dpcGluZz9lLm9uU3dpcGUodCk6ZS5pc1Bhbm5pbmc/ZS5vblBhbigpOmUuaXNab29taW5nJiZlLm9uWm9vbSgpKSkpKX0sdS5wcm90b3R5cGUub25Td2lwZT1mdW5jdGlvbihlKXt2YXIgYSxzPXRoaXMscj1zLmlzU3dpcGluZyxjPXMuc2xpZGVyU3RhcnRQb3MubGVmdHx8MDtpZihyIT09ITApXCJ4XCI9PXImJihzLmRpc3RhbmNlWD4wJiYocy5pbnN0YW5jZS5ncm91cC5sZW5ndGg8Mnx8MD09PXMuaW5zdGFuY2UuY3VycmVudC5pbmRleCYmIXMuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3ApP2MrPU1hdGgucG93KHMuZGlzdGFuY2VYLC44KTpzLmRpc3RhbmNlWDwwJiYocy5pbnN0YW5jZS5ncm91cC5sZW5ndGg8Mnx8cy5pbnN0YW5jZS5jdXJyZW50LmluZGV4PT09cy5pbnN0YW5jZS5ncm91cC5sZW5ndGgtMSYmIXMuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3ApP2MtPU1hdGgucG93KC1zLmRpc3RhbmNlWCwuOCk6Yys9cy5kaXN0YW5jZVgpLHMuc2xpZGVyTGFzdFBvcz17dG9wOlwieFwiPT1yPzA6cy5zbGlkZXJTdGFydFBvcy50b3Arcy5kaXN0YW5jZVksbGVmdDpjfSxzLnJlcXVlc3RJZCYmKGkocy5yZXF1ZXN0SWQpLHMucmVxdWVzdElkPW51bGwpLHMucmVxdWVzdElkPW8oZnVuY3Rpb24oKXtzLnNsaWRlckxhc3RQb3MmJihuLmVhY2gocy5pbnN0YW5jZS5zbGlkZXMsZnVuY3Rpb24odCxlKXt2YXIgbz1lLnBvcy1zLmluc3RhbmNlLmN1cnJQb3M7bi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoZS4kc2xpZGUse3RvcDpzLnNsaWRlckxhc3RQb3MudG9wLGxlZnQ6cy5zbGlkZXJMYXN0UG9zLmxlZnQrbypzLmNhbnZhc1dpZHRoK28qZS5vcHRzLmd1dHRlcn0pfSkscy4kY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtc2xpZGluZ1wiKSl9KTtlbHNlIGlmKE1hdGguYWJzKHMuZGlzdGFuY2UpPjEwKXtpZihzLmNhblRhcD0hMSxzLmluc3RhbmNlLmdyb3VwLmxlbmd0aDwyJiZzLm9wdHMudmVydGljYWw/cy5pc1N3aXBpbmc9XCJ5XCI6cy5pbnN0YW5jZS5pc0RyYWdnaW5nfHxzLm9wdHMudmVydGljYWw9PT0hMXx8XCJhdXRvXCI9PT1zLm9wdHMudmVydGljYWwmJm4odCkud2lkdGgoKT44MDA/cy5pc1N3aXBpbmc9XCJ4XCI6KGE9TWF0aC5hYnMoMTgwKk1hdGguYXRhbjIocy5kaXN0YW5jZVkscy5kaXN0YW5jZVgpL01hdGguUEkpLHMuaXNTd2lwaW5nPWE+NDUmJmE8MTM1P1wieVwiOlwieFwiKSxzLmNhblRhcD0hMSxcInlcIj09PXMuaXNTd2lwaW5nJiZuLmZhbmN5Ym94LmlzTW9iaWxlJiYobChzLiR0YXJnZXQpfHxsKHMuJHRhcmdldC5wYXJlbnQoKSkpKXJldHVybiB2b2lkKHMuaXNTY3JvbGxpbmc9ITApO3MuaW5zdGFuY2UuaXNEcmFnZ2luZz1zLmlzU3dpcGluZyxzLnN0YXJ0UG9pbnRzPXMubmV3UG9pbnRzLG4uZWFjaChzLmluc3RhbmNlLnNsaWRlcyxmdW5jdGlvbih0LGUpe24uZmFuY3lib3guc3RvcChlLiRzbGlkZSksZS4kc2xpZGUuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFwiXCIpLGUuaW5UcmFuc2l0aW9uPSExLGUucG9zPT09cy5pbnN0YW5jZS5jdXJyZW50LnBvcyYmKHMuc2xpZGVyU3RhcnRQb3MubGVmdD1uLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShlLiRzbGlkZSkubGVmdCl9KSxzLmluc3RhbmNlLlNsaWRlU2hvdyYmcy5pbnN0YW5jZS5TbGlkZVNob3cuaXNBY3RpdmUmJnMuaW5zdGFuY2UuU2xpZGVTaG93LnN0b3AoKX19LHUucHJvdG90eXBlLm9uUGFuPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gcyh0Lm5ld1BvaW50c1swXSx0LnJlYWxQb2ludHNbMF0pPChuLmZhbmN5Ym94LmlzTW9iaWxlPzEwOjUpP3ZvaWQodC5zdGFydFBvaW50cz10Lm5ld1BvaW50cyk6KHQuY2FuVGFwPSExLHQuY29udGVudExhc3RQb3M9dC5saW1pdE1vdmVtZW50KCksdC5yZXF1ZXN0SWQmJihpKHQucmVxdWVzdElkKSx0LnJlcXVlc3RJZD1udWxsKSx2b2lkKHQucmVxdWVzdElkPW8oZnVuY3Rpb24oKXtuLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSh0LiRjb250ZW50LHQuY29udGVudExhc3RQb3MpfSkpKX0sdS5wcm90b3R5cGUubGltaXRNb3ZlbWVudD1mdW5jdGlvbigpe3ZhciB0LGUsbixvLGksYSxzPXRoaXMscj1zLmNhbnZhc1dpZHRoLGM9cy5jYW52YXNIZWlnaHQsbD1zLmRpc3RhbmNlWCx1PXMuZGlzdGFuY2VZLGQ9cy5jb250ZW50U3RhcnRQb3MsZj1kLmxlZnQscD1kLnRvcCxoPWQud2lkdGgsZz1kLmhlaWdodDtyZXR1cm4gaT1oPnI/ZitsOmYsYT1wK3UsdD1NYXRoLm1heCgwLC41KnItLjUqaCksZT1NYXRoLm1heCgwLC41KmMtLjUqZyksbj1NYXRoLm1pbihyLWgsLjUqci0uNSpoKSxvPU1hdGgubWluKGMtZywuNSpjLS41KmcpLGg+ciYmKGw+MCYmaT50JiYoaT10LTErTWF0aC5wb3coLXQrZitsLC44KXx8MCksbDwwJiZpPG4mJihpPW4rMS1NYXRoLnBvdyhuLWYtbCwuOCl8fDApKSxnPmMmJih1PjAmJmE+ZSYmKGE9ZS0xK01hdGgucG93KC1lK3ArdSwuOCl8fDApLHU8MCYmYTxvJiYoYT1vKzEtTWF0aC5wb3coby1wLXUsLjgpfHwwKSkse3RvcDphLGxlZnQ6aSxzY2FsZVg6ZC5zY2FsZVgsc2NhbGVZOmQuc2NhbGVZfX0sdS5wcm90b3R5cGUubGltaXRQb3NpdGlvbj1mdW5jdGlvbih0LGUsbixvKXt2YXIgaT10aGlzLGE9aS5jYW52YXNXaWR0aCxzPWkuY2FudmFzSGVpZ2h0O3JldHVybiBuPmE/KHQ9dD4wPzA6dCx0PXQ8YS1uP2Etbjp0KTp0PU1hdGgubWF4KDAsYS8yLW4vMiksbz5zPyhlPWU+MD8wOmUsZT1lPHMtbz9zLW86ZSk6ZT1NYXRoLm1heCgwLHMvMi1vLzIpLHt0b3A6ZSxsZWZ0OnR9fSx1LnByb3RvdHlwZS5vblpvb209ZnVuY3Rpb24oKXt2YXIgZT10aGlzLGE9ZS5jb250ZW50U3RhcnRQb3Mud2lkdGgscj1lLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQsYz1lLmNvbnRlbnRTdGFydFBvcy5sZWZ0LGw9ZS5jb250ZW50U3RhcnRQb3MudG9wLHU9cyhlLm5ld1BvaW50c1swXSxlLm5ld1BvaW50c1sxXSksZD11L2Uuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzLGY9TWF0aC5mbG9vcihhKmQpLHA9TWF0aC5mbG9vcihyKmQpLGg9KGEtZikqZS5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFgsZz0oci1wKSplLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSxiPShlLm5ld1BvaW50c1swXS54K2UubmV3UG9pbnRzWzFdLngpLzItbih0KS5zY3JvbGxMZWZ0KCksbT0oZS5uZXdQb2ludHNbMF0ueStlLm5ld1BvaW50c1sxXS55KS8yLW4odCkuc2Nyb2xsVG9wKCkseT1iLWUuY2VudGVyUG9pbnRTdGFydFgsdj1tLWUuY2VudGVyUG9pbnRTdGFydFkseD1jKyhoK3kpLHc9bCsoZyt2KSwkPXt0b3A6dyxsZWZ0Ongsc2NhbGVYOmUuY29udGVudFN0YXJ0UG9zLnNjYWxlWCpkLHNjYWxlWTplLmNvbnRlbnRTdGFydFBvcy5zY2FsZVkqZH07ZS5jYW5UYXA9ITEsZS5uZXdXaWR0aD1mLGUubmV3SGVpZ2h0PXAsZS5jb250ZW50TGFzdFBvcz0kLGUucmVxdWVzdElkJiYoaShlLnJlcXVlc3RJZCksZS5yZXF1ZXN0SWQ9bnVsbCksZS5yZXF1ZXN0SWQ9byhmdW5jdGlvbigpe24uZmFuY3lib3guc2V0VHJhbnNsYXRlKGUuJGNvbnRlbnQsZS5jb250ZW50TGFzdFBvcyl9KX0sdS5wcm90b3R5cGUub250b3VjaGVuZD1mdW5jdGlvbih0KXt2YXIgbz10aGlzLHM9TWF0aC5tYXgoKG5ldyBEYXRlKS5nZXRUaW1lKCktby5zdGFydFRpbWUsMSkscj1vLmlzU3dpcGluZyxjPW8uaXNQYW5uaW5nLGw9by5pc1pvb21pbmcsdT1vLmlzU2Nyb2xsaW5nO3JldHVybiBvLmVuZFBvaW50cz1hKHQpLG8uJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWNvbnRyb2xzLS1pc0dyYWJiaW5nXCIpLG4oZSkub2ZmKFwiLmZiLnRvdWNoXCIpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLG8ub25zY3JvbGwsITApLG8ucmVxdWVzdElkJiYoaShvLnJlcXVlc3RJZCksby5yZXF1ZXN0SWQ9bnVsbCksby5pc1N3aXBpbmc9ITEsby5pc1Bhbm5pbmc9ITEsby5pc1pvb21pbmc9ITEsby5pc1Njcm9sbGluZz0hMSxvLmluc3RhbmNlLmlzRHJhZ2dpbmc9ITEsby5jYW5UYXA/by5vblRhcCh0KTooby5zcGVlZD0zNjYsby52ZWxvY2l0eVg9by5kaXN0YW5jZVgvcyouNSxvLnZlbG9jaXR5WT1vLmRpc3RhbmNlWS9zKi41LG8uc3BlZWRYPU1hdGgubWF4KC41Km8uc3BlZWQsTWF0aC5taW4oMS41Km8uc3BlZWQsMS9NYXRoLmFicyhvLnZlbG9jaXR5WCkqby5zcGVlZCkpLHZvaWQoYz9vLmVuZFBhbm5pbmcoKTpsP28uZW5kWm9vbWluZygpOm8uZW5kU3dpcGluZyhyLHUpKSl9LHUucHJvdG90eXBlLmVuZFN3aXBpbmc9ZnVuY3Rpb24odCxlKXt2YXIgbz10aGlzLGk9ITEsYT1vLmluc3RhbmNlLmdyb3VwLmxlbmd0aDtvLnNsaWRlckxhc3RQb3M9bnVsbCxcInlcIj09dCYmIWUmJk1hdGguYWJzKG8uZGlzdGFuY2VZKT41MD8obi5mYW5jeWJveC5hbmltYXRlKG8uaW5zdGFuY2UuY3VycmVudC4kc2xpZGUse3RvcDpvLnNsaWRlclN0YXJ0UG9zLnRvcCtvLmRpc3RhbmNlWSsxNTAqby52ZWxvY2l0eVksb3BhY2l0eTowfSwxNTApLGk9by5pbnN0YW5jZS5jbG9zZSghMCwzMDApKTpcInhcIj09dCYmby5kaXN0YW5jZVg+NTAmJmE+MT9pPW8uaW5zdGFuY2UucHJldmlvdXMoby5zcGVlZFgpOlwieFwiPT10JiZvLmRpc3RhbmNlWDwtNTAmJmE+MSYmKGk9by5pbnN0YW5jZS5uZXh0KG8uc3BlZWRYKSksaSE9PSExfHxcInhcIiE9dCYmXCJ5XCIhPXR8fChlfHxhPDI/by5pbnN0YW5jZS5jZW50ZXJTbGlkZShvLmluc3RhbmNlLmN1cnJlbnQsMTUwKTpvLmluc3RhbmNlLmp1bXBUbyhvLmluc3RhbmNlLmN1cnJlbnQuaW5kZXgpKSxvLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpfSx1LnByb3RvdHlwZS5lbmRQYW5uaW5nPWZ1bmN0aW9uKCl7dmFyIHQsZSxvLGk9dGhpcztpLmNvbnRlbnRMYXN0UG9zJiYoaS5vcHRzLm1vbWVudHVtPT09ITE/KHQ9aS5jb250ZW50TGFzdFBvcy5sZWZ0LGU9aS5jb250ZW50TGFzdFBvcy50b3ApOih0PWkuY29udGVudExhc3RQb3MubGVmdCtpLnZlbG9jaXR5WCppLnNwZWVkLGU9aS5jb250ZW50TGFzdFBvcy50b3AraS52ZWxvY2l0eVkqaS5zcGVlZCksbz1pLmxpbWl0UG9zaXRpb24odCxlLGkuY29udGVudFN0YXJ0UG9zLndpZHRoLGkuY29udGVudFN0YXJ0UG9zLmhlaWdodCksby53aWR0aD1pLmNvbnRlbnRTdGFydFBvcy53aWR0aCxvLmhlaWdodD1pLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQsbi5mYW5jeWJveC5hbmltYXRlKGkuJGNvbnRlbnQsbywzMzApKX0sdS5wcm90b3R5cGUuZW5kWm9vbWluZz1mdW5jdGlvbigpe3ZhciB0LGUsbyxpLGE9dGhpcyxzPWEuaW5zdGFuY2UuY3VycmVudCxyPWEubmV3V2lkdGgsYz1hLm5ld0hlaWdodDthLmNvbnRlbnRMYXN0UG9zJiYodD1hLmNvbnRlbnRMYXN0UG9zLmxlZnQsZT1hLmNvbnRlbnRMYXN0UG9zLnRvcCxpPXt0b3A6ZSxsZWZ0OnQsd2lkdGg6cixoZWlnaHQ6YyxzY2FsZVg6MSxzY2FsZVk6MX0sbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoYS4kY29udGVudCxpKSxyPGEuY2FudmFzV2lkdGgmJmM8YS5jYW52YXNIZWlnaHQ/YS5pbnN0YW5jZS5zY2FsZVRvRml0KDE1MCk6cj5zLndpZHRofHxjPnMuaGVpZ2h0P2EuaW5zdGFuY2Uuc2NhbGVUb0FjdHVhbChhLmNlbnRlclBvaW50U3RhcnRYLGEuY2VudGVyUG9pbnRTdGFydFksMTUwKToobz1hLmxpbWl0UG9zaXRpb24odCxlLHIsYyksbi5mYW5jeWJveC5zZXRUcmFuc2xhdGUoYS5jb250ZW50LG4uZmFuY3lib3guZ2V0VHJhbnNsYXRlKGEuJGNvbnRlbnQpKSxuLmZhbmN5Ym94LmFuaW1hdGUoYS4kY29udGVudCxvLDE1MCkpKX0sdS5wcm90b3R5cGUub25UYXA9ZnVuY3Rpb24odCl7dmFyIGUsbz10aGlzLGk9bih0LnRhcmdldCkscz1vLmluc3RhbmNlLHI9cy5jdXJyZW50LGM9dCYmYSh0KXx8by5zdGFydFBvaW50cyxsPWNbMF0/Y1swXS54LW8uJHN0YWdlLm9mZnNldCgpLmxlZnQ6MCx1PWNbMF0/Y1swXS55LW8uJHN0YWdlLm9mZnNldCgpLnRvcDowLGQ9ZnVuY3Rpb24oZSl7dmFyIGk9ci5vcHRzW2VdO2lmKG4uaXNGdW5jdGlvbihpKSYmKGk9aS5hcHBseShzLFtyLHRdKSksaSlzd2l0Y2goaSl7Y2FzZVwiY2xvc2VcIjpzLmNsb3NlKG8uc3RhcnRFdmVudCk7YnJlYWs7Y2FzZVwidG9nZ2xlQ29udHJvbHNcIjpzLnRvZ2dsZUNvbnRyb2xzKCEwKTticmVhaztjYXNlXCJuZXh0XCI6cy5uZXh0KCk7YnJlYWs7Y2FzZVwibmV4dE9yQ2xvc2VcIjpzLmdyb3VwLmxlbmd0aD4xP3MubmV4dCgpOnMuY2xvc2Uoby5zdGFydEV2ZW50KTticmVhaztjYXNlXCJ6b29tXCI6XCJpbWFnZVwiPT1yLnR5cGUmJihyLmlzTG9hZGVkfHxyLiRnaG9zdCkmJihzLmNhblBhbigpP3Muc2NhbGVUb0ZpdCgpOnMuaXNTY2FsZWREb3duKCk/cy5zY2FsZVRvQWN0dWFsKGwsdSk6cy5ncm91cC5sZW5ndGg8MiYmcy5jbG9zZShvLnN0YXJ0RXZlbnQpKX19O2lmKCghdC5vcmlnaW5hbEV2ZW50fHwyIT10Lm9yaWdpbmFsRXZlbnQuYnV0dG9uKSYmKGkuaXMoXCJpbWdcIil8fCEobD5pWzBdLmNsaWVudFdpZHRoK2kub2Zmc2V0KCkubGVmdCkpKXtpZihpLmlzKFwiLmZhbmN5Ym94LWJnLC5mYW5jeWJveC1pbm5lciwuZmFuY3lib3gtb3V0ZXIsLmZhbmN5Ym94LWNvbnRhaW5lclwiKSllPVwiT3V0c2lkZVwiO2Vsc2UgaWYoaS5pcyhcIi5mYW5jeWJveC1zbGlkZVwiKSllPVwiU2xpZGVcIjtlbHNle2lmKCFzLmN1cnJlbnQuJGNvbnRlbnR8fCFzLmN1cnJlbnQuJGNvbnRlbnQuZmluZChpKS5hZGRCYWNrKCkuZmlsdGVyKGkpLmxlbmd0aClyZXR1cm47ZT1cIkNvbnRlbnRcIn1pZihvLnRhcHBlZCl7aWYoY2xlYXJUaW1lb3V0KG8udGFwcGVkKSxvLnRhcHBlZD1udWxsLE1hdGguYWJzKGwtby50YXBYKT41MHx8TWF0aC5hYnModS1vLnRhcFkpPjUwKXJldHVybiB0aGlzO2QoXCJkYmxjbGlja1wiK2UpfWVsc2Ugby50YXBYPWwsby50YXBZPXUsci5vcHRzW1wiZGJsY2xpY2tcIitlXSYmci5vcHRzW1wiZGJsY2xpY2tcIitlXSE9PXIub3B0c1tcImNsaWNrXCIrZV0/by50YXBwZWQ9c2V0VGltZW91dChmdW5jdGlvbigpe28udGFwcGVkPW51bGwsZChcImNsaWNrXCIrZSl9LDUwMCk6ZChcImNsaWNrXCIrZSk7cmV0dXJuIHRoaXN9fSxuKGUpLm9uKFwib25BY3RpdmF0ZS5mYlwiLGZ1bmN0aW9uKHQsZSl7ZSYmIWUuR3Vlc3R1cmVzJiYoZS5HdWVzdHVyZXM9bmV3IHUoZSkpfSl9KHdpbmRvdyxkb2N1bWVudCx3aW5kb3cualF1ZXJ5fHxqUXVlcnkpLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHRlbmQoITAsZS5mYW5jeWJveC5kZWZhdWx0cyx7YnRuVHBsOntzbGlkZVNob3c6JzxidXR0b24gZGF0YS1mYW5jeWJveC1wbGF5IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiIHRpdGxlPVwie3tQTEFZX1NUQVJUfX1cIj48c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj48cGF0aCBkPVwiTTEzLDEyIEwyNywyMCBMMTMsMjcgWlwiIC8+PHBhdGggZD1cIk0xNSwxMCB2MTkgTTIzLDEwIHYxOVwiIC8+PC9zdmc+PC9idXR0b24+J30sc2xpZGVTaG93OnthdXRvU3RhcnQ6ITEsc3BlZWQ6M2UzfX0pO3ZhciBuPWZ1bmN0aW9uKHQpe3RoaXMuaW5zdGFuY2U9dCx0aGlzLmluaXQoKX07ZS5leHRlbmQobi5wcm90b3R5cGUse3RpbWVyOm51bGwsaXNBY3RpdmU6ITEsJGJ1dHRvbjpudWxsLGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuJGJ1dHRvbj10Lmluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXBsYXldXCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe3QudG9nZ2xlKCl9KSwodC5pbnN0YW5jZS5ncm91cC5sZW5ndGg8Mnx8IXQuaW5zdGFuY2UuZ3JvdXBbdC5pbnN0YW5jZS5jdXJySW5kZXhdLm9wdHMuc2xpZGVTaG93KSYmdC4kYnV0dG9uLmhpZGUoKX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5pbnN0YW5jZSYmZS5pbnN0YW5jZS5jdXJyZW50JiYodD09PSEwfHxlLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wfHxlLmluc3RhbmNlLmN1cnJJbmRleDxlLmluc3RhbmNlLmdyb3VwLmxlbmd0aC0xKT9lLnRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmlzQWN0aXZlJiZlLmluc3RhbmNlLmp1bXBUbygoZS5pbnN0YW5jZS5jdXJySW5kZXgrMSklZS5pbnN0YW5jZS5ncm91cC5sZW5ndGgpfSxlLmluc3RhbmNlLmN1cnJlbnQub3B0cy5zbGlkZVNob3cuc3BlZWQpOihlLnN0b3AoKSxlLmluc3RhbmNlLmlkbGVTZWNvbmRzQ291bnRlcj0wLGUuaW5zdGFuY2Uuc2hvd0NvbnRyb2xzKCkpfSxjbGVhcjpmdW5jdGlvbigpe3ZhciB0PXRoaXM7Y2xlYXJUaW1lb3V0KHQudGltZXIpLHQudGltZXI9bnVsbH0sc3RhcnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5pbnN0YW5jZS5jdXJyZW50O2UmJih0LmlzQWN0aXZlPSEwLHQuJGJ1dHRvbi5hdHRyKFwidGl0bGVcIixlLm9wdHMuaTE4bltlLm9wdHMubGFuZ10uUExBWV9TVE9QKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGF1c2VcIiksdC5zZXQoITApKX0sc3RvcDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10Lmluc3RhbmNlLmN1cnJlbnQ7dC5jbGVhcigpLHQuJGJ1dHRvbi5hdHRyKFwidGl0bGVcIixlLm9wdHMuaTE4bltlLm9wdHMubGFuZ10uUExBWV9TVEFSVCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBhdXNlXCIpLmFkZENsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIpLHQuaXNBY3RpdmU9ITF9LHRvZ2dsZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5pc0FjdGl2ZT90LnN0b3AoKTp0LnN0YXJ0KCl9fSksZSh0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe2UmJiFlLlNsaWRlU2hvdyYmKGUuU2xpZGVTaG93PW5ldyBuKGUpKX0sXCJiZWZvcmVTaG93LmZiXCI6ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9ZSYmZS5TbGlkZVNob3c7bz9pJiZuLm9wdHMuc2xpZGVTaG93LmF1dG9TdGFydCYmaS5zdGFydCgpOmkmJmkuaXNBY3RpdmUmJmkuY2xlYXIoKX0sXCJhZnRlclNob3cuZmJcIjpmdW5jdGlvbih0LGUsbil7dmFyIG89ZSYmZS5TbGlkZVNob3c7byYmby5pc0FjdGl2ZSYmby5zZXQoKX0sXCJhZnRlcktleWRvd24uZmJcIjpmdW5jdGlvbihuLG8saSxhLHMpe3ZhciByPW8mJm8uU2xpZGVTaG93OyFyfHwhaS5vcHRzLnNsaWRlU2hvd3x8ODAhPT1zJiYzMiE9PXN8fGUodC5hY3RpdmVFbGVtZW50KS5pcyhcImJ1dHRvbixhLGlucHV0XCIpfHwoYS5wcmV2ZW50RGVmYXVsdCgpLHIudG9nZ2xlKCkpfSxcImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSYmZS5TbGlkZVNob3c7biYmbi5zdG9wKCl9fSksZSh0KS5vbihcInZpc2liaWxpdHljaGFuZ2VcIixmdW5jdGlvbigpe3ZhciBuPWUuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxvPW4mJm4uU2xpZGVTaG93O28mJm8uaXNBY3RpdmUmJih0LmhpZGRlbj9vLmNsZWFyKCk6by5zZXQoKSl9KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeXx8alF1ZXJ5KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKCl7dmFyIGUsbixvLGk9W1tcInJlcXVlc3RGdWxsc2NyZWVuXCIsXCJleGl0RnVsbHNjcmVlblwiLFwiZnVsbHNjcmVlbkVsZW1lbnRcIixcImZ1bGxzY3JlZW5FbmFibGVkXCIsXCJmdWxsc2NyZWVuY2hhbmdlXCIsXCJmdWxsc2NyZWVuZXJyb3JcIl0sW1wid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW5cIixcIndlYmtpdEV4aXRGdWxsc2NyZWVuXCIsXCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudFwiLFwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWRcIixcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiXSxbXCJ3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlblwiLFwid2Via2l0Q2FuY2VsRnVsbFNjcmVlblwiLFwid2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50XCIsXCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuXCIsXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIl0sW1wibW96UmVxdWVzdEZ1bGxTY3JlZW5cIixcIm1vekNhbmNlbEZ1bGxTY3JlZW5cIixcIm1vekZ1bGxTY3JlZW5FbGVtZW50XCIsXCJtb3pGdWxsU2NyZWVuRW5hYmxlZFwiLFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFwibW96ZnVsbHNjcmVlbmVycm9yXCJdLFtcIm1zUmVxdWVzdEZ1bGxzY3JlZW5cIixcIm1zRXhpdEZ1bGxzY3JlZW5cIixcIm1zRnVsbHNjcmVlbkVsZW1lbnRcIixcIm1zRnVsbHNjcmVlbkVuYWJsZWRcIixcIk1TRnVsbHNjcmVlbkNoYW5nZVwiLFwiTVNGdWxsc2NyZWVuRXJyb3JcIl1dLGE9e307Zm9yKG49MDtuPGkubGVuZ3RoO24rKylpZihlPWlbbl0sZSYmZVsxXWluIHQpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspYVtpWzBdW29dXT1lW29dO3JldHVybiBhfXJldHVybiExfSgpO2lmKCFuKXJldHVybiB2b2lkKGUmJmUuZmFuY3lib3gmJihlLmZhbmN5Ym94LmRlZmF1bHRzLmJ0blRwbC5mdWxsU2NyZWVuPSExKSk7dmFyIG89e3JlcXVlc3Q6ZnVuY3Rpb24oZSl7ZT1lfHx0LmRvY3VtZW50RWxlbWVudCxlW24ucmVxdWVzdEZ1bGxzY3JlZW5dKGUuQUxMT1dfS0VZQk9BUkRfSU5QVVQpfSxleGl0OmZ1bmN0aW9uKCl7dFtuLmV4aXRGdWxsc2NyZWVuXSgpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7ZT1lfHx0LmRvY3VtZW50RWxlbWVudCx0aGlzLmlzRnVsbHNjcmVlbigpP3RoaXMuZXhpdCgpOnRoaXMucmVxdWVzdChlKX0saXNGdWxsc2NyZWVuOmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4odFtuLmZ1bGxzY3JlZW5FbGVtZW50XSl9LGVuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0W24uZnVsbHNjcmVlbkVuYWJsZWRdKX19O2UuZXh0ZW5kKCEwLGUuZmFuY3lib3guZGVmYXVsdHMse2J0blRwbDp7ZnVsbFNjcmVlbjonPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW4gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1mdWxsc2NyZWVuXCIgdGl0bGU9XCJ7e0ZVTExfU0NSRUVOfX1cIj48c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj48cGF0aCBkPVwiTTksMTIgaDIyIHYxNiBoLTIyIHYtMTYgdjE2IGgyMiB2LTE2IFpcIiAvPjwvc3ZnPjwvYnV0dG9uPid9LGZ1bGxTY3JlZW46e2F1dG9TdGFydDohMX19KSxlKHQpLm9uKHtcIm9uSW5pdC5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIG47ZSYmZS5ncm91cFtlLmN1cnJJbmRleF0ub3B0cy5mdWxsU2NyZWVuPyhuPWUuJHJlZnMuY29udGFpbmVyLG4ub24oXCJjbGljay5mYi1mdWxsc2NyZWVuXCIsXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiLGZ1bmN0aW9uKHQpe3Quc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpLG8udG9nZ2xlKG5bMF0pfSksZS5vcHRzLmZ1bGxTY3JlZW4mJmUub3B0cy5mdWxsU2NyZWVuLmF1dG9TdGFydD09PSEwJiZvLnJlcXVlc3QoblswXSksZS5GdWxsU2NyZWVuPW8pOmUmJmUuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIikuaGlkZSgpfSxcImFmdGVyS2V5ZG93bi5mYlwiOmZ1bmN0aW9uKHQsZSxuLG8saSl7ZSYmZS5GdWxsU2NyZWVuJiY3MD09PWkmJihvLnByZXZlbnREZWZhdWx0KCksZS5GdWxsU2NyZWVuLnRvZ2dsZShlLiRyZWZzLmNvbnRhaW5lclswXSkpfSxcImJlZm9yZUNsb3NlLmZiXCI6ZnVuY3Rpb24odCl7dCYmdC5GdWxsU2NyZWVuJiZvLmV4aXQoKX19KSxlKHQpLm9uKG4uZnVsbHNjcmVlbmNoYW5nZSxmdW5jdGlvbigpe3ZhciB0PW8uaXNGdWxsc2NyZWVuKCksbj1lLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7biYmKG4uY3VycmVudCYmXCJpbWFnZVwiPT09bi5jdXJyZW50LnR5cGUmJm4uaXNBbmltYXRpbmcmJihuLmN1cnJlbnQuJGNvbnRlbnQuY3NzKFwidHJhbnNpdGlvblwiLFwibm9uZVwiKSxuLmlzQW5pbWF0aW5nPSExLG4udXBkYXRlKCEwLCEwLDApKSxuLnRyaWdnZXIoXCJvbkZ1bGxzY3JlZW5DaGFuZ2VcIix0KSxuLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIix0KSl9KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeXx8alF1ZXJ5KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2UuZmFuY3lib3guZGVmYXVsdHM9ZS5leHRlbmQoITAse2J0blRwbDp7dGh1bWJzOic8YnV0dG9uIGRhdGEtZmFuY3lib3gtdGh1bWJzIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tdGh1bWJzXCIgdGl0bGU9XCJ7e1RIVU1CU319XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDEyMCAxMjBcIj48cGF0aCBkPVwiTTMwLDMwIGgxNCB2MTQgaC0xNCBaIE01MCwzMCBoMTQgdjE0IGgtMTQgWiBNNzAsMzAgaDE0IHYxNCBoLTE0IFogTTMwLDUwIGgxNCB2MTQgaC0xNCBaIE01MCw1MCBoMTQgdjE0IGgtMTQgWiBNNzAsNTAgaDE0IHYxNCBoLTE0IFogTTMwLDcwIGgxNCB2MTQgaC0xNCBaIE01MCw3MCBoMTQgdjE0IGgtMTQgWiBNNzAsNzAgaDE0IHYxNCBoLTE0IFpcIiAvPjwvc3ZnPjwvYnV0dG9uPid9LHRodW1iczp7YXV0b1N0YXJ0OiExLGhpZGVPbkNsb3NlOiEwLHBhcmVudEVsOlwiLmZhbmN5Ym94LWNvbnRhaW5lclwiLGF4aXM6XCJ5XCJ9fSxlLmZhbmN5Ym94LmRlZmF1bHRzKTt2YXIgbj1mdW5jdGlvbih0KXt0aGlzLmluaXQodCl9O2UuZXh0ZW5kKG4ucHJvdG90eXBlLHskYnV0dG9uOm51bGwsJGdyaWQ6bnVsbCwkbGlzdDpudWxsLGlzVmlzaWJsZTohMSxpc0FjdGl2ZTohMSxpbml0OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS5pbnN0YW5jZT10LHQuVGh1bWJzPWU7dmFyIG49dC5ncm91cFswXSxvPXQuZ3JvdXBbMV07ZS5vcHRzPXQuZ3JvdXBbdC5jdXJySW5kZXhdLm9wdHMudGh1bWJzLGUuJGJ1dHRvbj10LiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXRodW1ic11cIiksZS5vcHRzJiZuJiZvJiYoXCJpbWFnZVwiPT1uLnR5cGV8fG4ub3B0cy50aHVtYnx8bi5vcHRzLiR0aHVtYikmJihcImltYWdlXCI9PW8udHlwZXx8by5vcHRzLnRodW1ifHxvLm9wdHMuJHRodW1iKT8oZS4kYnV0dG9uLnNob3coKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtlLnRvZ2dsZSgpfSksZS5pc0FjdGl2ZT0hMCk6ZS4kYnV0dG9uLmhpZGUoKX0sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIHQsbixvPXRoaXMsaT1vLmluc3RhbmNlLGE9by5vcHRzLnBhcmVudEVsO28uJGdyaWQ9ZSgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRodW1icyBmYW5jeWJveC10aHVtYnMtJytvLm9wdHMuYXhpcysnXCI+PC9kaXY+JykuYXBwZW5kVG8oaS4kcmVmcy5jb250YWluZXIuZmluZChhKS5hZGRCYWNrKCkuZmlsdGVyKGEpKSx0PVwiPHVsPlwiLGUuZWFjaChpLmdyb3VwLGZ1bmN0aW9uKGUsbyl7bj1vLm9wdHMudGh1bWJ8fChvLm9wdHMuJHRodW1iP28ub3B0cy4kdGh1bWIuYXR0cihcInNyY1wiKTpudWxsKSxufHxcImltYWdlXCIhPT1vLnR5cGV8fChuPW8uc3JjKSxuJiZuLmxlbmd0aCYmKHQrPSc8bGkgZGF0YS1pbmRleD1cIicrZSsnXCIgIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwiZmFuY3lib3gtdGh1bWJzLWxvYWRpbmdcIj48aW1nIGRhdGEtc3JjPVwiJytuKydcIiAvPjwvbGk+Jyl9KSx0Kz1cIjwvdWw+XCIsby4kbGlzdD1lKHQpLmFwcGVuZFRvKG8uJGdyaWQpLm9uKFwiY2xpY2tcIixcImxpXCIsZnVuY3Rpb24oKXtpLmp1bXBUbyhlKHRoaXMpLmRhdGEoXCJpbmRleFwiKSl9KSxvLiRsaXN0LmZpbmQoXCJpbWdcIikuaGlkZSgpLm9uZShcImxvYWRcIixmdW5jdGlvbigpe3ZhciB0LG4sbyxpLGE9ZSh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXRodW1icy1sb2FkaW5nXCIpLHM9YS5vdXRlcldpZHRoKCkscj1hLm91dGVySGVpZ2h0KCk7dD10aGlzLm5hdHVyYWxXaWR0aHx8dGhpcy53aWR0aCxuPXRoaXMubmF0dXJhbEhlaWdodHx8dGhpcy5oZWlnaHQsbz10L3MsaT1uL3Isbz49MSYmaT49MSYmKG8+aT8odC89aSxuPXIpOih0PXMsbi89bykpLGUodGhpcykuY3NzKHt3aWR0aDpNYXRoLmZsb29yKHQpLGhlaWdodDpNYXRoLmZsb29yKG4pLFwibWFyZ2luLXRvcFwiOm4+cj9NYXRoLmZsb29yKC4zKnItLjMqbik6TWF0aC5mbG9vciguNSpyLS41Km4pLFwibWFyZ2luLWxlZnRcIjpNYXRoLmZsb29yKC41KnMtLjUqdCl9KS5zaG93KCl9KS5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5zcmM9ZSh0aGlzKS5kYXRhKFwic3JjXCIpfSksXCJ4XCI9PT1vLm9wdHMuYXhpcyYmby4kbGlzdC53aWR0aChwYXJzZUludChvLiRncmlkLmNzcyhcInBhZGRpbmctcmlnaHRcIikpK2kuZ3JvdXAubGVuZ3RoKm8uJGxpc3QuY2hpbGRyZW4oKS5lcSgwKS5vdXRlcldpZHRoKCEwKStcInB4XCIpfSxmb2N1czpmdW5jdGlvbih0KXt2YXIgZSxuLG89dGhpcyxpPW8uJGxpc3Q7by5pbnN0YW5jZS5jdXJyZW50JiYoZT1pLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC10aHVtYnMtYWN0aXZlXCIpLmZpbHRlcignW2RhdGEtaW5kZXg9XCInK28uaW5zdGFuY2UuY3VycmVudC5pbmRleCsnXCJdJykuYWRkQ2xhc3MoXCJmYW5jeWJveC10aHVtYnMtYWN0aXZlXCIpLG49ZS5wb3NpdGlvbigpLFwieVwiPT09by5vcHRzLmF4aXMmJihuLnRvcDwwfHxuLnRvcD5pLmhlaWdodCgpLWUub3V0ZXJIZWlnaHQoKSk/aS5zdG9wKCkuYW5pbWF0ZSh7c2Nyb2xsVG9wOmkuc2Nyb2xsVG9wKCkrbi50b3B9LHQpOlwieFwiPT09by5vcHRzLmF4aXMmJihuLmxlZnQ8aS5wYXJlbnQoKS5zY3JvbGxMZWZ0KCl8fG4ubGVmdD5pLnBhcmVudCgpLnNjcm9sbExlZnQoKSsoaS5wYXJlbnQoKS53aWR0aCgpLWUub3V0ZXJXaWR0aCgpKSkmJmkucGFyZW50KCkuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbExlZnQ6bi5sZWZ0fSx0KSl9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy10aHVtYnNcIix0aGlzLmlzVmlzaWJsZSksdGhpcy5pc1Zpc2libGU/KHRoaXMuJGdyaWR8fHRoaXMuY3JlYXRlKCksdGhpcy5pbnN0YW5jZS50cmlnZ2VyKFwib25UaHVtYnNTaG93XCIpLHRoaXMuZm9jdXMoMCkpOnRoaXMuJGdyaWQmJnRoaXMuaW5zdGFuY2UudHJpZ2dlcihcIm9uVGh1bWJzSGlkZVwiKSx0aGlzLmluc3RhbmNlLnVwZGF0ZSgpfSxoaWRlOmZ1bmN0aW9uKCl7dGhpcy5pc1Zpc2libGU9ITEsdGhpcy51cGRhdGUoKX0sc2hvdzpmdW5jdGlvbigpe3RoaXMuaXNWaXNpYmxlPSEwLHRoaXMudXBkYXRlKCl9LHRvZ2dsZTpmdW5jdGlvbigpe3RoaXMuaXNWaXNpYmxlPSF0aGlzLmlzVmlzaWJsZSx0aGlzLnVwZGF0ZSgpfX0pLGUodCkub24oe1wib25Jbml0LmZiXCI6ZnVuY3Rpb24odCxlKXt2YXIgbztlJiYhZS5UaHVtYnMmJihvPW5ldyBuKGUpLG8uaXNBY3RpdmUmJm8ub3B0cy5hdXRvU3RhcnQ9PT0hMCYmby5zaG93KCkpfSxcImJlZm9yZVNob3cuZmJcIjpmdW5jdGlvbih0LGUsbixvKXt2YXIgaT1lJiZlLlRodW1icztpJiZpLmlzVmlzaWJsZSYmaS5mb2N1cyhvPzA6MjUwKX0sXCJhZnRlcktleWRvd24uZmJcIjpmdW5jdGlvbih0LGUsbixvLGkpe3ZhciBhPWUmJmUuVGh1bWJzO2EmJmEuaXNBY3RpdmUmJjcxPT09aSYmKG8ucHJldmVudERlZmF1bHQoKSxhLnRvZ2dsZSgpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZSYmZS5UaHVtYnM7biYmbi5pc1Zpc2libGUmJm4ub3B0cy5oaWRlT25DbG9zZSE9PSExJiZuLiRncmlkLmhpZGUoKX19KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeSksZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKHQpe3ZhciBlPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiMzOTtcIixcIi9cIjpcIiYjeDJGO1wiLFwiYFwiOlwiJiN4NjA7XCIsXCI9XCI6XCImI3gzRDtcIn07cmV0dXJuIFN0cmluZyh0KS5yZXBsYWNlKC9bJjw+XCInYD1cXC9dL2csZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19KX1lLmV4dGVuZCghMCxlLmZhbmN5Ym94LmRlZmF1bHRzLHtidG5UcGw6e3NoYXJlOic8YnV0dG9uIGRhdGEtZmFuY3lib3gtc2hhcmUgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1zaGFyZVwiIHRpdGxlPVwie3tTSEFSRX19XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+PHBhdGggZD1cIk02LDMwIEM4LDE4IDE5LDE2IDIzLDE2IEwyMywxNiBMMjMsMTAgTDMzLDIwIEwyMywyOSBMMjMsMjQgQzE5LDI0IDgsMjcgNiwzMCBaXCI+PC9zdmc+PC9idXR0b24+J30sc2hhcmU6e3RwbDonPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNoYXJlXCI+PGgxPnt7U0hBUkV9fTwvaDE+PHAgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fbGlua3NcIj48YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tZmJcIiBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9e3t1cmx9fVwiPjxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtMjg3IDQ1NnYtMjk5YzAtMjEgNi0zNSAzNS0zNWgzOHYtNjNjLTctMS0yOS0zLTU1LTMtNTQgMC05MSAzMy05MSA5NHYzMDZtMTQzLTI1NGgtMjA1djcyaDE5NlwiIC8+PC9zdmc+PHNwYW4+RmFjZWJvb2s8L3NwYW4+PC9hPjxhIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2J1dHRvbiBmYW5jeWJveC1zaGFyZV9fYnV0dG9uLS1wdFwiIGhyZWY9XCJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLz91cmw9e3t1cmx9fSZkZXNjcmlwdGlvbj17e2Rlc2NyfX0mbWVkaWE9e3ttZWRpYX19XCI+PHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0yNjUgNTZjLTEwOSAwLTE2NCA3OC0xNjQgMTQ0IDAgMzkgMTUgNzQgNDcgODcgNSAyIDEwIDAgMTItNWw0LTE5YzItNiAxLTgtMy0xMy05LTExLTE1LTI1LTE1LTQ1IDAtNTggNDMtMTEwIDExMy0xMTAgNjIgMCA5NiAzOCA5NiA4OCAwIDY3LTMwIDEyMi03MyAxMjItMjQgMC00Mi0xOS0zNi00NCA2LTI5IDIwLTYwIDIwLTgxIDAtMTktMTAtMzUtMzEtMzUtMjUgMC00NCAyNi00NCA2MCAwIDIxIDcgMzYgNyAzNmwtMzAgMTI1Yy04IDM3LTEgODMgMCA4NyAwIDMgNCA0IDUgMiAyLTMgMzItMzkgNDItNzVsMTYtNjRjOCAxNiAzMSAyOSA1NiAyOSA3NCAwIDEyNC02NyAxMjQtMTU3IDAtNjktNTgtMTMyLTE0Ni0xMzJ6XCIgZmlsbD1cIiNmZmZcIi8+PC9zdmc+PHNwYW4+UGludGVyZXN0PC9zcGFuPjwvYT48YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tdHdcIiBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dXJsPXt7dXJsfX0mdGV4dD17e2Rlc2NyfX1cIj48c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwibTQ1NiAxMzNjLTE0IDctMzEgMTEtNDcgMTMgMTctMTAgMzAtMjcgMzctNDYtMTUgMTAtMzQgMTYtNTIgMjAtNjEtNjItMTU3LTctMTQxIDc1LTY4LTMtMTI5LTM1LTE2OS04NS0yMiAzNy0xMSA4NiAyNiAxMDktMTMgMC0yNi00LTM3LTkgMCAzOSAyOCA3MiA2NSA4MC0xMiAzLTI1IDQtMzcgMiAxMCAzMyA0MSA1NyA3NyA1Ny00MiAzMC03NyAzOC0xMjIgMzQgMTcwIDExMSAzNzgtMzIgMzU5LTIwOCAxNi0xMSAzMC0yNSA0MS00MnpcIiAvPjwvc3ZnPjxzcGFuPlR3aXR0ZXI8L3NwYW4+PC9hPjwvcD48cD48aW5wdXQgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwie3t1cmxfcmF3fX1cIiAvPjwvcD48L2Rpdj4nfX0pLGUodCkub24oXCJjbGlja1wiLFwiW2RhdGEtZmFuY3lib3gtc2hhcmVdXCIsZnVuY3Rpb24oKXt2YXIgdCxvLGk9ZS5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO2kmJih0PWkuY3VycmVudC5vcHRzLmhhc2g9PT0hMT9pLmN1cnJlbnQuc3JjOndpbmRvdy5sb2NhdGlvbixvPWkuY3VycmVudC5vcHRzLnNoYXJlLnRwbC5yZXBsYWNlKC9cXHtcXHttZWRpYVxcfVxcfS9nLFwiaW1hZ2VcIj09PWkuY3VycmVudC50eXBlP2VuY29kZVVSSUNvbXBvbmVudChpLmN1cnJlbnQuc3JjKTpcIlwiKS5yZXBsYWNlKC9cXHtcXHt1cmxcXH1cXH0vZyxlbmNvZGVVUklDb21wb25lbnQodCkpLnJlcGxhY2UoL1xce1xce3VybF9yYXdcXH1cXH0vZyxuKHQpKS5yZXBsYWNlKC9cXHtcXHtkZXNjclxcfVxcfS9nLGkuJGNhcHRpb24/ZW5jb2RlVVJJQ29tcG9uZW50KGkuJGNhcHRpb24udGV4dCgpKTpcIlwiKSxlLmZhbmN5Ym94Lm9wZW4oe3NyYzppLnRyYW5zbGF0ZShpLG8pLHR5cGU6XCJodG1sXCIsb3B0czp7YW5pbWF0aW9uRWZmZWN0OlwiZmFkZVwiLGFuaW1hdGlvbkR1cmF0aW9uOjI1MCxhZnRlckxvYWQ6ZnVuY3Rpb24odCxlKXtlLiRjb250ZW50LmZpbmQoXCIuZmFuY3lib3gtc2hhcmVfX2xpbmtzIGFcIikuY2xpY2soZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93Lm9wZW4odGhpcy5ocmVmLFwiU2hhcmVcIixcIndpZHRoPTU1MCwgaGVpZ2h0PTQ1MFwiKSwhMX0pfX19KSl9KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeXx8alF1ZXJ5KSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbygpe3ZhciB0PWUubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksbj10LnNwbGl0KFwiLVwiKSxvPW4ubGVuZ3RoPjEmJi9eXFwrP1xcZCskLy50ZXN0KG5bbi5sZW5ndGgtMV0pP3BhcnNlSW50KG4ucG9wKC0xKSwxMCl8fDE6MSxpPW4uam9pbihcIi1cIik7cmV0dXJuIG88MSYmKG89MSkse2hhc2g6dCxpbmRleDpvLGdhbGxlcnk6aX19ZnVuY3Rpb24gaSh0KXt2YXIgZTtcIlwiIT09dC5nYWxsZXJ5JiYoZT1uKFwiW2RhdGEtZmFuY3lib3g9J1wiK24uZXNjYXBlU2VsZWN0b3IodC5nYWxsZXJ5KStcIiddXCIpLmVxKHQuaW5kZXgtMSksZS5sZW5ndGh8fChlPW4oXCIjXCIrbi5lc2NhcGVTZWxlY3Rvcih0LmdhbGxlcnkpKSksZS5sZW5ndGgmJihzPSExLGUudHJpZ2dlcihcImNsaWNrXCIpKSl9ZnVuY3Rpb24gYSh0KXt2YXIgZTtyZXR1cm4hIXQmJihlPXQuY3VycmVudD90LmN1cnJlbnQub3B0czp0Lm9wdHMsZS5oYXNofHwoZS4kb3JpZz9lLiRvcmlnLmRhdGEoXCJmYW5jeWJveFwiKTpcIlwiKSl9bi5lc2NhcGVTZWxlY3Rvcnx8KG4uZXNjYXBlU2VsZWN0b3I9ZnVuY3Rpb24odCl7dmFyIGU9LyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2csbj1mdW5jdGlvbih0LGUpe3JldHVybiBlP1wiXFwwXCI9PT10P1wi77+9XCI6dC5zbGljZSgwLC0xKStcIlxcXFxcIit0LmNoYXJDb2RlQXQodC5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK3R9O3JldHVybih0K1wiXCIpLnJlcGxhY2UoZSxuKX0pO3ZhciBzPSEwLHI9bnVsbCxjPW51bGw7bihmdW5jdGlvbigpe24uZmFuY3lib3guZGVmYXVsdHMuaGFzaCE9PSExJiYobih0KS5vbih7XCJvbkluaXQuZmJcIjpmdW5jdGlvbih0LGUpe3ZhciBuLGk7ZS5ncm91cFtlLmN1cnJJbmRleF0ub3B0cy5oYXNoIT09ITEmJihuPW8oKSxpPWEoZSksaSYmbi5nYWxsZXJ5JiZpPT1uLmdhbGxlcnkmJihlLmN1cnJJbmRleD1uLmluZGV4LTEpKX0sXCJiZWZvcmVTaG93LmZiXCI6ZnVuY3Rpb24obixvLGkpe3ZhciBsO2kmJmkub3B0cy5oYXNoIT09ITEmJihsPWEobyksbCYmXCJcIiE9PWwmJihlLmxvY2F0aW9uLmhhc2guaW5kZXhPZihsKTwwJiYoby5vcHRzLm9yaWdIYXNoPWUubG9jYXRpb24uaGFzaCkscj1sKyhvLmdyb3VwLmxlbmd0aD4xP1wiLVwiKyhpLmluZGV4KzEpOlwiXCIpLFwicmVwbGFjZVN0YXRlXCJpbiBlLmhpc3Rvcnk/KGMmJmNsZWFyVGltZW91dChjKSxjPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmhpc3Rvcnlbcz9cInB1c2hTdGF0ZVwiOlwicmVwbGFjZVN0YXRlXCJdKHt9LHQudGl0bGUsZS5sb2NhdGlvbi5wYXRobmFtZStlLmxvY2F0aW9uLnNlYXJjaCtcIiNcIityKSxjPW51bGwscz0hMX0sMzAwKSk6ZS5sb2NhdGlvbi5oYXNoPXIpKX0sXCJiZWZvcmVDbG9zZS5mYlwiOmZ1bmN0aW9uKG8saSxzKXt2YXIgbCx1O2MmJmNsZWFyVGltZW91dChjKSxzLm9wdHMuaGFzaCE9PSExJiYobD1hKGkpLHU9aSYmaS5vcHRzLm9yaWdIYXNoP2kub3B0cy5vcmlnSGFzaDpcIlwiLGwmJlwiXCIhPT1sJiYoXCJyZXBsYWNlU3RhdGVcImluIGhpc3Rvcnk/ZS5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSx0LnRpdGxlLGUubG9jYXRpb24ucGF0aG5hbWUrZS5sb2NhdGlvbi5zZWFyY2grdSk6KGUubG9jYXRpb24uaGFzaD11LG4oZSkuc2Nyb2xsVG9wKGkuc2Nyb2xsVG9wKS5zY3JvbGxMZWZ0KGkuc2Nyb2xsTGVmdCkpKSxyPW51bGwpfX0pLG4oZSkub24oXCJoYXNoY2hhbmdlLmZiXCIsZnVuY3Rpb24oKXt2YXIgdD1vKCk7bi5mYW5jeWJveC5nZXRJbnN0YW5jZSgpPyFyfHxyPT09dC5nYWxsZXJ5K1wiLVwiK3QuaW5kZXh8fDE9PT10LmluZGV4JiZyPT10LmdhbGxlcnl8fChyPW51bGwsbi5mYW5jeWJveC5jbG9zZSgpKTpcIlwiIT09dC5nYWxsZXJ5JiZpKHQpfSksc2V0VGltZW91dChmdW5jdGlvbigpe2kobygpKX0sNTApKX0pfShkb2N1bWVudCx3aW5kb3csd2luZG93LmpRdWVyeXx8alF1ZXJ5KSxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3ZhciBuPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2UodCkub24oe1wib25Jbml0LmZiXCI6ZnVuY3Rpb24odCxlLG8pe2UuJHJlZnMuc3RhZ2Uub24oXCJtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsIHdoZWVsIE1vek1vdXNlUGl4ZWxTY3JvbGxcIixmdW5jdGlvbih0KXt2YXIgbz1lLmN1cnJlbnQsaT0obmV3IERhdGUpLmdldFRpbWUoKTtlLmdyb3VwLmxlbmd0aDwxfHxvLm9wdHMud2hlZWw9PT0hMXx8XCJhdXRvXCI9PT1vLm9wdHMud2hlZWwmJlwiaW1hZ2VcIiE9PW8udHlwZXx8KHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLG8uJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIil8fCh0PXQub3JpZ2luYWxFdmVudHx8dCxpLW48MjUwfHwobj1pLGVbKC10LmRlbHRhWXx8LXQuZGVsdGFYfHx0LndoZWVsRGVsdGF8fC10LmRldGFpbCk8MD9cIm5leHRcIjpcInByZXZpb3VzXCJdKCkpKSl9KX19KX0oZG9jdW1lbnQsd2luZG93LmpRdWVyeXx8alF1ZXJ5KTsiLCIvKipcclxuICogalF1ZXJ5IENTUyBDdXN0b21pemFibGUgU2Nyb2xsYmFyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDE1LCBZdXJpeSBLaGFiYXJvdlxyXG4gKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy5cclxuICpcclxuICogSWYgeW91IGZvdW5kIGJ1ZywgcGxlYXNlIGNvbnRhY3QgbWUgdmlhIGVtYWlsIDwxM3JlYWwwMDhAZ21haWwuY29tPlxyXG4gKlxyXG4gKiBAYXV0aG9yIFl1cml5IEtoYWJhcm92IGFrYSBHcm9tb1xyXG4gKiBAdmVyc2lvbiAwLjIuMTFcclxuICogQHVybCBodHRwczovL2dpdGh1Yi5jb20vZ3JvbW8vanF1ZXJ5LnNjcm9sbGJhci9cclxuICpcclxuICovXHJcbjtcclxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KHJvb3QualF1ZXJ5KTtcclxuICAgIH1cclxufSh0aGlzLCBmdW5jdGlvbiAoJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIGluaXQgZmxhZ3MgJiB2YXJpYWJsZXNcclxuICAgIHZhciBkZWJ1ZyA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBicm93c2VyID0ge1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgaW5kZXg6IDAsXHJcbiAgICAgICAgICAgIG5hbWU6ICdzY3JvbGxiYXInXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJlZm94OiAvZmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXHJcbiAgICAgICAgbWFjb3N4OiAvbWFjL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pLFxyXG4gICAgICAgIG1zZWRnZTogL2VkZ2VcXC9cXGQrL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcclxuICAgICAgICBtc2llOiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxyXG4gICAgICAgIG1vYmlsZTogL2FuZHJvaWR8d2Vib3N8aXBob25lfGlwYWR8aXBvZHxibGFja2JlcnJ5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcclxuICAgICAgICBvdmVybGF5OiBudWxsLFxyXG4gICAgICAgIHNjcm9sbDogbnVsbCxcclxuICAgICAgICBzY3JvbGxzOiBbXSxcclxuICAgICAgICB3ZWJraXQ6IC93ZWJraXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICEvZWRnZVxcL1xcZCsvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXHJcbiAgICB9O1xyXG5cclxuICAgIGJyb3dzZXIuc2Nyb2xscy5hZGQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZShpbnN0YW5jZSkucHVzaChpbnN0YW5jZSk7XHJcbiAgICB9O1xyXG4gICAgYnJvd3Nlci5zY3JvbGxzLnJlbW92ZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHdoaWxlICgkLmluQXJyYXkoaW5zdGFuY2UsIHRoaXMpID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zcGxpY2UoJC5pbkFycmF5KGluc3RhbmNlLCB0aGlzKSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgYXV0b1Njcm9sbFNpemU6IHRydWUsIC8vIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHNjcm9sbHNpemVcclxuICAgICAgICBhdXRvVXBkYXRlOiB0cnVlLCAvLyB1cGRhdGUgc2Nyb2xsYmFyIGlmIGNvbnRlbnQvY29udGFpbmVyIHNpemUgY2hhbmdlZFxyXG4gICAgICAgIGRlYnVnOiBmYWxzZSwgLy8gZGVidWcgbW9kZVxyXG4gICAgICAgIGRpc2FibGVCb2R5U2Nyb2xsOiBmYWxzZSwgLy8gZGlzYWJsZSBib2R5IHNjcm9sbCBpZiBtb3VzZSBvdmVyIGNvbnRhaW5lclxyXG4gICAgICAgIGR1cmF0aW9uOiAyMDAsIC8vIHNjcm9sbCBhbmltYXRlIGR1cmF0aW9uIGluIG1zXHJcbiAgICAgICAgaWdub3JlTW9iaWxlOiBmYWxzZSwgLy8gaWdub3JlIG1vYmlsZSBkZXZpY2VzXHJcbiAgICAgICAgaWdub3JlT3ZlcmxheTogZmFsc2UsIC8vIGlnbm9yZSBicm93c2VycyB3aXRoIG92ZXJsYXkgc2Nyb2xsYmFycyAobW9iaWxlLCBNYWNPUylcclxuICAgICAgICBpc1J0bDogZmFsc2UsIC8vIGlzIFJUTFxyXG4gICAgICAgIHNjcm9sbFN0ZXA6IDMwLCAvLyBzY3JvbGwgc3RlcCBmb3Igc2Nyb2xsYmFyIGFycm93c1xyXG4gICAgICAgIHNob3dBcnJvd3M6IGZhbHNlLCAvLyBhZGQgY2xhc3MgdG8gc2hvdyBhcnJvd3NcclxuICAgICAgICBzdGVwU2Nyb2xsaW5nOiB0cnVlLCAvLyB3aGVuIHNjcm9sbGluZyB0byBzY3JvbGxiYXIgbW91c2Vkb3duIHBvc2l0aW9uXHJcblxyXG4gICAgICAgIHNjcm9sbHg6IG51bGwsIC8vIGhvcml6b250YWwgc2Nyb2xsIGVsZW1lbnRcclxuICAgICAgICBzY3JvbGx5OiBudWxsLCAvLyB2ZXJ0aWNhbCBzY3JvbGwgZWxlbWVudFxyXG5cclxuICAgICAgICBvbkRlc3Ryb3k6IG51bGwsIC8vIGNhbGxiYWNrIGZ1bmN0aW9uIG9uIGRlc3Ryb3ksXHJcbiAgICAgICAgb25GYWxsYmFjazogbnVsbCwgLy8gY2FsbGJhY2sgZnVuY3Rpb24gaWYgc2Nyb2xsYmFyIGlzIG5vdCBpbml0aWFsaXplZFxyXG4gICAgICAgIG9uSW5pdDogbnVsbCwgLy8gY2FsbGJhY2sgZnVuY3Rpb24gb24gZmlyc3QgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICBvblNjcm9sbDogbnVsbCwgLy8gY2FsbGJhY2sgZnVuY3Rpb24gb24gY29udGVudCBzY3JvbGxpbmdcclxuICAgICAgICBvblVwZGF0ZTogbnVsbCAgICAgICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uIG9uIGluaXQvcmVzaXplIChiZWZvcmUgc2Nyb2xsYmFyIHNpemUgY2FsY3VsYXRpb24pXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB2YXIgQmFzZVNjcm9sbGJhciA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuXHJcbiAgICAgICAgaWYgKCFicm93c2VyLnNjcm9sbCkge1xyXG4gICAgICAgICAgICBicm93c2VyLm92ZXJsYXkgPSBpc1Njcm9sbE92ZXJsYXlzQ29udGVudCgpO1xyXG4gICAgICAgICAgICBicm93c2VyLnNjcm9sbCA9IGdldEJyb3dzZXJTY3JvbGxTaXplKCk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVNjcm9sbGJhcnMoKTtcclxuXHJcbiAgICAgICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcmNlVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5zY3JvbGwgJiYgKGJyb3dzZXIuc2Nyb2xsLmhlaWdodCB8fCBicm93c2VyLnNjcm9sbC53aWR0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gZ2V0QnJvd3NlclNjcm9sbFNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsLmhlaWdodCAhPT0gYnJvd3Nlci5zY3JvbGwuaGVpZ2h0IHx8IHNjcm9sbC53aWR0aCAhPT0gYnJvd3Nlci5zY3JvbGwud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci5zY3JvbGwgPSBzY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlID0gdHJ1ZTsgLy8gaGFuZGxlIHBhZ2Ugem9vbVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVNjcm9sbGJhcnMoZm9yY2VVcGRhdGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMubmFtZXNwYWNlID0gJy5zY3JvbGxiYXJfJyArIGJyb3dzZXIuZGF0YS5pbmRleCsrO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgd2luZG93LmpRdWVyeVNjcm9sbGJhck9wdGlvbnMgfHwge30pO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xseCA9IHt9O1xyXG4gICAgICAgIHRoaXMuc2Nyb2xseSA9IHt9O1xyXG5cclxuICAgICAgICBjb250YWluZXIuZGF0YShicm93c2VyLmRhdGEubmFtZSwgdGhpcyk7XHJcbiAgICAgICAgYnJvd3Nlci5zY3JvbGxzLmFkZCh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgQmFzZVNjcm9sbGJhci5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLndyYXBwZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRGF0YShicm93c2VyLmRhdGEubmFtZSk7XHJcbiAgICAgICAgICAgIGJyb3dzZXIuc2Nyb2xscy5yZW1vdmUodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IHZhcmlhYmxlc1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbExlZnQoKTtcclxuICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRoaXMud3JhcHBlcikuY3NzKHtcclxuICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcIm1hcmdpblwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgXCJtYXgtaGVpZ2h0XCI6IFwiXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsLWNvbnRlbnQgc2Nyb2xsLXNjcm9sbHhfdmlzaWJsZSBzY3JvbGwtc2Nyb2xseV92aXNpYmxlJylcclxuICAgICAgICAgICAgICAgIC5vZmYodGhpcy5uYW1lc3BhY2UpXHJcbiAgICAgICAgICAgICAgICAuc2Nyb2xsTGVmdChzY3JvbGxMZWZ0KVxyXG4gICAgICAgICAgICAgICAgLnNjcm9sbFRvcChzY3JvbGxUb3ApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zY3JvbGx4LnNjcm9sbC5yZW1vdmVDbGFzcygnc2Nyb2xsLXNjcm9sbHhfdmlzaWJsZScpLmZpbmQoJ2RpdicpLmFkZEJhY2soKS5vZmYodGhpcy5uYW1lc3BhY2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbHkuc2Nyb2xsLnJlbW92ZUNsYXNzKCdzY3JvbGwtc2Nyb2xseV92aXNpYmxlJykuZmluZCgnZGl2JykuYWRkQmFjaygpLm9mZih0aGlzLm5hbWVzcGFjZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndyYXBwZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5hZGQoJ2JvZHknKS5vZmYodGhpcy5uYW1lc3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMub25EZXN0cm95KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uRGVzdHJveS5hcHBseSh0aGlzLCBbdGhpcy5jb250YWluZXJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgdmFyaWFibGVzXHJcbiAgICAgICAgICAgIHZhciBTID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGMgPSB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGN3ID0gdGhpcy5jb250YWluZXJXcmFwcGVyIHx8IGMsXHJcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2UgPSB0aGlzLm5hbWVzcGFjZSxcclxuICAgICAgICAgICAgICAgIG8gPSAkLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMgfHwge30pLFxyXG4gICAgICAgICAgICAgICAgcyA9IHt4OiB0aGlzLnNjcm9sbHgsIHk6IHRoaXMuc2Nyb2xseX0sXHJcbiAgICAgICAgICAgICAgICB3ID0gdGhpcy53cmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgY3NzT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGluaXRTY3JvbGwgPSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0OiBjLnNjcm9sbExlZnQoKSxcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogYy5zY3JvbGxUb3AoKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gZG8gbm90IGluaXQgaWYgaW4gaWdub3JhYmxlIGJyb3dzZXJcclxuICAgICAgICAgICAgaWYgKChicm93c2VyLm1vYmlsZSAmJiBvLmlnbm9yZU1vYmlsZSlcclxuICAgICAgICAgICAgICAgIHx8IChicm93c2VyLm92ZXJsYXkgJiYgby5pZ25vcmVPdmVybGF5KVxyXG4gICAgICAgICAgICAgICAgfHwgKGJyb3dzZXIubWFjb3N4ICYmICFicm93c2VyLndlYmtpdCkgLy8gc3RpbGwgcmVxdWlyZWQgdG8gaWdub3JlIG5vbldlYktpdCBicm93c2VycyBvbiBNYWNcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG8ub25GYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBvLm9uRmFsbGJhY2suYXBwbHkodGhpcywgW2NdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBzY3JvbGwgY29udGFpbmVyXHJcbiAgICAgICAgICAgIGlmICghdykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyID0gdyA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3Njcm9sbC13cmFwcGVyJykuYWRkQ2xhc3MoYy5hdHRyKCdjbGFzcycpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ3Bvc2l0aW9uJywgYy5jc3MoJ3Bvc2l0aW9uJykgPT09ICdhYnNvbHV0ZScgPyAnYWJzb2x1dGUnIDogJ3JlbGF0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0QmVmb3JlKGMpLmFwcGVuZChjKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoby5pc1J0bCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHcuYWRkQ2xhc3MoJ3Njcm9sbC0tcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGMuaXMoJ3RleHRhcmVhJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lcldyYXBwZXIgPSBjdyA9ICQoJzxkaXY+JykuaW5zZXJ0QmVmb3JlKGMpLmFwcGVuZChjKTtcclxuICAgICAgICAgICAgICAgICAgICB3LmFkZENsYXNzKCdzY3JvbGwtdGV4dGFyZWEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjc3NPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBicm93c2VyLnNjcm9sbC5oZWlnaHQgKiAtMSArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtYXgtaGVpZ2h0XCI6IFwiXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjc3NPcHRpb25zW28uaXNSdGwgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi1yaWdodCddID0gYnJvd3Nlci5zY3JvbGwud2lkdGggKiAtMSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgY3cuYWRkQ2xhc3MoJ3Njcm9sbC1jb250ZW50JykuY3NzKGNzc09wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGMub24oJ3Njcm9sbCcgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gYy5zY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IGMuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uaXNSdGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Via2l0ICAgMDoxMDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWUvZWRnZSAgMTAwOjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyZWZveCAtMTAwOjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJyb3dzZXIuZmlyZWZveDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0ID0gTWF0aC5hYnMoc2Nyb2xsTGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJyb3dzZXIubXNlZGdlIHx8IGJyb3dzZXIubXNpZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0ID0gY1swXS5zY3JvbGxXaWR0aCAtIGNbMF0uY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oby5vblNjcm9sbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5vblNjcm9sbC5jYWxsKFMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbDogcy55Lm1heFNjcm9sbE9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbDogc2Nyb2xsVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogcy55LnNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBzLnkudmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhTY3JvbGw6IHMueC5tYXhTY3JvbGxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IHNjcm9sbExlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBzLnguc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHMueC52aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzLnguaXNWaXNpYmxlICYmIHMueC5zY3JvbGwuYmFyLmNzcygnbGVmdCcsIHNjcm9sbExlZnQgKiBzLngua3ggKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICBzLnkuaXNWaXNpYmxlICYmIHMueS5zY3JvbGwuYmFyLmNzcygndG9wJywgc2Nyb2xsVG9wICogcy55Lmt4ICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBwcmV2ZW50IG5hdGl2ZSBzY3JvbGxiYXJzIHRvIGJlIHZpc2libGUgb24gI2FuY2hvciBjbGljayAqL1xyXG4gICAgICAgICAgICAgICAgdy5vbignc2Nyb2xsJyArIG5hbWVzcGFjZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHcuc2Nyb2xsVG9wKDApLnNjcm9sbExlZnQoMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoby5kaXNhYmxlQm9keVNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVNb3VzZVNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsU2Nyb2xsKGV2ZW50KSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnkuaXNWaXNpYmxlICYmIHMueS5tb3VzZXdoZWVsKGV2ZW50KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnguaXNWaXNpYmxlICYmIHMueC5tb3VzZXdoZWVsKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHcub24oJ01vek1vdXNlUGl4ZWxTY3JvbGwnICsgbmFtZXNwYWNlLCBoYW5kbGVNb3VzZVNjcm9sbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdy5vbignbW91c2V3aGVlbCcgKyBuYW1lc3BhY2UsIGhhbmRsZU1vdXNlU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIubW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHcub24oJ3RvdWNoc3RhcnQnICsgbmFtZXNwYWNlLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0gfHwgZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxUb3VjaCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlWDogdG91Y2gucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVk6IHRvdWNoLnBhZ2VZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2Nyb2xsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGMuc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogYy5zY3JvbGxUb3AoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCd0b3VjaG1vdmUnICsgbmFtZXNwYWNlLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSBldmVudC5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdIHx8IGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2Nyb2xsTGVmdChvcmlnaW5hbFNjcm9sbC5sZWZ0ICsgb3JpZ2luYWxUb3VjaC5wYWdlWCAtIHRvdWNoLnBhZ2VYKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnNjcm9sbFRvcChvcmlnaW5hbFNjcm9sbC50b3AgKyBvcmlnaW5hbFRvdWNoLnBhZ2VZIC0gdG91Y2gucGFnZVkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCd0b3VjaGVuZCcgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYobmFtZXNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG8ub25Jbml0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ub25Jbml0LmFwcGx5KHRoaXMsIFtjXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjc3NPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBicm93c2VyLnNjcm9sbC5oZWlnaHQgKiAtMSArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtYXgtaGVpZ2h0XCI6IFwiXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjc3NPcHRpb25zW28uaXNSdGwgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi1yaWdodCddID0gYnJvd3Nlci5zY3JvbGwud2lkdGggKiAtMSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBjdy5jc3MoY3NzT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGluaXQgc2Nyb2xsYmFycyAmIHJlY2FsY3VsYXRlIHNpemVzXHJcbiAgICAgICAgICAgICQuZWFjaChzLCBmdW5jdGlvbiAoZCwgc2Nyb2xseCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWxsYmFjayA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRm9yd2FyZCA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gKGQgPT09ICd4JykgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJztcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxTdGVwID0gby5zY3JvbGxTdGVwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gY1tzY3JvbGxPZmZzZXRdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY1tzY3JvbGxPZmZzZXRdKGN1cnJlbnRPZmZzZXQgKyBzY3JvbGxTdGVwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsRm9yd2FyZCA9PSAxICYmIChjdXJyZW50T2Zmc2V0ICsgc2Nyb2xsU3RlcCkgPj0gc2Nyb2xsVG9WYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9mZnNldCA9IGNbc2Nyb2xsT2Zmc2V0XSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxGb3J3YXJkID09IC0xICYmIChjdXJyZW50T2Zmc2V0ICsgc2Nyb2xsU3RlcCkgPD0gc2Nyb2xsVG9WYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9mZnNldCA9IGNbc2Nyb2xsT2Zmc2V0XSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjW3Njcm9sbE9mZnNldF0oKSA9PSBjdXJyZW50T2Zmc2V0ICYmIHNjcm9sbENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvVmFsdWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc2Nyb2xseC5zY3JvbGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xseC5zY3JvbGwgPSBTLl9nZXRTY3JvbGwob1snc2Nyb2xsJyArIGRdKS5hZGRDbGFzcygnc2Nyb2xsLScgKyBkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uc2hvd0Fycm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbC5hZGRDbGFzcygnc2Nyb2xsLWVsZW1lbnRfYXJyb3dzX3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbHgubW91c2V3aGVlbCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzY3JvbGx4LmlzVmlzaWJsZSB8fCAoZCA9PT0gJ3gnICYmIGlzVmVydGljYWxTY3JvbGwoZXZlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPT09ICd5JyAmJiAhaXNWZXJ0aWNhbFNjcm9sbChldmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMueC5tb3VzZXdoZWVsKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgKiAtMSB8fCBldmVudC5vcmlnaW5hbEV2ZW50LmRldGFpbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heFNjcm9sbFZhbHVlID0gc2Nyb2xseC5zaXplIC0gc2Nyb2xseC52aXNpYmxlIC0gc2Nyb2xseC5vZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXggbmV3IG1vemlsbGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWx0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPT09ICd4JyAmJiAhIWV2ZW50Lm9yaWdpbmFsRXZlbnQuZGVsdGFYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LmRlbHRhWCAqIDQwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkID09PSAneScgJiYgISFldmVudC5vcmlnaW5hbEV2ZW50LmRlbHRhWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhID0gZXZlbnQub3JpZ2luYWxFdmVudC5kZWx0YVkgKiA0MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChkZWx0YSA+IDAgJiYgc2Nyb2xsVG9WYWx1ZSA8IG1heFNjcm9sbFZhbHVlKSB8fCAoZGVsdGEgPCAwICYmIHNjcm9sbFRvVmFsdWUgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9WYWx1ZSA9IHNjcm9sbFRvVmFsdWUgKyBkZWx0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxUb1ZhbHVlIDwgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb1ZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxUb1ZhbHVlID4gbWF4U2Nyb2xsVmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9WYWx1ZSA9IG1heFNjcm9sbFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFMuc2Nyb2xsVG8gPSBTLnNjcm9sbFRvIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUy5zY3JvbGxUb1tzY3JvbGxPZmZzZXRdID0gc2Nyb2xsVG9WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTLnNjcm9sbFRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc3RvcCgpLmFuaW1hdGUoUy5zY3JvbGxUbywgMjQwLCAnbGluZWFyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9WYWx1ZSA9IGNbc2Nyb2xsT2Zmc2V0XSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUy5zY3JvbGxUbyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ01vek1vdXNlUGl4ZWxTY3JvbGwnICsgbmFtZXNwYWNlLCBzY3JvbGx4Lm1vdXNld2hlZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignbW91c2V3aGVlbCcgKyBuYW1lc3BhY2UsIHNjcm9sbHgubW91c2V3aGVlbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyJyArIG5hbWVzcGFjZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9WYWx1ZSA9IGNbc2Nyb2xsT2Zmc2V0XSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGFycm93cyAmIHNjcm9sbCBpbm5lciBtb3VzZWRvd24gZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbC5maW5kKCcuc2Nyb2xsLWFycm93LCAuc2Nyb2xsLWVsZW1lbnRfdHJhY2snKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ21vdXNlZG93bicgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCAhPSAxKSAvLyBsbWJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxGb3J3YXJkID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE9mZnNldDogZXZlbnRbKGQgPT09ICd4JykgPyAncGFnZVgnIDogJ3BhZ2VZJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2Nyb2xsVmFsdWU6IHNjcm9sbHguc2l6ZSAtIHNjcm9sbHgudmlzaWJsZSAtIHNjcm9sbHgub2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhck9mZnNldDogc2Nyb2xseC5zY3JvbGwuYmFyLm9mZnNldCgpWyhkID09PSAneCcpID8gJ2xlZnQnIDogJ3RvcCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhclNpemU6IHNjcm9sbHguc2Nyb2xsLmJhclsoZCA9PT0gJ3gnKSA/ICdvdXRlcldpZHRoJyA6ICdvdXRlckhlaWdodCddKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IDAsIHRpbWVyID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2Nyb2xsLWFycm93JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxGb3J3YXJkID0gJCh0aGlzKS5oYXNDbGFzcyhcInNjcm9sbC1hcnJvd19tb3JlXCIpID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFN0ZXAgPSBvLnNjcm9sbFN0ZXAgKiBzY3JvbGxGb3J3YXJkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvVmFsdWUgPSBzY3JvbGxGb3J3YXJkID4gMCA/IGRhdGEubWF4U2Nyb2xsVmFsdWUgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmlzUnRsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnJvd3Nlci5maXJlZm94OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvVmFsdWUgPSBzY3JvbGxGb3J3YXJkID4gMCA/IDA6IGRhdGEubWF4U2Nyb2xsVmFsdWUgKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnJvd3Nlci5tc2llIHx8IGJyb3dzZXIubXNlZGdlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxGb3J3YXJkID0gKGRhdGEuZXZlbnRPZmZzZXQgPiAoZGF0YS5zY3JvbGxiYXJPZmZzZXQgKyBkYXRhLnNjcm9sbGJhclNpemUpID8gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChkYXRhLmV2ZW50T2Zmc2V0IDwgZGF0YS5zY3JvbGxiYXJPZmZzZXQgPyAtMSA6IDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkID09PSAneCcgJiYgby5pc1J0bCAmJiAoYnJvd3Nlci5tc2llIHx8IGJyb3dzZXIubXNlZGdlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsRm9yd2FyZCA9IHNjcm9sbEZvcndhcmQgKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxTdGVwID0gTWF0aC5yb3VuZChzY3JvbGx4LnZpc2libGUgKiAwLjc1KSAqIHNjcm9sbEZvcndhcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9WYWx1ZSA9IChkYXRhLmV2ZW50T2Zmc2V0IC0gZGF0YS5zY3JvbGxiYXJPZmZzZXQgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoby5zdGVwU2Nyb2xsaW5nID8gKHNjcm9sbEZvcndhcmQgPT0gMSA/IGRhdGEuc2Nyb2xsYmFyU2l6ZSA6IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgucm91bmQoZGF0YS5zY3JvbGxiYXJTaXplIC8gMikpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb1ZhbHVlID0gY1tzY3JvbGxPZmZzZXRdKCkgKyAoc2Nyb2xsVG9WYWx1ZSAvIHNjcm9sbHgua3gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFMuc2Nyb2xsVG8gPSBTLnNjcm9sbFRvIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUy5zY3JvbGxUb1tzY3JvbGxPZmZzZXRdID0gby5zdGVwU2Nyb2xsaW5nID8gY1tzY3JvbGxPZmZzZXRdKCkgKyBzY3JvbGxTdGVwIDogc2Nyb2xsVG9WYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5zdGVwU2Nyb2xsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvVmFsdWUgPSBjW3Njcm9sbE9mZnNldF0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChzY3JvbGxUbywgNDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG8uZHVyYXRpb24gKyAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTLnNjcm9sbFRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYW5pbWF0ZShTLnNjcm9sbFRvLCBvLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUy5zY3JvbGxUbyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFMuX2hhbmRsZU1vdXNlRG93bihzY3JvbGxDYWxsYmFjaywgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHNjcm9sbGJhciBkcmFnJ24nZHJvcFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbHguc2Nyb2xsLmJhci5vbignbW91c2Vkb3duJyArIG5hbWVzcGFjZSwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggIT0gMSkgLy8gbG1iXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFBvc2l0aW9uID0gZXZlbnRbKGQgPT09ICd4JykgPyAncGFnZVgnIDogJ3BhZ2VZJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0T2Zmc2V0ID0gY1tzY3JvbGxPZmZzZXRdKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbC5hZGRDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ21vdXNlbW92ZScgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBwYXJzZUludCgoZXZlbnRbKGQgPT09ICd4JykgPyAncGFnZVgnIDogJ3BhZ2VZJ10gLSBldmVudFBvc2l0aW9uKSAvIHNjcm9sbHgua3gsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09PSAneCcgJiYgby5pc1J0bCAmJiAoYnJvd3Nlci5tc2llIHx8IGJyb3dzZXIubXNlZGdlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gZGlmZiAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY1tzY3JvbGxPZmZzZXRdKGluaXRPZmZzZXQgKyBkaWZmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUy5faGFuZGxlTW91c2VEb3duKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbHguc2Nyb2xsLnJlbW92ZUNsYXNzKCdzY3JvbGwtZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb1ZhbHVlID0gY1tzY3JvbGxPZmZzZXRdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmUgY2xhc3NlcyAmIHJlc2V0IGFwcGxpZWQgc3R5bGVzXHJcbiAgICAgICAgICAgICQuZWFjaChzLCBmdW5jdGlvbiAoZCwgc2Nyb2xseCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbENsYXNzID0gJ3Njcm9sbC1zY3JvbGwnICsgZCArICdfdmlzaWJsZSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xseSA9IChkID09IFwieFwiKSA/IHMueSA6IHMueDtcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbC5yZW1vdmVDbGFzcyhzY3JvbGxDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGx5LnNjcm9sbC5yZW1vdmVDbGFzcyhzY3JvbGxDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBjdy5yZW1vdmVDbGFzcyhzY3JvbGxDbGFzcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGluaXQgc2l6ZXNcclxuICAgICAgICAgICAgJC5lYWNoKHMsIGZ1bmN0aW9uIChkLCBzY3JvbGx4KSB7XHJcbiAgICAgICAgICAgICAgICAkLmV4dGVuZChzY3JvbGx4LCAoZCA9PSBcInhcIikgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBwYXJzZUludChjLmNzcygnbGVmdCcpLCAxMCkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiBjLnByb3AoJ3Njcm9sbFdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdy53aWR0aCgpXHJcbiAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogcGFyc2VJbnQoYy5jc3MoJ3RvcCcpLCAxMCkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiBjLnByb3AoJ3Njcm9sbEhlaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHcuaGVpZ2h0KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzY3JvbGxiYXIgdmlzaWJpbGl0eS9kaW1lbnNpb25zXHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbCgneCcsIHRoaXMuc2Nyb2xseCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbCgneScsIHRoaXMuc2Nyb2xseSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG8ub25VcGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBvLm9uVXBkYXRlLmFwcGx5KHRoaXMsIFtjXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBzY3JvbGwgc2l6ZVxyXG4gICAgICAgICAgICAkLmVhY2gocywgZnVuY3Rpb24gKGQsIHNjcm9sbHgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3NzT2Zmc2V0ID0gKGQgPT09ICd4JykgPyAnbGVmdCcgOiAndG9wJztcclxuICAgICAgICAgICAgICAgIHZhciBjc3NGdWxsU2l6ZSA9IChkID09PSAneCcpID8gJ291dGVyV2lkdGgnIDogJ291dGVySGVpZ2h0JztcclxuICAgICAgICAgICAgICAgIHZhciBjc3NTaXplID0gKGQgPT09ICd4JykgPyAnd2lkdGgnIDogJ2hlaWdodCc7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyc2VJbnQoYy5jc3MoY3NzT2Zmc2V0KSwgMTApIHx8IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIEFyZWFTaXplID0gc2Nyb2xseC5zaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIEFyZWFWaXNpYmxlID0gc2Nyb2xseC52aXNpYmxlICsgb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxTaXplID0gc2Nyb2xseC5zY3JvbGwuc2l6ZVtjc3NGdWxsU2l6ZV0oKSArIChwYXJzZUludChzY3JvbGx4LnNjcm9sbC5zaXplLmNzcyhjc3NPZmZzZXQpLCAxMCkgfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG8uYXV0b1Njcm9sbFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGx4LnNjcm9sbGJhclNpemUgPSBwYXJzZUludChzY3JvbGxTaXplICogQXJlYVZpc2libGUgLyBBcmVhU2l6ZSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbHguc2Nyb2xsLmJhci5jc3MoY3NzU2l6ZSwgc2Nyb2xseC5zY3JvbGxiYXJTaXplICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xseC5zY3JvbGxiYXJTaXplID0gc2Nyb2xseC5zY3JvbGwuYmFyW2Nzc0Z1bGxTaXplXSgpO1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xseC5reCA9ICgoc2Nyb2xsU2l6ZSAtIHNjcm9sbHguc2Nyb2xsYmFyU2l6ZSkgLyAoQXJlYVNpemUgLSBBcmVhVmlzaWJsZSkpIHx8IDE7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGx4Lm1heFNjcm9sbE9mZnNldCA9IEFyZWFTaXplIC0gQXJlYVZpc2libGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYy5zY3JvbGxMZWZ0KGluaXRTY3JvbGwuc2Nyb2xsTGVmdCkuc2Nyb2xsVG9wKGluaXRTY3JvbGwuc2Nyb2xsVG9wKS50cmlnZ2VyKCdzY3JvbGwnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCBzY3JvbGx4L3Njcm9sbHkgb2JqZWN0XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge01peGVkfSBzY3JvbGxcclxuICAgICAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fSBzY3JvbGwgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2dldFNjcm9sbDogZnVuY3Rpb24gKHNjcm9sbCkge1xyXG4gICAgICAgICAgICB2YXIgdHlwZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBhZHZhbmNlZDogW1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRcIj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRfY29ybmVyXCI+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNjcm9sbC1hcnJvdyBzY3JvbGwtYXJyb3dfbGVzc1wiPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzY3JvbGwtYXJyb3cgc2Nyb2xsLWFycm93X21vcmVcIj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRfb3V0ZXJcIj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRfc2l6ZVwiPjwvZGl2PicsIC8vIHJlcXVpcmVkISB1c2VkIGZvciBzY3JvbGxiYXIgc2l6ZSBjYWxjdWxhdGlvbiAhXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzY3JvbGwtZWxlbWVudF9pbm5lci13cmFwcGVyXCI+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNjcm9sbC1lbGVtZW50X2lubmVyIHNjcm9sbC1lbGVtZW50X3RyYWNrXCI+JywgLy8gdXNlZCBmb3IgaGFuZGxpbmcgc2Nyb2xsYmFyIGNsaWNrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzY3JvbGwtZWxlbWVudF9pbm5lci1ib3R0b21cIj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWJhclwiPicsIC8vIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzY3JvbGwtYmFyX2JvZHlcIj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWJhcl9ib2R5LWlubmVyXCI+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNjcm9sbC1iYXJfYm90dG9tXCI+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNjcm9sbC1iYXJfY2VudGVyXCI+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICAgICAgICAgXS5qb2luKCcnKSxcclxuICAgICAgICAgICAgICAgIHNpbXBsZTogW1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRcIj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRfb3V0ZXJcIj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWVsZW1lbnRfc2l6ZVwiPjwvZGl2PicsIC8vIHJlcXVpcmVkISB1c2VkIGZvciBzY3JvbGxiYXIgc2l6ZSBjYWxjdWxhdGlvbiAhXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzY3JvbGwtZWxlbWVudF90cmFja1wiPjwvZGl2PicsIC8vIHVzZWQgZm9yIGhhbmRsaW5nIHNjcm9sbGJhciBjbGlja1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsLWJhclwiPjwvZGl2PicsIC8vIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcclxuICAgICAgICAgICAgICAgIF0uam9pbignJylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKHR5cGVzW3Njcm9sbF0pIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbCA9IHR5cGVzW3Njcm9sbF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzY3JvbGwpIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbCA9IHR5cGVzWydzaW1wbGUnXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChzY3JvbGwpID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGwgPSAkKHNjcm9sbCkuYXBwZW5kVG8odGhpcy53cmFwcGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbCA9ICQoc2Nyb2xsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkLmV4dGVuZChzY3JvbGwsIHtcclxuICAgICAgICAgICAgICAgIGJhcjogc2Nyb2xsLmZpbmQoJy5zY3JvbGwtYmFyJyksXHJcbiAgICAgICAgICAgICAgICBzaXplOiBzY3JvbGwuZmluZCgnLnNjcm9sbC1lbGVtZW50X3NpemUnKSxcclxuICAgICAgICAgICAgICAgIHRyYWNrOiBzY3JvbGwuZmluZCgnLnNjcm9sbC1lbGVtZW50X3RyYWNrJylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzY3JvbGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfaGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gdGhpcy5uYW1lc3BhY2U7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignYmx1cicgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmFkZCgnYm9keScpLm9mZihuYW1lc3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdkcmFnc3RhcnQnICsgbmFtZXNwYWNlLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignbW91c2V1cCcgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmFkZCgnYm9keScpLm9mZihuYW1lc3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5vbignc2VsZWN0c3RhcnQnICsgbmFtZXNwYWNlLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3VwZGF0ZVNjcm9sbDogZnVuY3Rpb24gKGQsIHNjcm9sbHgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcldyYXBwZXIgPSB0aGlzLmNvbnRhaW5lcldyYXBwZXIgfHwgY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsQ2xhc3MgPSAnc2Nyb2xsLXNjcm9sbCcgKyBkICsgJ192aXNpYmxlJyxcclxuICAgICAgICAgICAgICAgIHNjcm9sbHkgPSAoZCA9PT0gJ3gnKSA/IHRoaXMuc2Nyb2xseSA6IHRoaXMuc2Nyb2xseCxcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlSW50KHRoaXMuY29udGFpbmVyLmNzcygoZCA9PT0gJ3gnKSA/ICdsZWZ0JyA6ICd0b3AnKSwgMTApIHx8IDAsXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyID0gdGhpcy53cmFwcGVyO1xyXG5cclxuICAgICAgICAgICAgdmFyIEFyZWFTaXplID0gc2Nyb2xseC5zaXplO1xyXG4gICAgICAgICAgICB2YXIgQXJlYVZpc2libGUgPSBzY3JvbGx4LnZpc2libGUgKyBvZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICBzY3JvbGx4LmlzVmlzaWJsZSA9IChBcmVhU2l6ZSAtIEFyZWFWaXNpYmxlKSA+IDE7IC8vIGJ1ZyBpbiBJRTkvMTEgd2l0aCAxcHggZGlmZlxyXG4gICAgICAgICAgICBpZiAoc2Nyb2xseC5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbHguc2Nyb2xsLmFkZENsYXNzKHNjcm9sbENsYXNzKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbHkuc2Nyb2xsLmFkZENsYXNzKHNjcm9sbENsYXNzKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcldyYXBwZXIuYWRkQ2xhc3Moc2Nyb2xsQ2xhc3MpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xseC5zY3JvbGwucmVtb3ZlQ2xhc3Moc2Nyb2xsQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xseS5zY3JvbGwucmVtb3ZlQ2xhc3Moc2Nyb2xsQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyV3JhcHBlci5yZW1vdmVDbGFzcyhzY3JvbGxDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkID09PSAneScpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIuaXMoJ3RleHRhcmVhJykgfHwgQXJlYVNpemUgPCBBcmVhVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcldyYXBwZXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogKEFyZWFWaXNpYmxlICsgYnJvd3Nlci5zY3JvbGwuaGVpZ2h0KSArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF4LWhlaWdodFwiOiBcIm5vbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJXcmFwcGVyLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXCJoZWlnaHRcIjogXCJhdXRvXCIsIC8vIGRvIG5vdCByZXNldCBoZWlnaHQgdmFsdWU6IGlzc3VlIHdpdGggaGVpZ2h0OjEwMCUhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF4LWhlaWdodFwiOiAoQXJlYVZpc2libGUgKyBicm93c2VyLnNjcm9sbC5oZWlnaHQpICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2Nyb2xseC5zaXplICE9IGNvbnRhaW5lci5wcm9wKCdzY3JvbGxXaWR0aCcpXHJcbiAgICAgICAgICAgICAgICB8fCBzY3JvbGx5LnNpemUgIT0gY29udGFpbmVyLnByb3AoJ3Njcm9sbEhlaWdodCcpXHJcbiAgICAgICAgICAgICAgICB8fCBzY3JvbGx4LnZpc2libGUgIT0gd3JhcHBlci53aWR0aCgpXHJcbiAgICAgICAgICAgICAgICB8fCBzY3JvbGx5LnZpc2libGUgIT0gd3JhcHBlci5oZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfHwgc2Nyb2xseC5vZmZzZXQgIT0gKHBhcnNlSW50KGNvbnRhaW5lci5jc3MoJ2xlZnQnKSwgMTApIHx8IDApXHJcbiAgICAgICAgICAgICAgICB8fCBzY3JvbGx5Lm9mZnNldCAhPSAocGFyc2VJbnQoY29udGFpbmVyLmNzcygndG9wJyksIDEwKSB8fCAwKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMuc2Nyb2xseCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogcGFyc2VJbnQoY29udGFpbmVyLmNzcygnbGVmdCcpLCAxMCkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiBjb250YWluZXIucHJvcCgnc2Nyb2xsV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB3cmFwcGVyLndpZHRoKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQodGhpcy5zY3JvbGx5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBwYXJzZUludChjb250YWluZXIuY3NzKCd0b3AnKSwgMTApIHx8IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5jb250YWluZXIucHJvcCgnc2Nyb2xsSGVpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogd3JhcHBlci5oZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTY3JvbGwoZCA9PT0gJ3gnID8gJ3knIDogJ3gnLCBzY3JvbGx5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIEN1c3RvbVNjcm9sbGJhciA9IEJhc2VTY3JvbGxiYXI7XHJcblxyXG4gICAgLypcclxuICAgICAqIEV4dGVuZCBqUXVlcnkgYXMgcGx1Z2luXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtNaXhlZH0gY29tbWFuZCB0byBleGVjdXRlXHJcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhcmd1bWVudHMgYXMgQXJyYXlcclxuICAgICAqIEByZXR1cm4ge2pRdWVyeX1cclxuICAgICAqL1xyXG4gICAgJC5mbi5zY3JvbGxiYXIgPSBmdW5jdGlvbiAoY29tbWFuZCwgYXJncykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tbWFuZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgYXJncyA9IGNvbW1hbmQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSAnaW5pdCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgYXJncyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISQuaXNBcnJheShhcmdzKSkge1xyXG4gICAgICAgICAgICBhcmdzID0gW2FyZ3NdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vdCgnYm9keSwgLnNjcm9sbC13cmFwcGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gZWxlbWVudC5kYXRhKGJyb3dzZXIuZGF0YS5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlIHx8IGNvbW1hbmQgPT09ICdpbml0Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IEN1c3RvbVNjcm9sbGJhcihlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZVtjb21tYW5kXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlW2NvbW1hbmRdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbm5lY3QgZGVmYXVsdCBvcHRpb25zIHRvIGdsb2JhbCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgJC5mbi5zY3JvbGxiYXIub3B0aW9ucyA9IGRlZmF1bHRzO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHNjcm9sbCBjb250ZW50L2NvbnRhaW5lciBzaXplIGlzIGNoYW5nZWRcclxuICAgICAqL1xyXG5cclxuICAgIHZhciB1cGRhdGVTY3JvbGxiYXJzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGltZXIgPSAwLFxyXG4gICAgICAgICAgICB0aW1lckNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZvcmNlKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBjb250YWluZXIsIG9wdGlvbnMsIHNjcm9sbCwgd3JhcHBlciwgc2Nyb2xseCwgc2Nyb2xseTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJyb3dzZXIuc2Nyb2xscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsID0gYnJvd3Nlci5zY3JvbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gc2Nyb2xsLmNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBzY3JvbGwub3B0aW9ucztcclxuICAgICAgICAgICAgICAgIHdyYXBwZXIgPSBzY3JvbGwud3JhcHBlcjtcclxuICAgICAgICAgICAgICAgIHNjcm9sbHggPSBzY3JvbGwuc2Nyb2xseDtcclxuICAgICAgICAgICAgICAgIHNjcm9sbHkgPSBzY3JvbGwuc2Nyb2xseTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JjZSB8fCAob3B0aW9ucy5hdXRvVXBkYXRlICYmIHdyYXBwZXIgJiYgd3JhcHBlci5pcygnOnZpc2libGUnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29udGFpbmVyLnByb3AoJ3Njcm9sbFdpZHRoJykgIT0gc2Nyb2xseC5zaXplIHx8IGNvbnRhaW5lci5wcm9wKCdzY3JvbGxIZWlnaHQnKSAhPSBzY3JvbGx5LnNpemUgfHwgd3JhcHBlci53aWR0aCgpICE9IHNjcm9sbHgudmlzaWJsZSB8fCB3cmFwcGVyLmhlaWdodCgpICE9IHNjcm9sbHkudmlzaWJsZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsLmluaXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5sb2coe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0OiBjb250YWluZXIucHJvcCgnc2Nyb2xsSGVpZ2h0JykgKyAnOicgKyBzY3JvbGwuc2Nyb2xseS5zaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsV2lkdGg6IGNvbnRhaW5lci5wcm9wKCdzY3JvbGxXaWR0aCcpICsgJzonICsgc2Nyb2xsLnNjcm9sbHguc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGVIZWlnaHQ6IHdyYXBwZXIuaGVpZ2h0KCkgKyAnOicgKyBzY3JvbGwuc2Nyb2xseS52aXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVdpZHRoOiB3cmFwcGVyLndpZHRoKCkgKyAnOicgKyBzY3JvbGwuc2Nyb2xseC52aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lckNvdW50ZXIrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlYnVnICYmIHRpbWVyQ291bnRlciA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZygnU2Nyb2xsIHVwZGF0ZXMgZXhjZWVkIDEwJyk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxiYXJzID0gZnVuY3Rpb24gKCkge307XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHVwZGF0ZVNjcm9sbGJhcnMsIDMwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICAvKiBBRERJVElPTkFMIEZVTkNUSU9OUyAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgbmF0aXZlIGJyb3dzZXIgc2Nyb2xsYmFyIHNpemUgKGhlaWdodC93aWR0aClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFjdHVhbCBzaXplIG9yIENTUyBzaXplLCBkZWZhdWx0IC0gQ1NTIHNpemVcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHdpdGggaGVpZ2h0LCB3aWR0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRCcm93c2VyU2Nyb2xsU2l6ZShhY3R1YWxTaXplKSB7XHJcblxyXG4gICAgICAgIGlmIChicm93c2VyLndlYmtpdCAmJiAhYWN0dWFsU2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghYnJvd3Nlci5kYXRhLm91dGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBjc3MgPSB7XHJcbiAgICAgICAgICAgICAgICBcImJvcmRlclwiOiBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIFwiYm94LXNpemluZ1wiOiBcImNvbnRlbnQtYm94XCIsXHJcbiAgICAgICAgICAgICAgICBcImhlaWdodFwiOiBcIjIwMHB4XCIsXHJcbiAgICAgICAgICAgICAgICBcIm1hcmdpblwiOiBcIjBcIixcclxuICAgICAgICAgICAgICAgIFwicGFkZGluZ1wiOiBcIjBcIixcclxuICAgICAgICAgICAgICAgIFwid2lkdGhcIjogXCIyMDBweFwiXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyb3dzZXIuZGF0YS5pbm5lciA9ICQoXCI8ZGl2PlwiKS5jc3MoJC5leHRlbmQoe30sIGNzcykpO1xyXG4gICAgICAgICAgICBicm93c2VyLmRhdGEub3V0ZXIgPSAkKFwiPGRpdj5cIikuY3NzKCQuZXh0ZW5kKHtcclxuICAgICAgICAgICAgICAgIFwibGVmdFwiOiBcIi0xMDAwcHhcIixcclxuICAgICAgICAgICAgICAgIFwib3ZlcmZsb3dcIjogXCJzY3JvbGxcIixcclxuICAgICAgICAgICAgICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0b3BcIjogXCItMTAwMHB4XCJcclxuICAgICAgICAgICAgfSwgY3NzKSkuYXBwZW5kKGJyb3dzZXIuZGF0YS5pbm5lcikuYXBwZW5kVG8oXCJib2R5XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJvd3Nlci5kYXRhLm91dGVyLnNjcm9sbExlZnQoMTAwMCkuc2Nyb2xsVG9wKDEwMDApO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGguY2VpbCgoYnJvd3Nlci5kYXRhLm91dGVyLm9mZnNldCgpLnRvcCAtIGJyb3dzZXIuZGF0YS5pbm5lci5vZmZzZXQoKS50b3ApIHx8IDApLFxyXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5jZWlsKChicm93c2VyLmRhdGEub3V0ZXIub2Zmc2V0KCkubGVmdCAtIGJyb3dzZXIuZGF0YS5pbm5lci5vZmZzZXQoKS5sZWZ0KSB8fCAwKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBuYXRpdmUgYnJvd3NlciBzY3JvbGxiYXJzIG92ZXJsYXkgY29udGVudFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpc1Njcm9sbE92ZXJsYXlzQ29udGVudCgpIHtcclxuICAgICAgICB2YXIgc2Nyb2xsU2l6ZSA9IGdldEJyb3dzZXJTY3JvbGxTaXplKHRydWUpO1xyXG4gICAgICAgIHJldHVybiAhKHNjcm9sbFNpemUuaGVpZ2h0IHx8IHNjcm9sbFNpemUud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzVmVydGljYWxTY3JvbGwoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQ7XHJcbiAgICAgICAgaWYgKGUuYXhpcyAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKGUud2hlZWxEZWx0YVgpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRlbmQgQW5ndWxhckpTIGFzIFVJIGRpcmVjdGl2ZVxyXG4gICAgICogYW5kIGV4cG9zZSBhIHByb3ZpZGVyIGZvciBvdmVycmlkZSBkZWZhdWx0IGNvbmZpZ1xyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgaWYgKHdpbmRvdy5hbmd1bGFyKSB7XHJcbiAgICAgICAgKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdqUXVlcnlTY3JvbGxiYXInLCBbXSlcclxuICAgICAgICAgICAgICAgIC5wcm92aWRlcignalF1ZXJ5U2Nyb2xsYmFyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogYW5ndWxhci5jb3B5KGRlZmF1bHRPcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmRpcmVjdGl2ZSgnanF1ZXJ5U2Nyb2xsYmFyJywgWydqUXVlcnlTY3JvbGxiYXInLCAnJHBhcnNlJywgZnVuY3Rpb24gKGpRdWVyeVNjcm9sbGJhciwgJHBhcnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdHJpY3Q6IFwiQUNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gJHBhcnNlKGF0dHJzLmpxdWVyeVNjcm9sbGJhciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IG1vZGVsKHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsYmFyKG9wdGlvbnMgfHwgalF1ZXJ5U2Nyb2xsYmFyLm9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxiYXIoJ2Rlc3Ryb3knKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfSkod2luZG93LmFuZ3VsYXIpO1xyXG4gICAgfVxyXG59KSk7XHJcbiIsIi8qIVxyXG4gKiBTZWxlY3QyIDQuMC4xM1xyXG4gKiBodHRwczovL3NlbGVjdDIuZ2l0aHViLmlvXHJcbiAqXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc2VsZWN0Mi9zZWxlY3QyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcclxuICovXHJcbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHtcclxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgLy8gTm9kZS9Db21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdCwgalF1ZXJ5KSB7XHJcbiAgICAgIGlmIChqUXVlcnkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIHJlcXVpcmUoJ2pRdWVyeScpIHJldHVybnMgYSBmYWN0b3J5IHRoYXQgcmVxdWlyZXMgd2luZG93IHRvXHJcbiAgICAgICAgLy8gYnVpbGQgYSBqUXVlcnkgaW5zdGFuY2UsIHdlIG5vcm1hbGl6ZSBob3cgd2UgdXNlIG1vZHVsZXNcclxuICAgICAgICAvLyB0aGF0IHJlcXVpcmUgdGhpcyBwYXR0ZXJuIGJ1dCB0aGUgd2luZG93IHByb3ZpZGVkIGlzIGEgbm9vcFxyXG4gICAgICAgIC8vIGlmIGl0J3MgZGVmaW5lZCAoaG93IGpxdWVyeSB3b3JrcylcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpKHJvb3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBmYWN0b3J5KGpRdWVyeSk7XHJcbiAgICAgIHJldHVybiBqUXVlcnk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgIGZhY3RvcnkoalF1ZXJ5KTtcclxuICB9XHJcbn0gKGZ1bmN0aW9uIChqUXVlcnkpIHtcclxuICAvLyBUaGlzIGlzIG5lZWRlZCBzbyB3ZSBjYW4gY2F0Y2ggdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBhbmQgdXNlIGl0XHJcbiAgLy8gVGhlIGlubmVyIGZpbGUgc2hvdWxkIGJlIHdyYXBwZWQgKGJ5IGBiYW5uZXIuc3RhcnQuanNgKSBpbiBhIGZ1bmN0aW9uIHRoYXRcclxuICAvLyByZXR1cm5zIHRoZSBBTUQgbG9hZGVyIHJlZmVyZW5jZXMuXHJcbiAgdmFyIFMyID0oZnVuY3Rpb24gKCkge1xyXG4gIC8vIFJlc3RvcmUgdGhlIFNlbGVjdDIgQU1EIGxvYWRlciBzbyBpdCBjYW4gYmUgdXNlZFxyXG4gIC8vIE5lZWRlZCBtb3N0bHkgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLCB3aGVyZSB0aGUgbG9hZGVyIGlzIG5vdCBpbnNlcnRlZFxyXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuICYmIGpRdWVyeS5mbi5zZWxlY3QyICYmIGpRdWVyeS5mbi5zZWxlY3QyLmFtZCkge1xyXG4gICAgdmFyIFMyID0galF1ZXJ5LmZuLnNlbGVjdDIuYW1kO1xyXG4gIH1cclxudmFyIFMyOyhmdW5jdGlvbiAoKSB7IGlmICghUzIgfHwgIVMyLnJlcXVpcmVqcykge1xyXG5pZiAoIVMyKSB7IFMyID0ge307IH0gZWxzZSB7IHJlcXVpcmUgPSBTMjsgfVxyXG4vKipcclxuICogQGxpY2Vuc2UgYWxtb25kIDAuMy4zIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzLlxyXG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSwgaHR0cDovL2dpdGh1Yi5jb20vcmVxdWlyZWpzL2FsbW9uZC9MSUNFTlNFXHJcbiAqL1xyXG4vL0dvaW5nIHNsb3BweSB0byBhdm9pZCAndXNlIHN0cmljdCcgc3RyaW5nIGNvc3QsIGJ1dCBzdHJpY3QgcHJhY3RpY2VzIHNob3VsZFxyXG4vL2JlIGZvbGxvd2VkLlxyXG4vKmdsb2JhbCBzZXRUaW1lb3V0OiBmYWxzZSAqL1xyXG5cclxudmFyIHJlcXVpcmVqcywgcmVxdWlyZSwgZGVmaW5lO1xyXG4oZnVuY3Rpb24gKHVuZGVmKSB7XHJcbiAgICB2YXIgbWFpbiwgcmVxLCBtYWtlTWFwLCBoYW5kbGVycyxcclxuICAgICAgICBkZWZpbmVkID0ge30sXHJcbiAgICAgICAgd2FpdGluZyA9IHt9LFxyXG4gICAgICAgIGNvbmZpZyA9IHt9LFxyXG4gICAgICAgIGRlZmluaW5nID0ge30sXHJcbiAgICAgICAgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcclxuICAgICAgICBhcHMgPSBbXS5zbGljZSxcclxuICAgICAgICBqc1N1ZmZpeFJlZ0V4cCA9IC9cXC5qcyQvO1xyXG5cclxuICAgIGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7XHJcbiAgICAgICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwgcHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lLCBsaWtlIC4vc29tZXRoaW5nLCBub3JtYWxpemUgaXQgdG9cclxuICAgICAqIGEgcmVhbCBuYW1lIHRoYXQgY2FuIGJlIG1hcHBlZCB0byBhIHBhdGguXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgcmVsYXRpdmUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2VOYW1lIGEgcmVhbCBuYW1lIHRoYXQgdGhlIG5hbWUgYXJnIGlzIHJlbGF0aXZlXHJcbiAgICAgKiB0by5cclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IG5vcm1hbGl6ZWQgbmFtZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHtcclxuICAgICAgICB2YXIgbmFtZVBhcnRzLCBuYW1lU2VnbWVudCwgbWFwVmFsdWUsIGZvdW5kTWFwLCBsYXN0SW5kZXgsXHJcbiAgICAgICAgICAgIGZvdW5kSSwgZm91bmRTdGFyTWFwLCBzdGFySSwgaSwgaiwgcGFydCwgbm9ybWFsaXplZEJhc2VQYXJ0cyxcclxuICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUgJiYgYmFzZU5hbWUuc3BsaXQoXCIvXCIpLFxyXG4gICAgICAgICAgICBtYXAgPSBjb25maWcubWFwLFxyXG4gICAgICAgICAgICBzdGFyTWFwID0gKG1hcCAmJiBtYXBbJyonXSkgfHwge307XHJcblxyXG4gICAgICAgIC8vQWRqdXN0IGFueSByZWxhdGl2ZSBwYXRocy5cclxuICAgICAgICBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICBsYXN0SW5kZXggPSBuYW1lLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3YW50aW5nIG5vZGUgSUQgY29tcGF0aWJpbGl0eSwgc3RyaXAgLmpzIGZyb20gZW5kXHJcbiAgICAgICAgICAgIC8vIG9mIElEcy4gSGF2ZSB0byBkbyB0aGlzIGhlcmUsIGFuZCBub3QgaW4gbmFtZVRvVXJsXHJcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugbm9kZSBhbGxvd3MgZWl0aGVyIC5qcyBvciBub24gLmpzIHRvIG1hcFxyXG4gICAgICAgICAgICAvLyB0byBzYW1lIGZpbGUuXHJcbiAgICAgICAgICAgIGlmIChjb25maWcubm9kZUlkQ29tcGF0ICYmIGpzU3VmZml4UmVnRXhwLnRlc3QobmFtZVtsYXN0SW5kZXhdKSkge1xyXG4gICAgICAgICAgICAgICAgbmFtZVtsYXN0SW5kZXhdID0gbmFtZVtsYXN0SW5kZXhdLnJlcGxhY2UoanNTdWZmaXhSZWdFeHAsICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3RhcnRzIHdpdGggYSAnLicgc28gbmVlZCB0aGUgYmFzZU5hbWVcclxuICAgICAgICAgICAgaWYgKG5hbWVbMF0uY2hhckF0KDApID09PSAnLicgJiYgYmFzZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnZlcnQgYmFzZU5hbWUgdG8gYXJyYXksIGFuZCBsb3Agb2ZmIHRoZSBsYXN0IHBhcnQsXHJcbiAgICAgICAgICAgICAgICAvL3NvIHRoYXQgLiBtYXRjaGVzIHRoYXQgJ2RpcmVjdG9yeScgYW5kIG5vdCBuYW1lIG9mIHRoZSBiYXNlTmFtZSdzXHJcbiAgICAgICAgICAgICAgICAvL21vZHVsZS4gRm9yIGluc3RhbmNlLCBiYXNlTmFtZSBvZiAnb25lL3R3by90aHJlZScsIG1hcHMgdG9cclxuICAgICAgICAgICAgICAgIC8vJ29uZS90d28vdGhyZWUuanMnLCBidXQgd2Ugd2FudCB0aGUgZGlyZWN0b3J5LCAnb25lL3R3bycgZm9yXHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgbm9ybWFsaXphdGlvbi5cclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRCYXNlUGFydHMgPSBiYXNlUGFydHMuc2xpY2UoMCwgYmFzZVBhcnRzLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZWRCYXNlUGFydHMuY29uY2F0KG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3N0YXJ0IHRyaW1Eb3RzXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0ID0gbmFtZVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSAnLicpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhdCB0aGUgc3RhcnQsIG9yIHByZXZpb3VzIHZhbHVlIGlzIHN0aWxsIC4uLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgdGhlbSBzbyB0aGF0IHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCBpdCBtYXlcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdGlsbCB3b3JrIHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCwgZXZlbiB0aG91Z2hcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBhbiBJRCBpdCBpcyBsZXNzIHRoYW4gaWRlYWwuIEluIGxhcmdlciBwb2ludFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGVhc2VzLCBtYXkgYmUgYmV0dGVyIHRvIGp1c3Qga2ljayBvdXQgYW4gZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgKGkgPT09IDEgJiYgbmFtZVsyXSA9PT0gJy4uJykgfHwgbmFtZVtpIC0gMV0gPT09ICcuLicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnNwbGljZShpIC0gMSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9lbmQgdHJpbURvdHNcclxuXHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLmpvaW4oJy8nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vQXBwbHkgbWFwIGNvbmZpZyBpZiBhdmFpbGFibGUuXHJcbiAgICAgICAgaWYgKChiYXNlUGFydHMgfHwgc3Rhck1hcCkgJiYgbWFwKSB7XHJcbiAgICAgICAgICAgIG5hbWVQYXJ0cyA9IG5hbWUuc3BsaXQoJy8nKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IG5hbWVQYXJ0cy5sZW5ndGg7IGkgPiAwOyBpIC09IDEpIHtcclxuICAgICAgICAgICAgICAgIG5hbWVTZWdtZW50ID0gbmFtZVBhcnRzLnNsaWNlKDAsIGkpLmpvaW4oXCIvXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChiYXNlUGFydHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0ZpbmQgdGhlIGxvbmdlc3QgYmFzZU5hbWUgc2VnbWVudCBtYXRjaCBpbiB0aGUgY29uZmlnLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vU28sIGRvIGpvaW5zIG9uIHRoZSBiaWdnZXN0IHRvIHNtYWxsZXN0IGxlbmd0aHMgb2YgYmFzZVBhcnRzLlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IGJhc2VQYXJ0cy5sZW5ndGg7IGogPiAwOyBqIC09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwVmFsdWUgPSBtYXBbYmFzZVBhcnRzLnNsaWNlKDAsIGopLmpvaW4oJy8nKV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Jhc2VOYW1lIHNlZ21lbnQgaGFzICBjb25maWcsIGZpbmQgaWYgaXQgaGFzIG9uZSBmb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIG5hbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVmFsdWUgPSBtYXBWYWx1ZVtuYW1lU2VnbWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL01hdGNoLCB1cGRhdGUgbmFtZSB0byB0aGUgbmV3IHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kTWFwID0gbWFwVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRJID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRNYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL0NoZWNrIGZvciBhIHN0YXIgbWFwIG1hdGNoLCBidXQganVzdCBob2xkIG9uIHRvIGl0LFxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGVyZSBpcyBhIHNob3J0ZXIgc2VnbWVudCBtYXRjaCBsYXRlciBpbiBhIG1hdGNoaW5nXHJcbiAgICAgICAgICAgICAgICAvL2NvbmZpZywgdGhlbiBmYXZvciBvdmVyIHRoaXMgc3RhciBtYXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3Rhck1hcCAmJiBzdGFyTWFwICYmIHN0YXJNYXBbbmFtZVNlZ21lbnRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRTdGFyTWFwID0gc3Rhck1hcFtuYW1lU2VnbWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhckkgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZvdW5kTWFwICYmIGZvdW5kU3Rhck1hcCkge1xyXG4gICAgICAgICAgICAgICAgZm91bmRNYXAgPSBmb3VuZFN0YXJNYXA7XHJcbiAgICAgICAgICAgICAgICBmb3VuZEkgPSBzdGFySTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZvdW5kTWFwKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lUGFydHMuc3BsaWNlKDAsIGZvdW5kSSwgZm91bmRNYXApO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVQYXJ0cy5qb2luKCcvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1aXJlKHJlbE5hbWUsIGZvcmNlU3luYykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vQSB2ZXJzaW9uIG9mIGEgcmVxdWlyZSBmdW5jdGlvbiB0aGF0IHBhc3NlcyBhIG1vZHVsZU5hbWVcclxuICAgICAgICAgICAgLy92YWx1ZSBmb3IgaXRlbXMgdGhhdCBtYXkgbmVlZCB0b1xyXG4gICAgICAgICAgICAvL2xvb2sgdXAgcGF0aHMgcmVsYXRpdmUgdG8gdGhlIG1vZHVsZU5hbWVcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcHMuY2FsbChhcmd1bWVudHMsIDApO1xyXG5cclxuICAgICAgICAgICAgLy9JZiBmaXJzdCBhcmcgaXMgbm90IHJlcXVpcmUoJ3N0cmluZycpLCBhbmQgdGhlcmUgaXMgb25seVxyXG4gICAgICAgICAgICAvL29uZSBhcmcsIGl0IGlzIHRoZSBhcnJheSBmb3JtIHdpdGhvdXQgYSBjYWxsYmFjay4gSW5zZXJ0XHJcbiAgICAgICAgICAgIC8vYSBudWxsIHNvIHRoYXQgdGhlIGZvbGxvd2luZyBjb25jYXQgaXMgY29ycmVjdC5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJyAmJiBhcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXEuYXBwbHkodW5kZWYsIGFyZ3MuY29uY2F0KFtyZWxOYW1lLCBmb3JjZVN5bmNdKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlTm9ybWFsaXplKHJlbE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VMb2FkKGRlcE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRlZmluZWRbZGVwTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGxEZXAobmFtZSkge1xyXG4gICAgICAgIGlmIChoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gd2FpdGluZ1tuYW1lXTtcclxuICAgICAgICAgICAgZGVsZXRlIHdhaXRpbmdbbmFtZV07XHJcbiAgICAgICAgICAgIGRlZmluaW5nW25hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgbWFpbi5hcHBseSh1bmRlZiwgYXJncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWhhc1Byb3AoZGVmaW5lZCwgbmFtZSkgJiYgIWhhc1Byb3AoZGVmaW5pbmcsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gJyArIG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmaW5lZFtuYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICAvL1R1cm5zIGEgcGx1Z2luIXJlc291cmNlIHRvIFtwbHVnaW4sIHJlc291cmNlXVxyXG4gICAgLy93aXRoIHRoZSBwbHVnaW4gYmVpbmcgdW5kZWZpbmVkIGlmIHRoZSBuYW1lXHJcbiAgICAvL2RpZCBub3QgaGF2ZSBhIHBsdWdpbiBwcmVmaXguXHJcbiAgICBmdW5jdGlvbiBzcGxpdFByZWZpeChuYW1lKSB7XHJcbiAgICAgICAgdmFyIHByZWZpeCxcclxuICAgICAgICAgICAgaW5kZXggPSBuYW1lID8gbmFtZS5pbmRleE9mKCchJykgOiAtMTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICBwcmVmaXggPSBuYW1lLnN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZyhpbmRleCArIDEsIG5hbWUubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtwcmVmaXgsIG5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ3JlYXRlcyBhIHBhcnRzIGFycmF5IGZvciBhIHJlbE5hbWUgd2hlcmUgZmlyc3QgcGFydCBpcyBwbHVnaW4gSUQsXHJcbiAgICAvL3NlY29uZCBwYXJ0IGlzIHJlc291cmNlIElELiBBc3N1bWVzIHJlbE5hbWUgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkLlxyXG4gICAgZnVuY3Rpb24gbWFrZVJlbFBhcnRzKHJlbE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gcmVsTmFtZSA/IHNwbGl0UHJlZml4KHJlbE5hbWUpIDogW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlcyBhIG5hbWUgbWFwLCBub3JtYWxpemluZyB0aGUgbmFtZSwgYW5kIHVzaW5nIGEgcGx1Z2luXHJcbiAgICAgKiBmb3Igbm9ybWFsaXphdGlvbiBpZiBuZWNlc3NhcnkuIEdyYWJzIGEgcmVmIHRvIHBsdWdpblxyXG4gICAgICogdG9vLCBhcyBhbiBvcHRpbWl6YXRpb24uXHJcbiAgICAgKi9cclxuICAgIG1ha2VNYXAgPSBmdW5jdGlvbiAobmFtZSwgcmVsUGFydHMpIHtcclxuICAgICAgICB2YXIgcGx1Z2luLFxyXG4gICAgICAgICAgICBwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpLFxyXG4gICAgICAgICAgICBwcmVmaXggPSBwYXJ0c1swXSxcclxuICAgICAgICAgICAgcmVsUmVzb3VyY2VOYW1lID0gcmVsUGFydHNbMV07XHJcblxyXG4gICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcclxuXHJcbiAgICAgICAgaWYgKHByZWZpeCkge1xyXG4gICAgICAgICAgICBwcmVmaXggPSBub3JtYWxpemUocHJlZml4LCByZWxSZXNvdXJjZU5hbWUpO1xyXG4gICAgICAgICAgICBwbHVnaW4gPSBjYWxsRGVwKHByZWZpeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL05vcm1hbGl6ZSBhY2NvcmRpbmdcclxuICAgICAgICBpZiAocHJlZml4KSB7XHJcbiAgICAgICAgICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLm5vcm1hbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IHBsdWdpbi5ub3JtYWxpemUobmFtZSwgbWFrZU5vcm1hbGl6ZShyZWxSZXNvdXJjZU5hbWUpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsUmVzb3VyY2VOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsUmVzb3VyY2VOYW1lKTtcclxuICAgICAgICAgICAgcGFydHMgPSBzcGxpdFByZWZpeChuYW1lKTtcclxuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07XHJcbiAgICAgICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcclxuICAgICAgICAgICAgaWYgKHByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1VzaW5nIHJpZGljdWxvdXMgcHJvcGVydHkgbmFtZXMgZm9yIHNwYWNlIHJlYXNvbnNcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmOiBwcmVmaXggPyBwcmVmaXggKyAnIScgKyBuYW1lIDogbmFtZSwgLy9mdWxsTmFtZVxyXG4gICAgICAgICAgICBuOiBuYW1lLFxyXG4gICAgICAgICAgICBwcjogcHJlZml4LFxyXG4gICAgICAgICAgICBwOiBwbHVnaW5cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlQ29uZmlnKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGNvbmZpZyAmJiBjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWdbbmFtZV0pIHx8IHt9O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlcnMgPSB7XHJcbiAgICAgICAgcmVxdWlyZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXF1aXJlKG5hbWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhwb3J0czogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSBkZWZpbmVkW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZGVmaW5lZFtuYW1lXSA9IHt9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9kdWxlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICB1cmk6ICcnLFxyXG4gICAgICAgICAgICAgICAgZXhwb3J0czogZGVmaW5lZFtuYW1lXSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogbWFrZUNvbmZpZyhuYW1lKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbWFpbiA9IGZ1bmN0aW9uIChuYW1lLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSkge1xyXG4gICAgICAgIHZhciBjanNNb2R1bGUsIGRlcE5hbWUsIHJldCwgbWFwLCBpLCByZWxQYXJ0cyxcclxuICAgICAgICAgICAgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBjYWxsYmFja1R5cGUgPSB0eXBlb2YgY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIHVzaW5nRXhwb3J0cztcclxuXHJcbiAgICAgICAgLy9Vc2UgbmFtZSBpZiBubyByZWxOYW1lXHJcbiAgICAgICAgcmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTtcclxuICAgICAgICByZWxQYXJ0cyA9IG1ha2VSZWxQYXJ0cyhyZWxOYW1lKTtcclxuXHJcbiAgICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayB0byBkZWZpbmUgdGhlIG1vZHVsZSwgaWYgbmVjZXNzYXJ5LlxyXG4gICAgICAgIGlmIChjYWxsYmFja1R5cGUgPT09ICd1bmRlZmluZWQnIHx8IGNhbGxiYWNrVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAvL1B1bGwgb3V0IHRoZSBkZWZpbmVkIGRlcGVuZGVuY2llcyBhbmQgcGFzcyB0aGUgb3JkZXJlZFxyXG4gICAgICAgICAgICAvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suXHJcbiAgICAgICAgICAgIC8vRGVmYXVsdCB0byBbcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlXSBpZiBubyBkZXBzXHJcbiAgICAgICAgICAgIGRlcHMgPSAhZGVwcy5sZW5ndGggJiYgY2FsbGJhY2subGVuZ3RoID8gWydyZXF1aXJlJywgJ2V4cG9ydHMnLCAnbW9kdWxlJ10gOiBkZXBzO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgbWFwID0gbWFrZU1hcChkZXBzW2ldLCByZWxQYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICBkZXBOYW1lID0gbWFwLmY7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9GYXN0IHBhdGggQ29tbW9uSlMgc3RhbmRhcmQgZGVwZW5kZW5jaWVzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGRlcE5hbWUgPT09IFwicmVxdWlyZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGhhbmRsZXJzLnJlcXVpcmUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFwiZXhwb3J0c1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gaGFuZGxlcnMuZXhwb3J0cyhuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB1c2luZ0V4cG9ydHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBOYW1lID09PSBcIm1vZHVsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcclxuICAgICAgICAgICAgICAgICAgICBjanNNb2R1bGUgPSBhcmdzW2ldID0gaGFuZGxlcnMubW9kdWxlKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNQcm9wKGRlZmluZWQsIGRlcE5hbWUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3Aod2FpdGluZywgZGVwTmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvcChkZWZpbmluZywgZGVwTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gY2FsbERlcChkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwLnApIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXAucC5sb2FkKG1hcC5uLCBtYWtlUmVxdWlyZShyZWxOYW1lLCB0cnVlKSwgbWFrZUxvYWQoZGVwTmFtZSksIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gZGVmaW5lZFtkZXBOYW1lXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIG1pc3NpbmcgJyArIGRlcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXQgPSBjYWxsYmFjayA/IGNhbGxiYWNrLmFwcGx5KGRlZmluZWRbbmFtZV0sIGFyZ3MpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIC8vSWYgc2V0dGluZyBleHBvcnRzIHZpYSBcIm1vZHVsZVwiIGlzIGluIHBsYXksXHJcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIHRoYXQgb3ZlciByZXR1cm4gdmFsdWUgYW5kIGV4cG9ydHMuIEFmdGVyIHRoYXQsXHJcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIGEgbm9uLXVuZGVmaW5lZCByZXR1cm4gdmFsdWUgb3ZlciBleHBvcnRzIHVzZS5cclxuICAgICAgICAgICAgICAgIGlmIChjanNNb2R1bGUgJiYgY2pzTW9kdWxlLmV4cG9ydHMgIT09IHVuZGVmICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZS5leHBvcnRzICE9PSBkZWZpbmVkW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNqc01vZHVsZS5leHBvcnRzO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXQgIT09IHVuZGVmIHx8ICF1c2luZ0V4cG9ydHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1VzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSByZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgLy9NYXkganVzdCBiZSBhbiBvYmplY3QgZGVmaW5pdGlvbiBmb3IgdGhlIG1vZHVsZS4gT25seVxyXG4gICAgICAgICAgICAvL3dvcnJ5IGFib3V0IGRlZmluaW5nIGlmIGhhdmUgYSBtb2R1bGUgbmFtZS5cclxuICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmVxdWlyZWpzID0gcmVxdWlyZSA9IHJlcSA9IGZ1bmN0aW9uIChkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSwgZm9yY2VTeW5jLCBhbHQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRlcHMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXJzW2RlcHNdKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NhbGxiYWNrIGluIHRoaXMgY2FzZSBpcyByZWFsbHkgcmVsTmFtZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJzW2RlcHNdKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL0p1c3QgcmV0dXJuIHRoZSBtb2R1bGUgd2FudGVkLiBJbiB0aGlzIHNjZW5hcmlvLCB0aGVcclxuICAgICAgICAgICAgLy9kZXBzIGFyZyBpcyB0aGUgbW9kdWxlIG5hbWUsIGFuZCBzZWNvbmQgYXJnIChpZiBwYXNzZWQpXHJcbiAgICAgICAgICAgIC8vaXMganVzdCB0aGUgcmVsTmFtZS5cclxuICAgICAgICAgICAgLy9Ob3JtYWxpemUgbW9kdWxlIG5hbWUsIGlmIGl0IGNvbnRhaW5zIC4gb3IgLi5cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxEZXAobWFrZU1hcChkZXBzLCBtYWtlUmVsUGFydHMoY2FsbGJhY2spKS5mKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFkZXBzLnNwbGljZSkge1xyXG4gICAgICAgICAgICAvL2RlcHMgaXMgYSBjb25maWcgb2JqZWN0LCBub3QgYW4gYXJyYXkuXHJcbiAgICAgICAgICAgIGNvbmZpZyA9IGRlcHM7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVwcykge1xyXG4gICAgICAgICAgICAgICAgcmVxKGNvbmZpZy5kZXBzLCBjb25maWcuY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLnNwbGljZSkge1xyXG4gICAgICAgICAgICAgICAgLy9jYWxsYmFjayBpcyBhbiBhcnJheSwgd2hpY2ggbWVhbnMgaXQgaXMgYSBkZXBlbmRlbmN5IGxpc3QuXHJcbiAgICAgICAgICAgICAgICAvL0FkanVzdCBhcmdzIGlmIHRoZXJlIGFyZSBkZXBlbmRlbmNpZXNcclxuICAgICAgICAgICAgICAgIGRlcHMgPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcmVsTmFtZTtcclxuICAgICAgICAgICAgICAgIHJlbE5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVwcyA9IHVuZGVmO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1N1cHBvcnQgcmVxdWlyZShbJ2EnXSlcclxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuICAgICAgICAvL0lmIHJlbE5hbWUgaXMgYSBmdW5jdGlvbiwgaXQgaXMgYW4gZXJyYmFjayBoYW5kbGVyLFxyXG4gICAgICAgIC8vc28gcmVtb3ZlIGl0LlxyXG4gICAgICAgIGlmICh0eXBlb2YgcmVsTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZWxOYW1lID0gZm9yY2VTeW5jO1xyXG4gICAgICAgICAgICBmb3JjZVN5bmMgPSBhbHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1NpbXVsYXRlIGFzeW5jIGNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChmb3JjZVN5bmMpIHtcclxuICAgICAgICAgICAgbWFpbih1bmRlZiwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vVXNpbmcgYSBub24temVybyB2YWx1ZSBiZWNhdXNlIG9mIGNvbmNlcm4gZm9yIHdoYXQgb2xkIGJyb3dzZXJzXHJcbiAgICAgICAgICAgIC8vZG8sIGFuZCBsYXRlc3QgYnJvd3NlcnMgXCJ1cGdyYWRlXCIgdG8gNCBpZiBsb3dlciB2YWx1ZSBpcyB1c2VkOlxyXG4gICAgICAgICAgICAvL2h0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RpbWVycy5odG1sI2RvbS13aW5kb3d0aW1lcnMtc2V0dGltZW91dDpcclxuICAgICAgICAgICAgLy9JZiB3YW50IGEgdmFsdWUgaW1tZWRpYXRlbHksIHVzZSByZXF1aXJlKCdpZCcpIGluc3RlYWQgLS0gc29tZXRoaW5nXHJcbiAgICAgICAgICAgIC8vdGhhdCB3b3JrcyBpbiBhbG1vbmQgb24gdGhlIGdsb2JhbCBsZXZlbCwgYnV0IG5vdCBndWFyYW50ZWVkIGFuZFxyXG4gICAgICAgICAgICAvL3VubGlrZWx5IHRvIHdvcmsgaW4gb3RoZXIgQU1EIGltcGxlbWVudGF0aW9ucy5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7XHJcbiAgICAgICAgICAgIH0sIDQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZVxyXG4gICAgICogdGhlIGNvbmZpZyByZXR1cm4gdmFsdWUgaXMgdXNlZC5cclxuICAgICAqL1xyXG4gICAgcmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHtcclxuICAgICAgICByZXR1cm4gcmVxKGNmZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhwb3NlIG1vZHVsZSByZWdpc3RyeSBmb3IgZGVidWdnaW5nIGFuZCB0b29saW5nXHJcbiAgICAgKi9cclxuICAgIHJlcXVpcmVqcy5fZGVmaW5lZCA9IGRlZmluZWQ7XHJcblxyXG4gICAgZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlZSBhbG1vbmQgUkVBRE1FOiBpbmNvcnJlY3QgbW9kdWxlIGJ1aWxkLCBubyBtb2R1bGUgbmFtZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9UaGlzIG1vZHVsZSBtYXkgbm90IGhhdmUgZGVwZW5kZW5jaWVzXHJcbiAgICAgICAgaWYgKCFkZXBzLnNwbGljZSkge1xyXG4gICAgICAgICAgICAvL2RlcHMgaXMgbm90IGFuIGFycmF5LCBzbyBwcm9iYWJseSBtZWFuc1xyXG4gICAgICAgICAgICAvL2FuIG9iamVjdCBsaXRlcmFsIG9yIGZhY3RvcnkgZnVuY3Rpb24gZm9yXHJcbiAgICAgICAgICAgIC8vdGhlIHZhbHVlLiBBZGp1c3QgYXJncy5cclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBkZXBzO1xyXG4gICAgICAgICAgICBkZXBzID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWhhc1Byb3AoZGVmaW5lZCwgbmFtZSkgJiYgIWhhc1Byb3Aod2FpdGluZywgbmFtZSkpIHtcclxuICAgICAgICAgICAgd2FpdGluZ1tuYW1lXSA9IFtuYW1lLCBkZXBzLCBjYWxsYmFja107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkZWZpbmUuYW1kID0ge1xyXG4gICAgICAgIGpRdWVyeTogdHJ1ZVxyXG4gICAgfTtcclxufSgpKTtcclxuXHJcblMyLnJlcXVpcmVqcyA9IHJlcXVpcmVqcztTMi5yZXF1aXJlID0gcmVxdWlyZTtTMi5kZWZpbmUgPSBkZWZpbmU7XHJcbn1cclxufSgpKTtcclxuUzIuZGVmaW5lKFwiYWxtb25kXCIsIGZ1bmN0aW9uKCl7fSk7XHJcblxyXG4vKiBnbG9iYWwgalF1ZXJ5OmZhbHNlLCAkOmZhbHNlICovXHJcblMyLmRlZmluZSgnanF1ZXJ5JyxbXSxmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIF8kID0galF1ZXJ5IHx8ICQ7XHJcblxyXG4gIGlmIChfJCA9PSBudWxsICYmIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcclxuICAgICAgJ1NlbGVjdDI6IEFuIGluc3RhbmNlIG9mIGpRdWVyeSBvciBhIGpRdWVyeS1jb21wYXRpYmxlIGxpYnJhcnkgd2FzIG5vdCAnICtcclxuICAgICAgJ2ZvdW5kLiBNYWtlIHN1cmUgdGhhdCB5b3UgYXJlIGluY2x1ZGluZyBqUXVlcnkgYmVmb3JlIFNlbGVjdDIgb24geW91ciAnICtcclxuICAgICAgJ3dlYiBwYWdlLidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gXyQ7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3V0aWxzJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICB2YXIgVXRpbHMgPSB7fTtcclxuXHJcbiAgVXRpbHMuRXh0ZW5kID0gZnVuY3Rpb24gKENoaWxkQ2xhc3MsIFN1cGVyQ2xhc3MpIHtcclxuICAgIHZhciBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICBmdW5jdGlvbiBCYXNlQ29uc3RydWN0b3IgKCkge1xyXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQ2hpbGRDbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBrZXkgaW4gU3VwZXJDbGFzcykge1xyXG4gICAgICBpZiAoX19oYXNQcm9wLmNhbGwoU3VwZXJDbGFzcywga2V5KSkge1xyXG4gICAgICAgIENoaWxkQ2xhc3Nba2V5XSA9IFN1cGVyQ2xhc3Nba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEJhc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcclxuICAgIENoaWxkQ2xhc3MucHJvdG90eXBlID0gbmV3IEJhc2VDb25zdHJ1Y3RvcigpO1xyXG4gICAgQ2hpbGRDbGFzcy5fX3N1cGVyX18gPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcclxuXHJcbiAgICByZXR1cm4gQ2hpbGRDbGFzcztcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBnZXRNZXRob2RzICh0aGVDbGFzcykge1xyXG4gICAgdmFyIHByb3RvID0gdGhlQ2xhc3MucHJvdG90eXBlO1xyXG5cclxuICAgIHZhciBtZXRob2RzID0gW107XHJcblxyXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBwcm90bykge1xyXG4gICAgICB2YXIgbSA9IHByb3RvW21ldGhvZE5hbWVdO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBtICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChtZXRob2ROYW1lID09PSAnY29uc3RydWN0b3InKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1ldGhvZHMucHVzaChtZXRob2ROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWV0aG9kcztcclxuICB9XHJcblxyXG4gIFV0aWxzLkRlY29yYXRlID0gZnVuY3Rpb24gKFN1cGVyQ2xhc3MsIERlY29yYXRvckNsYXNzKSB7XHJcbiAgICB2YXIgZGVjb3JhdGVkTWV0aG9kcyA9IGdldE1ldGhvZHMoRGVjb3JhdG9yQ2xhc3MpO1xyXG4gICAgdmFyIHN1cGVyTWV0aG9kcyA9IGdldE1ldGhvZHMoU3VwZXJDbGFzcyk7XHJcblxyXG4gICAgZnVuY3Rpb24gRGVjb3JhdGVkQ2xhc3MgKCkge1xyXG4gICAgICB2YXIgdW5zaGlmdCA9IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0O1xyXG5cclxuICAgICAgdmFyIGFyZ0NvdW50ID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yLmxlbmd0aDtcclxuXHJcbiAgICAgIHZhciBjYWxsZWRDb25zdHJ1Y3RvciA9IFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xyXG5cclxuICAgICAgaWYgKGFyZ0NvdW50ID4gMCkge1xyXG4gICAgICAgIHVuc2hpZnQuY2FsbChhcmd1bWVudHMsIFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yKTtcclxuXHJcbiAgICAgICAgY2FsbGVkQ29uc3RydWN0b3IgPSBEZWNvcmF0b3JDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxlZENvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgRGVjb3JhdG9yQ2xhc3MuZGlzcGxheU5hbWUgPSBTdXBlckNsYXNzLmRpc3BsYXlOYW1lO1xyXG5cclxuICAgIGZ1bmN0aW9uIGN0ciAoKSB7XHJcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBEZWNvcmF0ZWRDbGFzcztcclxuICAgIH1cclxuXHJcbiAgICBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGUgPSBuZXcgY3RyKCk7XHJcblxyXG4gICAgZm9yICh2YXIgbSA9IDA7IG0gPCBzdXBlck1ldGhvZHMubGVuZ3RoOyBtKyspIHtcclxuICAgICAgdmFyIHN1cGVyTWV0aG9kID0gc3VwZXJNZXRob2RzW21dO1xyXG5cclxuICAgICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW3N1cGVyTWV0aG9kXSA9XHJcbiAgICAgICAgU3VwZXJDbGFzcy5wcm90b3R5cGVbc3VwZXJNZXRob2RdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjYWxsZWRNZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAvLyBTdHViIG91dCB0aGUgb3JpZ2luYWwgbWV0aG9kIGlmIGl0J3Mgbm90IGRlY29yYXRpbmcgYW4gYWN0dWFsIG1ldGhvZFxyXG4gICAgICB2YXIgb3JpZ2luYWxNZXRob2QgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgICAgIGlmIChtZXRob2ROYW1lIGluIERlY29yYXRlZENsYXNzLnByb3RvdHlwZSkge1xyXG4gICAgICAgIG9yaWdpbmFsTWV0aG9kID0gRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZGVjb3JhdGVkTWV0aG9kID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xyXG5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zaGlmdCA9IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0O1xyXG5cclxuICAgICAgICB1bnNoaWZ0LmNhbGwoYXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvcmF0ZWRNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkZWNvcmF0ZWRNZXRob2RzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBkZWNvcmF0ZWRNZXRob2QgPSBkZWNvcmF0ZWRNZXRob2RzW2RdO1xyXG5cclxuICAgICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW2RlY29yYXRlZE1ldGhvZF0gPSBjYWxsZWRNZXRob2QoZGVjb3JhdGVkTWV0aG9kKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gRGVjb3JhdGVkQ2xhc3M7XHJcbiAgfTtcclxuXHJcbiAgdmFyIE9ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gIH07XHJcblxyXG4gIE9ic2VydmFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyB8fCB7fTtcclxuXHJcbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gW2NhbGxiYWNrXTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcbiAgICB2YXIgcGFyYW1zID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG5cclxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XHJcblxyXG4gICAgLy8gUGFyYW1zIHNob3VsZCBhbHdheXMgY29tZSBpbiBhcyBhbiBhcnJheVxyXG4gICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7XHJcbiAgICAgIHBhcmFtcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBhcmd1bWVudHMgdG8gdGhlIGV2ZW50LCB1c2UgYSB0ZW1wb3Jhcnkgb2JqZWN0XHJcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBwYXJhbXMucHVzaCh7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBgX3R5cGVgIG9mIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIGV2ZW50XHJcbiAgICBwYXJhbXNbMF0uX3R5cGUgPSBldmVudDtcclxuXHJcbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5pbnZva2UodGhpcy5saXN0ZW5lcnNbZXZlbnRdLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgnKicgaW4gdGhpcy5saXN0ZW5lcnMpIHtcclxuICAgICAgdGhpcy5pbnZva2UodGhpcy5saXN0ZW5lcnNbJyonXSwgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobGlzdGVuZXJzLCBwYXJhbXMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XHJcblxyXG4gIFV0aWxzLmdlbmVyYXRlQ2hhcnMgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcbiAgICB2YXIgY2hhcnMgPSAnJztcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciByYW5kb21DaGFyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpO1xyXG4gICAgICBjaGFycyArPSByYW5kb21DaGFyLnRvU3RyaW5nKDM2KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhcnM7XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuYmluZCA9IGZ1bmN0aW9uIChmdW5jLCBjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLl9jb252ZXJ0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBmb3IgKHZhciBvcmlnaW5hbEtleSBpbiBkYXRhKSB7XHJcbiAgICAgIHZhciBrZXlzID0gb3JpZ2luYWxLZXkuc3BsaXQoJy0nKTtcclxuXHJcbiAgICAgIHZhciBkYXRhTGV2ZWwgPSBkYXRhO1xyXG5cclxuICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwga2V5cy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xyXG5cclxuICAgICAgICAvLyBMb3dlcmNhc2UgdGhlIGZpcnN0IGxldHRlclxyXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGRhc2gtc2VwYXJhdGVkIGJlY29tZXMgY2FtZWxDYXNlXHJcbiAgICAgICAga2V5ID0ga2V5LnN1YnN0cmluZygwLCAxKS50b0xvd2VyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcclxuXHJcbiAgICAgICAgaWYgKCEoa2V5IGluIGRhdGFMZXZlbCkpIHtcclxuICAgICAgICAgIGRhdGFMZXZlbFtrZXldID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoayA9PSBrZXlzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGRhdGFMZXZlbFtrZXldID0gZGF0YVtvcmlnaW5hbEtleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRhTGV2ZWwgPSBkYXRhTGV2ZWxba2V5XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVsZXRlIGRhdGFbb3JpZ2luYWxLZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLmhhc1Njcm9sbCA9IGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcclxuICAgIC8vIEFkYXB0ZWQgZnJvbSB0aGUgZnVuY3Rpb24gY3JlYXRlZCBieSBAU2hhZG93U2NyaXB0ZXJcclxuICAgIC8vIGFuZCBhZGFwdGVkIGJ5IEBCaWxsQmFycnkgb24gdGhlIFN0YWNrIEV4Y2hhbmdlIENvZGUgUmV2aWV3IHdlYnNpdGUuXHJcbiAgICAvLyBUaGUgb3JpZ2luYWwgY29kZSBjYW4gYmUgZm91bmQgYXRcclxuICAgIC8vIGh0dHA6Ly9jb2RlcmV2aWV3LnN0YWNrZXhjaGFuZ2UuY29tL3EvMTMzMzhcclxuICAgIC8vIGFuZCB3YXMgZGVzaWduZWQgdG8gYmUgdXNlZCB3aXRoIHRoZSBTaXp6bGUgc2VsZWN0b3IgZW5naW5lLlxyXG5cclxuICAgIHZhciAkZWwgPSAkKGVsKTtcclxuICAgIHZhciBvdmVyZmxvd1ggPSBlbC5zdHlsZS5vdmVyZmxvd1g7XHJcbiAgICB2YXIgb3ZlcmZsb3dZID0gZWwuc3R5bGUub3ZlcmZsb3dZO1xyXG5cclxuICAgIC8vQ2hlY2sgYm90aCB4IGFuZCB5IGRlY2xhcmF0aW9uc1xyXG4gICAgaWYgKG92ZXJmbG93WCA9PT0gb3ZlcmZsb3dZICYmXHJcbiAgICAgICAgKG92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3dZID09PSAndmlzaWJsZScpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBvdmVyZmxvd1kgPT09ICdzY3JvbGwnKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoJGVsLmlubmVySGVpZ2h0KCkgPCBlbC5zY3JvbGxIZWlnaHQgfHxcclxuICAgICAgJGVsLmlubmVyV2lkdGgoKSA8IGVsLnNjcm9sbFdpZHRoKTtcclxuICB9O1xyXG5cclxuICBVdGlscy5lc2NhcGVNYXJrdXAgPSBmdW5jdGlvbiAobWFya3VwKSB7XHJcbiAgICB2YXIgcmVwbGFjZU1hcCA9IHtcclxuICAgICAgJ1xcXFwnOiAnJiM5MjsnLFxyXG4gICAgICAnJic6ICcmYW1wOycsXHJcbiAgICAgICc8JzogJyZsdDsnLFxyXG4gICAgICAnPic6ICcmZ3Q7JyxcclxuICAgICAgJ1wiJzogJyZxdW90OycsXHJcbiAgICAgICdcXCcnOiAnJiMzOTsnLFxyXG4gICAgICAnLyc6ICcmIzQ3OydcclxuICAgIH07XHJcblxyXG4gICAgLy8gRG8gbm90IHRyeSB0byBlc2NhcGUgdGhlIG1hcmt1cCBpZiBpdCdzIG5vdCBhIHN0cmluZ1xyXG4gICAgaWYgKHR5cGVvZiBtYXJrdXAgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBtYXJrdXA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFN0cmluZyhtYXJrdXApLnJlcGxhY2UoL1smPD5cIidcXC9cXFxcXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcclxuICAgICAgcmV0dXJuIHJlcGxhY2VNYXBbbWF0Y2hdO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gQXBwZW5kIGFuIGFycmF5IG9mIGpRdWVyeSBub2RlcyB0byBhIGdpdmVuIGVsZW1lbnQuXHJcbiAgVXRpbHMuYXBwZW5kTWFueSA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJG5vZGVzKSB7XHJcbiAgICAvLyBqUXVlcnkgMS43LnggZG9lcyBub3Qgc3VwcG9ydCAkLmZuLmFwcGVuZCgpIHdpdGggYW4gYXJyYXlcclxuICAgIC8vIEZhbGwgYmFjayB0byBhIGpRdWVyeSBvYmplY3QgY29sbGVjdGlvbiB1c2luZyAkLmZuLmFkZCgpXHJcbiAgICBpZiAoJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDMpID09PSAnMS43Jykge1xyXG4gICAgICB2YXIgJGpxTm9kZXMgPSAkKCk7XHJcblxyXG4gICAgICAkLm1hcCgkbm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgJGpxTm9kZXMgPSAkanFOb2Rlcy5hZGQobm9kZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJG5vZGVzID0gJGpxTm9kZXM7XHJcbiAgICB9XHJcblxyXG4gICAgJGVsZW1lbnQuYXBwZW5kKCRub2Rlcyk7XHJcbiAgfTtcclxuXHJcbiAgLy8gQ2FjaGUgb2JqZWN0cyBpbiBVdGlscy5fX2NhY2hlIGluc3RlYWQgb2YgJC5kYXRhIChzZWUgIzQzNDYpXHJcbiAgVXRpbHMuX19jYWNoZSA9IHt9O1xyXG5cclxuICB2YXIgaWQgPSAwO1xyXG4gIFV0aWxzLkdldFVuaXF1ZUVsZW1lbnRJZCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAvLyBHZXQgYSB1bmlxdWUgZWxlbWVudCBJZC4gSWYgZWxlbWVudCBoYXMgbm8gaWQsXHJcbiAgICAvLyBjcmVhdGVzIGEgbmV3IHVuaXF1ZSBudW1iZXIsIHN0b3JlcyBpdCBpbiB0aGUgaWRcclxuICAgIC8vIGF0dHJpYnV0ZSBhbmQgcmV0dXJucyB0aGUgbmV3IGlkLlxyXG4gICAgLy8gSWYgYW4gaWQgYWxyZWFkeSBleGlzdHMsIGl0IHNpbXBseSByZXR1cm5zIGl0LlxyXG5cclxuICAgIHZhciBzZWxlY3QySWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3QyLWlkJyk7XHJcbiAgICBpZiAoc2VsZWN0MklkID09IG51bGwpIHtcclxuICAgICAgLy8gSWYgZWxlbWVudCBoYXMgaWQsIHVzZSBpdC5cclxuICAgICAgaWYgKGVsZW1lbnQuaWQpIHtcclxuICAgICAgICBzZWxlY3QySWQgPSBlbGVtZW50LmlkO1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdDItaWQnLCBzZWxlY3QySWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdDItaWQnLCArK2lkKTtcclxuICAgICAgICBzZWxlY3QySWQgPSBpZC50b1N0cmluZygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2VsZWN0MklkO1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLlN0b3JlRGF0YSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgLy8gU3RvcmVzIGFuIGl0ZW0gaW4gdGhlIGNhY2hlIGZvciBhIHNwZWNpZmllZCBlbGVtZW50LlxyXG4gICAgLy8gbmFtZSBpcyB0aGUgY2FjaGUga2V5LlxyXG4gICAgdmFyIGlkID0gVXRpbHMuR2V0VW5pcXVlRWxlbWVudElkKGVsZW1lbnQpO1xyXG4gICAgaWYgKCFVdGlscy5fX2NhY2hlW2lkXSkge1xyXG4gICAgICBVdGlscy5fX2NhY2hlW2lkXSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIFV0aWxzLl9fY2FjaGVbaWRdW25hbWVdID0gdmFsdWU7XHJcbiAgfTtcclxuXHJcbiAgVXRpbHMuR2V0RGF0YSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAvLyBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBjYWNoZSBieSBpdHMga2V5IChuYW1lKVxyXG4gICAgLy8gbmFtZSBpcyBvcHRpb25hbC4gSWYgbm8gbmFtZSBzcGVjaWZpZWQsIHJldHVyblxyXG4gICAgLy8gYWxsIGNhY2hlIGl0ZW1zIGZvciB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuXHJcbiAgICAvLyBhbmQgZm9yIGEgc3BlY2lmaWVkIGVsZW1lbnQuXHJcbiAgICB2YXIgaWQgPSBVdGlscy5HZXRVbmlxdWVFbGVtZW50SWQoZWxlbWVudCk7XHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICBpZiAoVXRpbHMuX19jYWNoZVtpZF0pIHtcclxuICAgICAgICBpZiAoVXRpbHMuX19jYWNoZVtpZF1bbmFtZV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIFV0aWxzLl9fY2FjaGVbaWRdW25hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJChlbGVtZW50KS5kYXRhKG5hbWUpOyAvLyBGYWxsYmFjayB0byBIVE1MNSBkYXRhIGF0dHJpYnMuXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuICQoZWxlbWVudCkuZGF0YShuYW1lKTsgLy8gRmFsbGJhY2sgdG8gSFRNTDUgZGF0YSBhdHRyaWJzLlxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIFV0aWxzLl9fY2FjaGVbaWRdO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIFV0aWxzLlJlbW92ZURhdGEgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgLy8gUmVtb3ZlcyBhbGwgY2FjaGVkIGl0ZW1zIGZvciBhIHNwZWNpZmllZCBlbGVtZW50LlxyXG4gICAgdmFyIGlkID0gVXRpbHMuR2V0VW5pcXVlRWxlbWVudElkKGVsZW1lbnQpO1xyXG4gICAgaWYgKFV0aWxzLl9fY2FjaGVbaWRdICE9IG51bGwpIHtcclxuICAgICAgZGVsZXRlIFV0aWxzLl9fY2FjaGVbaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNlbGVjdDItaWQnKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gVXRpbHM7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3Jlc3VsdHMnLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi91dGlscydcclxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gUmVzdWx0cyAoJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhQWRhcHRlcjtcclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgUmVzdWx0cy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChSZXN1bHRzLCBVdGlscy5PYnNlcnZhYmxlKTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRyZXN1bHRzID0gJChcclxuICAgICAgJzx1bCBjbGFzcz1cInNlbGVjdDItcmVzdWx0c19fb3B0aW9uc1wiIHJvbGU9XCJsaXN0Ym94XCI+PC91bD4nXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdtdWx0aXBsZScpKSB7XHJcbiAgICAgICRyZXN1bHRzLmF0dHIoJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJywgJ3RydWUnKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzID0gJHJlc3VsdHM7XHJcblxyXG4gICAgcmV0dXJuICRyZXN1bHRzO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kcmVzdWx0cy5lbXB0eSgpO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLmRpc3BsYXlNZXNzYWdlID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xyXG5cclxuICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcclxuXHJcbiAgICB2YXIgJG1lc3NhZ2UgPSAkKFxyXG4gICAgICAnPGxpIHJvbGU9XCJhbGVydFwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiJyArXHJcbiAgICAgICcgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvblwiPjwvbGk+J1xyXG4gICAgKTtcclxuXHJcbiAgICB2YXIgbWVzc2FnZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RyYW5zbGF0aW9ucycpLmdldChwYXJhbXMubWVzc2FnZSk7XHJcblxyXG4gICAgJG1lc3NhZ2UuYXBwZW5kKFxyXG4gICAgICBlc2NhcGVNYXJrdXAoXHJcbiAgICAgICAgbWVzc2FnZShwYXJhbXMuYXJncylcclxuICAgICAgKVxyXG4gICAgKTtcclxuXHJcbiAgICAkbWVzc2FnZVswXS5jbGFzc05hbWUgKz0gJyBzZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnO1xyXG5cclxuICAgIHRoaXMuJHJlc3VsdHMuYXBwZW5kKCRtZXNzYWdlKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5oaWRlTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnKS5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdGhpcy5oaWRlTG9hZGluZygpO1xyXG5cclxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgIGlmIChkYXRhLnJlc3VsdHMgPT0gbnVsbCB8fCBkYXRhLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlmICh0aGlzLiRyZXN1bHRzLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XHJcbiAgICAgICAgICBtZXNzYWdlOiAnbm9SZXN1bHRzJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YS5yZXN1bHRzID0gdGhpcy5zb3J0KGRhdGEucmVzdWx0cyk7XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLnJlc3VsdHMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgdmFyIGl0ZW0gPSBkYXRhLnJlc3VsdHNbZF07XHJcblxyXG4gICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xyXG5cclxuICAgICAgJG9wdGlvbnMucHVzaCgkb3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLmFwcGVuZCgkb3B0aW9ucyk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoJHJlc3VsdHMsICRkcm9wZG93bikge1xyXG4gICAgdmFyICRyZXN1bHRzQ29udGFpbmVyID0gJGRyb3Bkb3duLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHMnKTtcclxuICAgICRyZXN1bHRzQ29udGFpbmVyLmFwcGVuZCgkcmVzdWx0cyk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc29ydGVyID0gdGhpcy5vcHRpb25zLmdldCgnc29ydGVyJyk7XHJcblxyXG4gICAgcmV0dXJuIHNvcnRlcihkYXRhKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5oaWdobGlnaHRGaXJzdEl0ZW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRyZXN1bHRzXHJcbiAgICAgIC5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICB2YXIgJHNlbGVjdGVkID0gJG9wdGlvbnMuZmlsdGVyKCdbYXJpYS1zZWxlY3RlZD10cnVlXScpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgc2VsZWN0ZWQgb3B0aW9uc1xyXG4gICAgaWYgKCRzZWxlY3RlZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBzZWxlY3RlZCBvcHRpb25zLCBoaWdobGlnaHQgdGhlIGZpcnN0XHJcbiAgICAgICRzZWxlY3RlZC5maXJzdCgpLnRyaWdnZXIoJ21vdXNlZW50ZXInKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBzZWxlY3RlZCBvcHRpb25zLCBoaWdobGlnaHQgdGhlIGZpcnN0IG9wdGlvblxyXG4gICAgICAvLyBpbiB0aGUgZHJvcGRvd25cclxuICAgICAgJG9wdGlvbnMuZmlyc3QoKS50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbnN1cmVIaWdobGlnaHRWaXNpYmxlKCk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuc2V0Q2xhc3NlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLmRhdGEuY3VycmVudChmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcclxuICAgICAgdmFyIHNlbGVjdGVkSWRzID0gJC5tYXAoc2VsZWN0ZWQsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgcmV0dXJuIHMuaWQudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgJG9wdGlvbnMgPSBzZWxmLiRyZXN1bHRzXHJcbiAgICAgICAgLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvblthcmlhLXNlbGVjdGVkXScpO1xyXG5cclxuICAgICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICRvcHRpb24gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgaXRlbSA9IFV0aWxzLkdldERhdGEodGhpcywgJ2RhdGEnKTtcclxuXHJcbiAgICAgICAgLy8gaWQgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgc3RyaW5nIHdoZW4gY29tcGFyaW5nXHJcbiAgICAgICAgdmFyIGlkID0gJycgKyBpdGVtLmlkO1xyXG5cclxuICAgICAgICBpZiAoKGl0ZW0uZWxlbWVudCAhPSBudWxsICYmIGl0ZW0uZWxlbWVudC5zZWxlY3RlZCkgfHxcclxuICAgICAgICAgICAgKGl0ZW0uZWxlbWVudCA9PSBudWxsICYmICQuaW5BcnJheShpZCwgc2VsZWN0ZWRJZHMpID4gLTEpKSB7XHJcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgdGhpcy5oaWRlTG9hZGluZygpO1xyXG5cclxuICAgIHZhciBsb2FkaW5nTW9yZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RyYW5zbGF0aW9ucycpLmdldCgnc2VhcmNoaW5nJyk7XHJcblxyXG4gICAgdmFyIGxvYWRpbmcgPSB7XHJcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxyXG4gICAgICBsb2FkaW5nOiB0cnVlLFxyXG4gICAgICB0ZXh0OiBsb2FkaW5nTW9yZShwYXJhbXMpXHJcbiAgICB9O1xyXG4gICAgdmFyICRsb2FkaW5nID0gdGhpcy5vcHRpb24obG9hZGluZyk7XHJcbiAgICAkbG9hZGluZy5jbGFzc05hbWUgKz0gJyBsb2FkaW5nLXJlc3VsdHMnO1xyXG5cclxuICAgIHRoaXMuJHJlc3VsdHMucHJlcGVuZCgkbG9hZGluZyk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlkZUxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5sb2FkaW5nLXJlc3VsdHMnKS5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICBvcHRpb24uY2xhc3NOYW1lID0gJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uJztcclxuXHJcbiAgICB2YXIgYXR0cnMgPSB7XHJcbiAgICAgICdyb2xlJzogJ29wdGlvbicsXHJcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJ1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbWF0Y2hlcyA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8XHJcbiAgICAgIHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xyXG5cclxuICAgIGlmICgoZGF0YS5lbGVtZW50ICE9IG51bGwgJiYgbWF0Y2hlcy5jYWxsKGRhdGEuZWxlbWVudCwgJzpkaXNhYmxlZCcpKSB8fFxyXG4gICAgICAgIChkYXRhLmVsZW1lbnQgPT0gbnVsbCAmJiBkYXRhLmRpc2FibGVkKSkge1xyXG4gICAgICBkZWxldGUgYXR0cnNbJ2FyaWEtc2VsZWN0ZWQnXTtcclxuICAgICAgYXR0cnNbJ2FyaWEtZGlzYWJsZWQnXSA9ICd0cnVlJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS5pZCA9PSBudWxsKSB7XHJcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLl9yZXN1bHRJZCAhPSBudWxsKSB7XHJcbiAgICAgIG9wdGlvbi5pZCA9IGRhdGEuX3Jlc3VsdElkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLnRpdGxlKSB7XHJcbiAgICAgIG9wdGlvbi50aXRsZSA9IGRhdGEudGl0bGU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcclxuICAgICAgYXR0cnMucm9sZSA9ICdncm91cCc7XHJcbiAgICAgIGF0dHJzWydhcmlhLWxhYmVsJ10gPSBkYXRhLnRleHQ7XHJcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcclxuICAgICAgdmFyIHZhbCA9IGF0dHJzW2F0dHJdO1xyXG5cclxuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLmNoaWxkcmVuKSB7XHJcbiAgICAgIHZhciAkb3B0aW9uID0gJChvcHRpb24pO1xyXG5cclxuICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XHJcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdzZWxlY3QyLXJlc3VsdHNfX2dyb3VwJztcclxuXHJcbiAgICAgIHZhciAkbGFiZWwgPSAkKGxhYmVsKTtcclxuICAgICAgdGhpcy50ZW1wbGF0ZShkYXRhLCBsYWJlbCk7XHJcblxyXG4gICAgICB2YXIgJGNoaWxkcmVuID0gW107XHJcblxyXG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGRhdGEuY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcclxuICAgICAgICB2YXIgY2hpbGQgPSBkYXRhLmNoaWxkcmVuW2NdO1xyXG5cclxuICAgICAgICB2YXIgJGNoaWxkID0gdGhpcy5vcHRpb24oY2hpbGQpO1xyXG5cclxuICAgICAgICAkY2hpbGRyZW4ucHVzaCgkY2hpbGQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgJGNoaWxkcmVuQ29udGFpbmVyID0gJCgnPHVsPjwvdWw+Jywge1xyXG4gICAgICAgICdjbGFzcyc6ICdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnMgc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25zLS1uZXN0ZWQnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJGNoaWxkcmVuQ29udGFpbmVyLmFwcGVuZCgkY2hpbGRyZW4pO1xyXG5cclxuICAgICAgJG9wdGlvbi5hcHBlbmQobGFiZWwpO1xyXG4gICAgICAkb3B0aW9uLmFwcGVuZCgkY2hpbGRyZW5Db250YWluZXIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50ZW1wbGF0ZShkYXRhLCBvcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIFV0aWxzLlN0b3JlRGF0YShvcHRpb24sICdkYXRhJywgZGF0YSk7XHJcblxyXG4gICAgcmV0dXJuIG9wdGlvbjtcclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0cyc7XHJcblxyXG4gICAgdGhpcy4kcmVzdWx0cy5hdHRyKCdpZCcsIGlkKTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YWxsJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmNsZWFyKCk7XHJcbiAgICAgIHNlbGYuYXBwZW5kKHBhcmFtcy5kYXRhKTtcclxuXHJcbiAgICAgIGlmIChjb250YWluZXIuaXNPcGVuKCkpIHtcclxuICAgICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuICAgICAgICBzZWxmLmhpZ2hsaWdodEZpcnN0SXRlbSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmFwcGVuZChwYXJhbXMuZGF0YSk7XHJcblxyXG4gICAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgc2VsZi5zZXRDbGFzc2VzKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuaGlkZU1lc3NhZ2VzKCk7XHJcbiAgICAgIHNlbGYuc2hvd0xvYWRpbmcocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5zZXRDbGFzc2VzKCk7XHJcblxyXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnc2Nyb2xsQWZ0ZXJTZWxlY3QnKSkge1xyXG4gICAgICAgIHNlbGYuaGlnaGxpZ2h0Rmlyc3RJdGVtKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcclxuXHJcbiAgICAgIGlmIChzZWxmLm9wdGlvbnMuZ2V0KCdzY3JvbGxBZnRlclNlbGVjdCcpKSB7XHJcbiAgICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBvcGVuLCBhcmlhLWV4cGVuZGVkPVwidHJ1ZVwiXHJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgIHNlbGYuc2V0Q2xhc3NlcygpO1xyXG4gICAgICBzZWxmLmVuc3VyZUhpZ2hsaWdodFZpc2libGUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBlbmRlZD1cImZhbHNlXCJcclxuICAgICAgc2VsZi4kcmVzdWx0cy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG4gICAgICBzZWxmLiRyZXN1bHRzLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOnRvZ2dsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XHJcblxyXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGhpZ2hsaWdodGVkLnRyaWdnZXIoJ21vdXNldXAnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgaWYgKCRoaWdobGlnaHRlZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkYXRhID0gVXRpbHMuR2V0RGF0YSgkaGlnaGxpZ2h0ZWRbMF0sICdkYXRhJyk7XHJcblxyXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnKSA9PSAndHJ1ZScpIHtcclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xyXG4gICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6cHJldmlvdXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xyXG5cclxuICAgICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgYXQgdGhlIHRvcCwgZG9uJ3QgbW92ZSBmdXJ0aGVyXHJcbiAgICAgIC8vIElmIG5vIG9wdGlvbnMsIGN1cnJlbnRJbmRleCB3aWxsIGJlIC0xXHJcbiAgICAgIGlmIChjdXJyZW50SW5kZXggPD0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XHJcblxyXG4gICAgICAvLyBJZiBub25lIGFyZSBoaWdobGlnaHRlZCwgaGlnaGxpZ2h0IHRoZSBmaXJzdFxyXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIG5leHRJbmRleCA9IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciAkbmV4dCA9ICRvcHRpb25zLmVxKG5leHRJbmRleCk7XHJcblxyXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XHJcblxyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHNlbGYuJHJlc3VsdHMub2Zmc2V0KCkudG9wO1xyXG4gICAgICB2YXIgbmV4dFRvcCA9ICRuZXh0Lm9mZnNldCgpLnRvcDtcclxuICAgICAgdmFyIG5leHRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpICsgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0KTtcclxuXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuICAgICAgfSBlbHNlIGlmIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCA8IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm5leHQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcclxuXHJcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xyXG5cclxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XHJcblxyXG4gICAgICAvLyBJZiB3ZSBhcmUgYXQgdGhlIGxhc3Qgb3B0aW9uLCBzdGF5IHRoZXJlXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPj0gJG9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xyXG5cclxuICAgICAgJG5leHQudHJpZ2dlcignbW91c2VlbnRlcicpO1xyXG5cclxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXHJcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5vdXRlckhlaWdodChmYWxzZSk7XHJcbiAgICAgIHZhciBuZXh0Qm90dG9tID0gJG5leHQub2Zmc2V0KCkudG9wICsgJG5leHQub3V0ZXJIZWlnaHQoZmFsc2UpO1xyXG4gICAgICB2YXIgbmV4dE9mZnNldCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyBuZXh0Qm90dG9tIC0gY3VycmVudE9mZnNldDtcclxuXHJcbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcclxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuICAgICAgfSBlbHNlIGlmIChuZXh0Qm90dG9tID4gY3VycmVudE9mZnNldCkge1xyXG4gICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHBhcmFtcy5lbGVtZW50LmFkZENsYXNzKCdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czptZXNzYWdlJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmRpc3BsYXlNZXNzYWdlKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoJC5mbi5tb3VzZXdoZWVsKSB7XHJcbiAgICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNld2hlZWwnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciB0b3AgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgICAgICB2YXIgYm90dG9tID0gc2VsZi4kcmVzdWx0cy5nZXQoMCkuc2Nyb2xsSGVpZ2h0IC0gdG9wICsgZS5kZWx0YVk7XHJcblxyXG4gICAgICAgIHZhciBpc0F0VG9wID0gZS5kZWx0YVkgPiAwICYmIHRvcCAtIGUuZGVsdGFZIDw9IDA7XHJcbiAgICAgICAgdmFyIGlzQXRCb3R0b20gPSBlLmRlbHRhWSA8IDAgJiYgYm90dG9tIDw9IHNlbGYuJHJlc3VsdHMuaGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGlmIChpc0F0VG9wKSB7XHJcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcclxuXHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBdEJvdHRvbSkge1xyXG4gICAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoXHJcbiAgICAgICAgICAgIHNlbGYuJHJlc3VsdHMuZ2V0KDApLnNjcm9sbEhlaWdodCAtIHNlbGYuJHJlc3VsdHMuaGVpZ2h0KClcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNldXAnLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgdmFyIGRhdGEgPSBVdGlscy5HZXREYXRhKHRoaXMsICdkYXRhJyk7XHJcblxyXG4gICAgICBpZiAoJHRoaXMuYXR0cignYXJpYS1zZWxlY3RlZCcpID09PSAndHJ1ZScpIHtcclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnbXVsdGlwbGUnKSkge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcclxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdjbG9zZScsIHt9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3QnLCB7XHJcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxyXG4gICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdtb3VzZWVudGVyJywgJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvblthcmlhLXNlbGVjdGVkXScsXHJcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgdmFyIGRhdGEgPSBVdGlscy5HZXREYXRhKHRoaXMsICdkYXRhJyk7XHJcblxyXG4gICAgICBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpXHJcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmZvY3VzJywge1xyXG4gICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgZWxlbWVudDogJCh0aGlzKVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIFJlc3VsdHMucHJvdG90eXBlLmdldEhpZ2hsaWdodGVkUmVzdWx0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSB0aGlzLiRyZXN1bHRzXHJcbiAgICAuZmluZCgnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xyXG5cclxuICAgIHJldHVybiAkaGlnaGxpZ2h0ZWQ7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuJHJlc3VsdHMucmVtb3ZlKCk7XHJcbiAgfTtcclxuXHJcbiAgUmVzdWx0cy5wcm90b3R5cGUuZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSB0aGlzLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xyXG5cclxuICAgIGlmICgkaGlnaGxpZ2h0ZWQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRyZXN1bHRzLmZpbmQoJ1thcmlhLXNlbGVjdGVkXScpO1xyXG5cclxuICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xyXG5cclxuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy4kcmVzdWx0cy5vZmZzZXQoKS50b3A7XHJcbiAgICB2YXIgbmV4dFRvcCA9ICRoaWdobGlnaHRlZC5vZmZzZXQoKS50b3A7XHJcbiAgICB2YXIgbmV4dE9mZnNldCA9IHRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyAobmV4dFRvcCAtIGN1cnJlbnRPZmZzZXQpO1xyXG5cclxuICAgIHZhciBvZmZzZXREZWx0YSA9IG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0O1xyXG4gICAgbmV4dE9mZnNldCAtPSAkaGlnaGxpZ2h0ZWQub3V0ZXJIZWlnaHQoZmFsc2UpICogMjtcclxuXHJcbiAgICBpZiAoY3VycmVudEluZGV4IDw9IDIpIHtcclxuICAgICAgdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XHJcbiAgICB9IGVsc2UgaWYgKG9mZnNldERlbHRhID4gdGhpcy4kcmVzdWx0cy5vdXRlckhlaWdodCgpIHx8IG9mZnNldERlbHRhIDwgMCkge1xyXG4gICAgICB0aGlzLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBSZXN1bHRzLnByb3RvdHlwZS50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChyZXN1bHQsIGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLmdldCgndGVtcGxhdGVSZXN1bHQnKTtcclxuICAgIHZhciBlc2NhcGVNYXJrdXAgPSB0aGlzLm9wdGlvbnMuZ2V0KCdlc2NhcGVNYXJrdXAnKTtcclxuXHJcbiAgICB2YXIgY29udGVudCA9IHRlbXBsYXRlKHJlc3VsdCwgY29udGFpbmVyKTtcclxuXHJcbiAgICBpZiAoY29udGVudCA9PSBudWxsKSB7XHJcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGVzY2FwZU1hcmt1cChjb250ZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICQoY29udGFpbmVyKS5hcHBlbmQoY29udGVudCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFJlc3VsdHM7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2tleXMnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgS0VZUyA9IHtcclxuICAgIEJBQ0tTUEFDRTogOCxcclxuICAgIFRBQjogOSxcclxuICAgIEVOVEVSOiAxMyxcclxuICAgIFNISUZUOiAxNixcclxuICAgIENUUkw6IDE3LFxyXG4gICAgQUxUOiAxOCxcclxuICAgIEVTQzogMjcsXHJcbiAgICBTUEFDRTogMzIsXHJcbiAgICBQQUdFX1VQOiAzMyxcclxuICAgIFBBR0VfRE9XTjogMzQsXHJcbiAgICBFTkQ6IDM1LFxyXG4gICAgSE9NRTogMzYsXHJcbiAgICBMRUZUOiAzNyxcclxuICAgIFVQOiAzOCxcclxuICAgIFJJR0hUOiAzOSxcclxuICAgIERPV046IDQwLFxyXG4gICAgREVMRVRFOiA0NlxyXG4gIH07XHJcblxyXG4gIHJldHVybiBLRVlTO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vYmFzZScsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuLi91dGlscycsXHJcbiAgJy4uL2tleXMnXHJcbl0sIGZ1bmN0aW9uICgkLCBVdGlscywgS0VZUykge1xyXG4gIGZ1bmN0aW9uIEJhc2VTZWxlY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIEJhc2VTZWxlY3Rpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoQmFzZVNlbGVjdGlvbiwgVXRpbHMuT2JzZXJ2YWJsZSk7XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkc2VsZWN0aW9uID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25cIiByb2xlPVwiY29tYm9ib3hcIiAnICtcclxuICAgICAgJyBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPicgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5fdGFiaW5kZXggPSAwO1xyXG5cclxuICAgIGlmIChVdGlscy5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sICdvbGQtdGFiaW5kZXgnKSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3RhYmluZGV4ID0gVXRpbHMuR2V0RGF0YSh0aGlzLiRlbGVtZW50WzBdLCAnb2xkLXRhYmluZGV4Jyk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3RhYmluZGV4ID0gdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcpO1xyXG4gICAgfVxyXG5cclxuICAgICRzZWxlY3Rpb24uYXR0cigndGl0bGUnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJykpO1xyXG4gICAgJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsIHRoaXMuX3RhYmluZGV4KTtcclxuICAgICRzZWxlY3Rpb24uYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbiA9ICRzZWxlY3Rpb247XHJcblxyXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XHJcbiAgfTtcclxuXHJcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcclxuXHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2ZvY3VzJywgZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignYmx1cicsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgc2VsZi5faGFuZGxlQmx1cihldnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2tleXByZXNzJywgZXZ0KTtcclxuXHJcbiAgICAgIGlmIChldnQud2hpY2ggPT09IEtFWVMuU1BBQ0UpIHtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmZvY3VzJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcGFyYW1zLmRhdGEuX3Jlc3VsdElkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0aW9uOnVwZGF0ZScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi51cGRhdGUocGFyYW1zLmRhdGEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBvcGVuLCBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtb3ducycsIHJlc3VsdHNJZCk7XHJcblxyXG4gICAgICBzZWxmLl9hdHRhY2hDbG9zZUhhbmRsZXIoY29udGFpbmVyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBhbmRlZD1cImZhbHNlXCJcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xyXG4gICAgICBzZWxmLiRzZWxlY3Rpb24ucmVtb3ZlQXR0cignYXJpYS1vd25zJyk7XHJcblxyXG4gICAgICBzZWxmLiRzZWxlY3Rpb24udHJpZ2dlcignZm9jdXMnKTtcclxuXHJcbiAgICAgIHNlbGYuX2RldGFjaENsb3NlSGFuZGxlcihjb250YWluZXIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsIHNlbGYuX3RhYmluZGV4KTtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignZGlzYWJsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XHJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLl9oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVsYXllZCBhcyB0aGUgYWN0aXZlIGVsZW1lbnQgaXMgdGhlIGJvZHkgd2hlbiB0aGUgdGFiXHJcbiAgICAvLyBrZXkgaXMgcHJlc3NlZCwgcG9zc2libHkgYWxvbmcgd2l0aCBvdGhlcnMuXHJcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIERvbid0IHRyaWdnZXIgYGJsdXJgIGlmIHRoZSBmb2N1cyBpcyBzdGlsbCBpbiB0aGUgc2VsZWN0aW9uXHJcbiAgICAgIGlmIChcclxuICAgICAgICAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PSBzZWxmLiRzZWxlY3Rpb25bMF0pIHx8XHJcbiAgICAgICAgKCQuY29udGFpbnMoc2VsZi4kc2VsZWN0aW9uWzBdLCBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2JsdXInLCBldnQpO1xyXG4gICAgfSwgMSk7XHJcbiAgfTtcclxuXHJcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuX2F0dGFjaENsb3NlSGFuZGxlciA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuXHJcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9uKCdtb3VzZWRvd24uc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xyXG5cclxuICAgICAgdmFyICRzZWxlY3QgPSAkdGFyZ2V0LmNsb3Nlc3QoJy5zZWxlY3QyJyk7XHJcblxyXG4gICAgICB2YXIgJGFsbCA9ICQoJy5zZWxlY3QyLnNlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcblxyXG4gICAgICAkYWxsLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzID09ICRzZWxlY3RbMF0pIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciAkZWxlbWVudCA9IFV0aWxzLkdldERhdGEodGhpcywgJ2VsZW1lbnQnKTtcclxuXHJcbiAgICAgICAgJGVsZW1lbnQuc2VsZWN0MignY2xvc2UnKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5fZGV0YWNoQ2xvc2VIYW5kbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQpO1xyXG4gIH07XHJcblxyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRzZWxlY3Rpb24sICRjb250YWluZXIpIHtcclxuICAgIHZhciAkc2VsZWN0aW9uQ29udGFpbmVyID0gJGNvbnRhaW5lci5maW5kKCcuc2VsZWN0aW9uJyk7XHJcbiAgICAkc2VsZWN0aW9uQ29udGFpbmVyLmFwcGVuZCgkc2VsZWN0aW9uKTtcclxuICB9O1xyXG5cclxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5fZGV0YWNoQ2xvc2VIYW5kbGVyKHRoaXMuY29udGFpbmVyKTtcclxuICB9O1xyXG5cclxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHVwZGF0ZWAgbWV0aG9kIG11c3QgYmUgZGVmaW5lZCBpbiBjaGlsZCBjbGFzc2VzLicpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYWJzdHJhY3QgdGhlIFwiZW5hYmxlZFwiIChub3QgXCJkaXNhYmxlZFwiKSBzdGF0ZSBvZiB0aGlzXHJcbiAgICogb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7dHJ1ZX0gaWYgdGhlIGluc3RhbmNlIGlzIG5vdCBkaXNhYmxlZC5cclxuICAgKiBAcmV0dXJuIHtmYWxzZX0gaWYgdGhlIGluc3RhbmNlIGlzIGRpc2FibGVkLlxyXG4gICAqL1xyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkKCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSGVscGVyIG1ldGhvZCB0byBhYnN0cmFjdCB0aGUgXCJkaXNhYmxlZFwiIHN0YXRlIG9mIHRoaXMgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7dHJ1ZX0gaWYgdGhlIGRpc2FibGVkIG9wdGlvbiBpcyB0cnVlLlxyXG4gICAqIEByZXR1cm4ge2ZhbHNlfSBpZiB0aGUgZGlzYWJsZWQgb3B0aW9uIGlzIGZhbHNlLlxyXG4gICAqL1xyXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmlzRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldCgnZGlzYWJsZWQnKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gQmFzZVNlbGVjdGlvbjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL3NpbmdsZScsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuL2Jhc2UnLFxyXG4gICcuLi91dGlscycsXHJcbiAgJy4uL2tleXMnXHJcbl0sIGZ1bmN0aW9uICgkLCBCYXNlU2VsZWN0aW9uLCBVdGlscywgS0VZUykge1xyXG4gIGZ1bmN0aW9uIFNpbmdsZVNlbGVjdGlvbiAoKSB7XHJcbiAgICBTaW5nbGVTZWxlY3Rpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoU2luZ2xlU2VsZWN0aW9uLCBCYXNlU2VsZWN0aW9uKTtcclxuXHJcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJHNlbGVjdGlvbiA9IFNpbmdsZVNlbGVjdGlvbi5fX3N1cGVyX18ucmVuZGVyLmNhbGwodGhpcyk7XHJcblxyXG4gICAgJHNlbGVjdGlvbi5hZGRDbGFzcygnc2VsZWN0Mi1zZWxlY3Rpb24tLXNpbmdsZScpO1xyXG5cclxuICAgICRzZWxlY3Rpb24uaHRtbChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkXCI+PC9zcGFuPicgK1xyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fYXJyb3dcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+JyArXHJcbiAgICAgICAgJzxiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48L2I+JyArXHJcbiAgICAgICc8L3NwYW4+J1xyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcclxuICB9O1xyXG5cclxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1jb250YWluZXInO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJylcclxuICAgICAgLmF0dHIoJ2lkJywgaWQpXHJcbiAgICAgIC5hdHRyKCdyb2xlJywgJ3RleHRib3gnKVxyXG4gICAgICAuYXR0cignYXJpYS1yZWFkb25seScsICd0cnVlJyk7XHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uYXR0cignYXJpYS1sYWJlbGxlZGJ5JywgaWQpO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAvLyBPbmx5IHJlc3BvbmQgdG8gbGVmdCBjbGlja3NcclxuICAgICAgaWYgKGV2dC53aGljaCAhPT0gMSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCd0b2dnbGUnLCB7XHJcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgLy8gVXNlciBmb2N1c2VzIG9uIHRoZSBjb250YWluZXJcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignYmx1cicsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgLy8gVXNlciBleGl0cyB0aGUgY29udGFpbmVyXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xyXG4gICAgICAgIHNlbGYuJHNlbGVjdGlvbi50cmlnZ2VyKCdmb2N1cycpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRyZW5kZXJlZCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJyk7XHJcbiAgICAkcmVuZGVyZWQuZW1wdHkoKTtcclxuICAgICRyZW5kZXJlZC5yZW1vdmVBdHRyKCd0aXRsZScpOyAvLyBjbGVhciB0b29sdGlwIG9uIGVtcHR5XHJcbiAgfTtcclxuXHJcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLmdldCgndGVtcGxhdGVTZWxlY3Rpb24nKTtcclxuICAgIHZhciBlc2NhcGVNYXJrdXAgPSB0aGlzLm9wdGlvbnMuZ2V0KCdlc2NhcGVNYXJrdXAnKTtcclxuXHJcbiAgICByZXR1cm4gZXNjYXBlTWFya3VwKHRlbXBsYXRlKGRhdGEsIGNvbnRhaW5lcikpO1xyXG4gIH07XHJcblxyXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0aW9uQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICQoJzxzcGFuPjwvc3Bhbj4nKTtcclxuICB9O1xyXG5cclxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNlbGVjdGlvbiA9IGRhdGFbMF07XHJcblxyXG4gICAgdmFyICRyZW5kZXJlZCA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJyk7XHJcbiAgICB2YXIgZm9ybWF0dGVkID0gdGhpcy5kaXNwbGF5KHNlbGVjdGlvbiwgJHJlbmRlcmVkKTtcclxuXHJcbiAgICAkcmVuZGVyZWQuZW1wdHkoKS5hcHBlbmQoZm9ybWF0dGVkKTtcclxuXHJcbiAgICB2YXIgdGl0bGUgPSBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQ7XHJcblxyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICRyZW5kZXJlZC5hdHRyKCd0aXRsZScsIHRpdGxlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICRyZW5kZXJlZC5yZW1vdmVBdHRyKCd0aXRsZScpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiBTaW5nbGVTZWxlY3Rpb247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9tdWx0aXBsZScsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuL2Jhc2UnLFxyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKCQsIEJhc2VTZWxlY3Rpb24sIFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gTXVsdGlwbGVTZWxlY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChNdWx0aXBsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XHJcblxyXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJHNlbGVjdGlvbiA9IE11bHRpcGxlU2VsZWN0aW9uLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAkc2VsZWN0aW9uLmFkZENsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbi0tbXVsdGlwbGUnKTtcclxuXHJcbiAgICAkc2VsZWN0aW9uLmh0bWwoXHJcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIj48L3VsPidcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XHJcbiAgfTtcclxuXHJcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgTXVsdGlwbGVTZWxlY3Rpb24uX19zdXBlcl9fLmJpbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ3RvZ2dsZScsIHtcclxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oXHJcbiAgICAgICdjbGljaycsXHJcbiAgICAgICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQgaXMgZGlzYWJsZWRcclxuICAgICAgICBpZiAoc2VsZi5pc0Rpc2FibGVkKCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciAkcmVtb3ZlID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgJHNlbGVjdGlvbiA9ICRyZW1vdmUucGFyZW50KCk7XHJcblxyXG4gICAgICAgIHZhciBkYXRhID0gVXRpbHMuR2V0RGF0YSgkc2VsZWN0aW9uWzBdLCAnZGF0YScpO1xyXG5cclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ3Vuc2VsZWN0Jywge1xyXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxyXG4gICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xyXG4gICAgJHJlbmRlcmVkLmVtcHR5KCk7XHJcbiAgICAkcmVuZGVyZWQucmVtb3ZlQXR0cigndGl0bGUnKTtcclxuICB9O1xyXG5cclxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuZGlzcGxheSA9IGZ1bmN0aW9uIChkYXRhLCBjb250YWluZXIpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RlbXBsYXRlU2VsZWN0aW9uJyk7XHJcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XHJcblxyXG4gICAgcmV0dXJuIGVzY2FwZU1hcmt1cCh0ZW1wbGF0ZShkYXRhLCBjb250YWluZXIpKTtcclxuICB9O1xyXG5cclxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0aW9uQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRjb250YWluZXIgPSAkKFxyXG4gICAgICAnPGxpIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZVwiPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj4nICtcclxuICAgICAgICAgICcmdGltZXM7JyArXHJcbiAgICAgICAgJzwvc3Bhbj4nICtcclxuICAgICAgJzwvbGk+J1xyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcclxuICB9O1xyXG5cclxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIHRoaXMuY2xlYXIoKTtcclxuXHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkc2VsZWN0aW9ucyA9IFtdO1xyXG5cclxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xyXG4gICAgICB2YXIgc2VsZWN0aW9uID0gZGF0YVtkXTtcclxuXHJcbiAgICAgIHZhciAkc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25Db250YWluZXIoKTtcclxuICAgICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRzZWxlY3Rpb24pO1xyXG5cclxuICAgICAgJHNlbGVjdGlvbi5hcHBlbmQoZm9ybWF0dGVkKTtcclxuXHJcbiAgICAgIHZhciB0aXRsZSA9IHNlbGVjdGlvbi50aXRsZSB8fCBzZWxlY3Rpb24udGV4dDtcclxuXHJcbiAgICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgICRzZWxlY3Rpb24uYXR0cigndGl0bGUnLCB0aXRsZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSgkc2VsZWN0aW9uWzBdLCAnZGF0YScsIHNlbGVjdGlvbik7XHJcblxyXG4gICAgICAkc2VsZWN0aW9ucy5wdXNoKCRzZWxlY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xyXG5cclxuICAgIFV0aWxzLmFwcGVuZE1hbnkoJHJlbmRlcmVkLCAkc2VsZWN0aW9ucyk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE11bHRpcGxlU2VsZWN0aW9uO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vcGxhY2Vob2xkZXInLFtcclxuICAnLi4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uIChVdGlscykge1xyXG4gIGZ1bmN0aW9uIFBsYWNlaG9sZGVyIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5ub3JtYWxpemVQbGFjZWhvbGRlcihvcHRpb25zLmdldCgncGxhY2Vob2xkZXInKSk7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgUGxhY2Vob2xkZXIucHJvdG90eXBlLm5vcm1hbGl6ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKF8sIHBsYWNlaG9sZGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICBwbGFjZWhvbGRlciA9IHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XHJcbiAgfTtcclxuXHJcbiAgUGxhY2Vob2xkZXIucHJvdG90eXBlLmNyZWF0ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGxhY2Vob2xkZXIpIHtcclxuICAgIHZhciAkcGxhY2Vob2xkZXIgPSB0aGlzLnNlbGVjdGlvbkNvbnRhaW5lcigpO1xyXG5cclxuICAgICRwbGFjZWhvbGRlci5odG1sKHRoaXMuZGlzcGxheShwbGFjZWhvbGRlcikpO1xyXG4gICAgJHBsYWNlaG9sZGVyLmFkZENsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbl9fcGxhY2Vob2xkZXInKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlJyk7XHJcblxyXG4gICAgcmV0dXJuICRwbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBQbGFjZWhvbGRlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xyXG4gICAgdmFyIHNpbmdsZVBsYWNlaG9sZGVyID0gKFxyXG4gICAgICBkYXRhLmxlbmd0aCA9PSAxICYmIGRhdGFbMF0uaWQgIT0gdGhpcy5wbGFjZWhvbGRlci5pZFxyXG4gICAgKTtcclxuICAgIHZhciBtdWx0aXBsZVNlbGVjdGlvbnMgPSBkYXRhLmxlbmd0aCA+IDE7XHJcblxyXG4gICAgaWYgKG11bHRpcGxlU2VsZWN0aW9ucyB8fCBzaW5nbGVQbGFjZWhvbGRlcikge1xyXG4gICAgICByZXR1cm4gZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jbGVhcigpO1xyXG5cclxuICAgIHZhciAkcGxhY2Vob2xkZXIgPSB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyKHRoaXMucGxhY2Vob2xkZXIpO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJykuYXBwZW5kKCRwbGFjZWhvbGRlcik7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFBsYWNlaG9sZGVyO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vYWxsb3dDbGVhcicsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuLi9rZXlzJyxcclxuICAnLi4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uICgkLCBLRVlTLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIEFsbG93Q2xlYXIgKCkgeyB9XHJcblxyXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyID09IG51bGwpIHtcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAnU2VsZWN0MjogVGhlIGBhbGxvd0NsZWFyYCBvcHRpb24gc2hvdWxkIGJlIHVzZWQgaW4gY29tYmluYXRpb24gJyArXHJcbiAgICAgICAgICAnd2l0aCB0aGUgYHBsYWNlaG9sZGVyYCBvcHRpb24uJ1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ21vdXNlZG93bicsICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIHNlbGYuX2hhbmRsZUNsZWFyKGV2dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLl9oYW5kbGVLZXlib2FyZENsZWFyKGV2dCwgY29udGFpbmVyKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLl9oYW5kbGVDbGVhciA9IGZ1bmN0aW9uIChfLCBldnQpIHtcclxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQgaXMgZGlzYWJsZWRcclxuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICRjbGVhciA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyJyk7XHJcblxyXG4gICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBub3RoaW5nIGhhcyBiZWVuIHNlbGVjdGVkXHJcbiAgICBpZiAoJGNsZWFyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgIHZhciBkYXRhID0gVXRpbHMuR2V0RGF0YSgkY2xlYXJbMF0sICdkYXRhJyk7XHJcblxyXG4gICAgdmFyIHByZXZpb3VzVmFsID0gdGhpcy4kZWxlbWVudC52YWwoKTtcclxuICAgIHRoaXMuJGVsZW1lbnQudmFsKHRoaXMucGxhY2Vob2xkZXIuaWQpO1xyXG5cclxuICAgIHZhciB1bnNlbGVjdERhdGEgPSB7XHJcbiAgICAgIGRhdGE6IGRhdGFcclxuICAgIH07XHJcbiAgICB0aGlzLnRyaWdnZXIoJ2NsZWFyJywgdW5zZWxlY3REYXRhKTtcclxuICAgIGlmICh1bnNlbGVjdERhdGEucHJldmVudGVkKSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHByZXZpb3VzVmFsKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xyXG4gICAgICB1bnNlbGVjdERhdGEgPSB7XHJcbiAgICAgICAgZGF0YTogZGF0YVtkXVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVHJpZ2dlciB0aGUgYHVuc2VsZWN0YCBldmVudCwgc28gcGVvcGxlIGNhbiBwcmV2ZW50IGl0IGZyb20gYmVpbmdcclxuICAgICAgLy8gY2xlYXJlZC5cclxuICAgICAgdGhpcy50cmlnZ2VyKCd1bnNlbGVjdCcsIHVuc2VsZWN0RGF0YSk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgZXZlbnQgd2FzIHByZXZlbnRlZCwgZG9uJ3QgY2xlYXIgaXQgb3V0LlxyXG4gICAgICBpZiAodW5zZWxlY3REYXRhLnByZXZlbnRlZCkge1xyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHByZXZpb3VzVmFsKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyKCd0b2dnbGUnLCB7fSk7XHJcbiAgfTtcclxuXHJcbiAgQWxsb3dDbGVhci5wcm90b3R5cGUuX2hhbmRsZUtleWJvYXJkQ2xlYXIgPSBmdW5jdGlvbiAoXywgZXZ0LCBjb250YWluZXIpIHtcclxuICAgIGlmIChjb250YWluZXIuaXNPcGVuKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChldnQud2hpY2ggPT0gS0VZUy5ERUxFVEUgfHwgZXZ0LndoaWNoID09IEtFWVMuQkFDS1NQQUNFKSB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNsZWFyKGV2dCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgQWxsb3dDbGVhci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XHJcblxyXG4gICAgaWYgKHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3BsYWNlaG9sZGVyJykubGVuZ3RoID4gMCB8fFxyXG4gICAgICAgIGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmVtb3ZlQWxsID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KCdyZW1vdmVBbGxJdGVtcycpO1xyXG5cclxuICAgIHZhciAkcmVtb3ZlID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyXCIgdGl0bGU9XCInICsgcmVtb3ZlQWxsKCkgKydcIj4nICtcclxuICAgICAgICAnJnRpbWVzOycgK1xyXG4gICAgICAnPC9zcGFuPidcclxuICAgICk7XHJcbiAgICBVdGlscy5TdG9yZURhdGEoJHJlbW92ZVswXSwgJ2RhdGEnLCBkYXRhKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLnByZXBlbmQoJHJlbW92ZSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEFsbG93Q2xlYXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9zZWFyY2gnLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi4vdXRpbHMnLFxyXG4gICcuLi9rZXlzJ1xyXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMsIEtFWVMpIHtcclxuICBmdW5jdGlvbiBTZWFyY2ggKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdmFyICRzZWFyY2ggPSAkKFxyXG4gICAgICAnPGxpIGNsYXNzPVwic2VsZWN0Mi1zZWFyY2ggc2VsZWN0Mi1zZWFyY2gtLWlubGluZVwiPicgK1xyXG4gICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaF9fZmllbGRcIiB0eXBlPVwic2VhcmNoXCIgdGFiaW5kZXg9XCItMVwiJyArXHJcbiAgICAgICAgJyBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwibm9uZVwiJyArXHJcbiAgICAgICAgJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiByb2xlPVwic2VhcmNoYm94XCIgYXJpYS1hdXRvY29tcGxldGU9XCJsaXN0XCIgLz4nICtcclxuICAgICAgJzwvbGk+J1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLiRzZWFyY2hDb250YWluZXIgPSAkc2VhcmNoO1xyXG4gICAgdGhpcy4kc2VhcmNoID0gJHNlYXJjaC5maW5kKCdpbnB1dCcpO1xyXG5cclxuICAgIHZhciAkcmVuZGVyZWQgPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLl90cmFuc2ZlclRhYkluZGV4KCk7XHJcblxyXG4gICAgcmV0dXJuICRyZW5kZXJlZDtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ2FyaWEtY29udHJvbHMnLCByZXN1bHRzSWQpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC52YWwoJycpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1jb250cm9scycpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJHNlYXJjaC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuXHJcbiAgICAgIHNlbGYuX3RyYW5zZmVyVGFiSW5kZXgoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignZGlzYWJsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgaWYgKHBhcmFtcy5kYXRhLl9yZXN1bHRJZCkge1xyXG4gICAgICAgIHNlbGYuJHNlYXJjaC5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBwYXJhbXMuZGF0YS5fcmVzdWx0SWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuJHNlYXJjaC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1c2luJywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ2ZvY3VzJywgZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXNvdXQnLCAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX2hhbmRsZUJsdXIoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbigna2V5ZG93bicsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XHJcblxyXG4gICAgICBzZWxmLl9rZXlVcFByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcclxuXHJcbiAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XHJcblxyXG4gICAgICBpZiAoa2V5ID09PSBLRVlTLkJBQ0tTUEFDRSAmJiBzZWxmLiRzZWFyY2gudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgICAgdmFyICRwcmV2aW91c0Nob2ljZSA9IHNlbGYuJHNlYXJjaENvbnRhaW5lclxyXG4gICAgICAgICAgLnByZXYoJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlJyk7XHJcblxyXG4gICAgICAgIGlmICgkcHJldmlvdXNDaG9pY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdmFyIGl0ZW0gPSBVdGlscy5HZXREYXRhKCRwcmV2aW91c0Nob2ljZVswXSwgJ2RhdGEnKTtcclxuXHJcbiAgICAgICAgICBzZWxmLnNlYXJjaFJlbW92ZUNob2ljZShpdGVtKTtcclxuXHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignY2xpY2snLCAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIGlmIChzZWxmLiRzZWFyY2gudmFsKCkpIHtcclxuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRyeSB0byBkZXRlY3QgdGhlIElFIHZlcnNpb24gc2hvdWxkIHRoZSBgZG9jdW1lbnRNb2RlYCBwcm9wZXJ0eSB0aGF0XHJcbiAgICAvLyBpcyBzdG9yZWQgb24gdGhlIGRvY3VtZW50LiBUaGlzIGlzIG9ubHkgaW1wbGVtZW50ZWQgaW4gSUUgYW5kIGlzXHJcbiAgICAvLyBzbGlnaHRseSBjbGVhbmVyIHRoYW4gZG9pbmcgYSB1c2VyIGFnZW50IGNoZWNrLlxyXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlIGluIEVkZ2UsIGJ1dCBFZGdlIGFsc28gZG9lc24ndCBoYXZlXHJcbiAgICAvLyB0aGlzIGJ1Zy5cclxuICAgIHZhciBtc2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xyXG4gICAgdmFyIGRpc2FibGVJbnB1dEV2ZW50cyA9IG1zaWUgJiYgbXNpZSA8PSAxMTtcclxuXHJcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBicm93c2VycyB3aGljaCBkbyBub3Qgc3VwcG9ydCB0aGUgYGlucHV0YCBldmVudFxyXG4gICAgLy8gVGhpcyB3aWxsIHByZXZlbnQgZG91YmxlLXRyaWdnZXJpbmcgb2YgZXZlbnRzIGZvciBicm93c2VycyB3aGljaCBzdXBwb3J0XHJcbiAgICAvLyBib3RoIHRoZSBga2V5dXBgIGFuZCBgaW5wdXRgIGV2ZW50cy5cclxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbihcclxuICAgICAgJ2lucHV0LnNlYXJjaGNoZWNrJyxcclxuICAgICAgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIC8vIElFIHdpbGwgdHJpZ2dlciB0aGUgYGlucHV0YCBldmVudCB3aGVuIGEgcGxhY2Vob2xkZXIgaXMgdXNlZCBvbiBhXHJcbiAgICAgICAgLy8gc2VhcmNoIGJveC4gVG8gZ2V0IGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBhcmUgZm9yY2VkIHRvIGlnbm9yZSBhbGxcclxuICAgICAgICAvLyBgaW5wdXRgIGV2ZW50cyBpbiBJRSBhbmQga2VlcCB1c2luZyBga2V5dXBgLlxyXG4gICAgICAgIGlmIChkaXNhYmxlSW5wdXRFdmVudHMpIHtcclxuICAgICAgICAgIHNlbGYuJHNlbGVjdGlvbi5vZmYoJ2lucHV0LnNlYXJjaCBpbnB1dC5zZWFyY2hjaGVjaycpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVW5iaW5kIHRoZSBkdXBsaWNhdGVkIGBrZXl1cGAgZXZlbnRcclxuICAgICAgICBzZWxmLiRzZWxlY3Rpb24ub2ZmKCdrZXl1cC5zZWFyY2gnKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oXHJcbiAgICAgICdrZXl1cC5zZWFyY2ggaW5wdXQuc2VhcmNoJyxcclxuICAgICAgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJyxcclxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIC8vIElFIHdpbGwgdHJpZ2dlciB0aGUgYGlucHV0YCBldmVudCB3aGVuIGEgcGxhY2Vob2xkZXIgaXMgdXNlZCBvbiBhXHJcbiAgICAgICAgLy8gc2VhcmNoIGJveC4gVG8gZ2V0IGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBhcmUgZm9yY2VkIHRvIGlnbm9yZSBhbGxcclxuICAgICAgICAvLyBgaW5wdXRgIGV2ZW50cyBpbiBJRSBhbmQga2VlcCB1c2luZyBga2V5dXBgLlxyXG4gICAgICAgIGlmIChkaXNhYmxlSW5wdXRFdmVudHMgJiYgZXZ0LnR5cGUgPT09ICdpbnB1dCcpIHtcclxuICAgICAgICAgIHNlbGYuJHNlbGVjdGlvbi5vZmYoJ2lucHV0LnNlYXJjaCBpbnB1dC5zZWFyY2hjaGVjaycpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcclxuXHJcbiAgICAgICAgLy8gV2UgY2FuIGZyZWVseSBpZ25vcmUgZXZlbnRzIGZyb20gbW9kaWZpZXIga2V5c1xyXG4gICAgICAgIGlmIChrZXkgPT0gS0VZUy5TSElGVCB8fCBrZXkgPT0gS0VZUy5DVFJMIHx8IGtleSA9PSBLRVlTLkFMVCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGFiYmluZyB3aWxsIGJlIGhhbmRsZWQgZHVyaW5nIHRoZSBga2V5ZG93bmAgcGhhc2VcclxuICAgICAgICBpZiAoa2V5ID09IEtFWVMuVEFCKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmhhbmRsZVNlYXJjaChldnQpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgdHJhbnNmZXIgdGhlIHRhYmluZGV4IGF0dHJpYnV0ZSBmcm9tIHRoZSByZW5kZXJlZFxyXG4gICAqIHNlbGVjdGlvbiB0byB0aGUgc2VhcmNoIGJveC4gVGhpcyBhbGxvd3MgZm9yIHRoZSBzZWFyY2ggYm94IHRvIGJlIHVzZWQgYXNcclxuICAgKiB0aGUgcHJpbWFyeSBmb2N1cyBpbnN0ZWFkIG9mIHRoZSBzZWxlY3Rpb24gY29udGFpbmVyLlxyXG4gICAqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBTZWFyY2gucHJvdG90eXBlLl90cmFuc2ZlclRhYkluZGV4ID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdGhpcy4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JykpO1xyXG4gICAgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XHJcbiAgfTtcclxuXHJcbiAgU2VhcmNoLnByb3RvdHlwZS5jcmVhdGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBsYWNlaG9sZGVyKSB7XHJcbiAgICB0aGlzLiRzZWFyY2guYXR0cigncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlci50ZXh0KTtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcclxuICAgIHZhciBzZWFyY2hIYWRGb2N1cyA9IHRoaXMuJHNlYXJjaFswXSA9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaC5hdHRyKCdwbGFjZWhvbGRlcicsICcnKTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcclxuXHJcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuJHNlYXJjaENvbnRhaW5lcik7XHJcblxyXG4gICAgdGhpcy5yZXNpemVTZWFyY2goKTtcclxuICAgIGlmIChzZWFyY2hIYWRGb2N1cykge1xyXG4gICAgICB0aGlzLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLmhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMucmVzaXplU2VhcmNoKCk7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9rZXlVcFByZXZlbnRlZCkge1xyXG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XHJcblxyXG4gICAgICB0aGlzLnRyaWdnZXIoJ3F1ZXJ5Jywge1xyXG4gICAgICAgIHRlcm06IGlucHV0XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2tleVVwUHJldmVudGVkID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgU2VhcmNoLnByb3RvdHlwZS5zZWFyY2hSZW1vdmVDaG9pY2UgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBpdGVtKSB7XHJcbiAgICB0aGlzLnRyaWdnZXIoJ3Vuc2VsZWN0Jywge1xyXG4gICAgICBkYXRhOiBpdGVtXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWFyY2gudmFsKGl0ZW0udGV4dCk7XHJcbiAgICB0aGlzLmhhbmRsZVNlYXJjaCgpO1xyXG4gIH07XHJcblxyXG4gIFNlYXJjaC5wcm90b3R5cGUucmVzaXplU2VhcmNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kc2VhcmNoLmNzcygnd2lkdGgnLCAnMjVweCcpO1xyXG5cclxuICAgIHZhciB3aWR0aCA9ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLiRzZWFyY2guYXR0cigncGxhY2Vob2xkZXInKSAhPT0gJycpIHtcclxuICAgICAgd2lkdGggPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLndpZHRoKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgbWluaW11bVdpZHRoID0gdGhpcy4kc2VhcmNoLnZhbCgpLmxlbmd0aCArIDE7XHJcblxyXG4gICAgICB3aWR0aCA9IChtaW5pbXVtV2lkdGggKiAwLjc1KSArICdlbSc7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kc2VhcmNoLmNzcygnd2lkdGgnLCB3aWR0aCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFNlYXJjaDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL2V2ZW50UmVsYXknLFtcclxuICAnanF1ZXJ5J1xyXG5dLCBmdW5jdGlvbiAoJCkge1xyXG4gIGZ1bmN0aW9uIEV2ZW50UmVsYXkgKCkgeyB9XHJcblxyXG4gIEV2ZW50UmVsYXkucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciByZWxheUV2ZW50cyA9IFtcclxuICAgICAgJ29wZW4nLCAnb3BlbmluZycsXHJcbiAgICAgICdjbG9zZScsICdjbG9zaW5nJyxcclxuICAgICAgJ3NlbGVjdCcsICdzZWxlY3RpbmcnLFxyXG4gICAgICAndW5zZWxlY3QnLCAndW5zZWxlY3RpbmcnLFxyXG4gICAgICAnY2xlYXInLCAnY2xlYXJpbmcnXHJcbiAgICBdO1xyXG5cclxuICAgIHZhciBwcmV2ZW50YWJsZUV2ZW50cyA9IFtcclxuICAgICAgJ29wZW5pbmcnLCAnY2xvc2luZycsICdzZWxlY3RpbmcnLCAndW5zZWxlY3RpbmcnLCAnY2xlYXJpbmcnXHJcbiAgICBdO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xyXG4gICAgICAvLyBJZ25vcmUgZXZlbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSByZWxheWVkXHJcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgcmVsYXlFdmVudHMpID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGhlIHBhcmFtZXRlcnMgc2hvdWxkIGFsd2F5cyBiZSBhbiBvYmplY3RcclxuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xyXG5cclxuICAgICAgLy8gR2VuZXJhdGUgdGhlIGpRdWVyeSBldmVudCBmb3IgdGhlIFNlbGVjdDIgZXZlbnRcclxuICAgICAgdmFyIGV2dCA9ICQuRXZlbnQoJ3NlbGVjdDI6JyArIG5hbWUsIHtcclxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcihldnQpO1xyXG5cclxuICAgICAgLy8gT25seSBoYW5kbGUgcHJldmVudGFibGUgZXZlbnRzIGlmIGl0IHdhcyBvbmVcclxuICAgICAgaWYgKCQuaW5BcnJheShuYW1lLCBwcmV2ZW50YWJsZUV2ZW50cykgPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwYXJhbXMucHJldmVudGVkID0gZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEV2ZW50UmVsYXk7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL3RyYW5zbGF0aW9uJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJ3JlcXVpcmUnXHJcbl0sIGZ1bmN0aW9uICgkLCByZXF1aXJlKSB7XHJcbiAgZnVuY3Rpb24gVHJhbnNsYXRpb24gKGRpY3QpIHtcclxuICAgIHRoaXMuZGljdCA9IGRpY3QgfHwge307XHJcbiAgfVxyXG5cclxuICBUcmFuc2xhdGlvbi5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGljdDtcclxuICB9O1xyXG5cclxuICBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGljdFtrZXldO1xyXG4gIH07XHJcblxyXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcclxuICAgIHRoaXMuZGljdCA9ICQuZXh0ZW5kKHt9LCB0cmFuc2xhdGlvbi5hbGwoKSwgdGhpcy5kaWN0KTtcclxuICB9O1xyXG5cclxuICAvLyBTdGF0aWMgZnVuY3Rpb25zXHJcblxyXG4gIFRyYW5zbGF0aW9uLl9jYWNoZSA9IHt9O1xyXG5cclxuICBUcmFuc2xhdGlvbi5sb2FkUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICBpZiAoIShwYXRoIGluIFRyYW5zbGF0aW9uLl9jYWNoZSkpIHtcclxuICAgICAgdmFyIHRyYW5zbGF0aW9ucyA9IHJlcXVpcmUocGF0aCk7XHJcblxyXG4gICAgICBUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0gPSB0cmFuc2xhdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvbihUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBUcmFuc2xhdGlvbjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGlhY3JpdGljcycsW1xyXG5cclxuXSwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBkaWFjcml0aWNzID0ge1xyXG4gICAgJ1xcdTI0QjYnOiAnQScsXHJcbiAgICAnXFx1RkYyMSc6ICdBJyxcclxuICAgICdcXHUwMEMwJzogJ0EnLFxyXG4gICAgJ1xcdTAwQzEnOiAnQScsXHJcbiAgICAnXFx1MDBDMic6ICdBJyxcclxuICAgICdcXHUxRUE2JzogJ0EnLFxyXG4gICAgJ1xcdTFFQTQnOiAnQScsXHJcbiAgICAnXFx1MUVBQSc6ICdBJyxcclxuICAgICdcXHUxRUE4JzogJ0EnLFxyXG4gICAgJ1xcdTAwQzMnOiAnQScsXHJcbiAgICAnXFx1MDEwMCc6ICdBJyxcclxuICAgICdcXHUwMTAyJzogJ0EnLFxyXG4gICAgJ1xcdTFFQjAnOiAnQScsXHJcbiAgICAnXFx1MUVBRSc6ICdBJyxcclxuICAgICdcXHUxRUI0JzogJ0EnLFxyXG4gICAgJ1xcdTFFQjInOiAnQScsXHJcbiAgICAnXFx1MDIyNic6ICdBJyxcclxuICAgICdcXHUwMUUwJzogJ0EnLFxyXG4gICAgJ1xcdTAwQzQnOiAnQScsXHJcbiAgICAnXFx1MDFERSc6ICdBJyxcclxuICAgICdcXHUxRUEyJzogJ0EnLFxyXG4gICAgJ1xcdTAwQzUnOiAnQScsXHJcbiAgICAnXFx1MDFGQSc6ICdBJyxcclxuICAgICdcXHUwMUNEJzogJ0EnLFxyXG4gICAgJ1xcdTAyMDAnOiAnQScsXHJcbiAgICAnXFx1MDIwMic6ICdBJyxcclxuICAgICdcXHUxRUEwJzogJ0EnLFxyXG4gICAgJ1xcdTFFQUMnOiAnQScsXHJcbiAgICAnXFx1MUVCNic6ICdBJyxcclxuICAgICdcXHUxRTAwJzogJ0EnLFxyXG4gICAgJ1xcdTAxMDQnOiAnQScsXHJcbiAgICAnXFx1MDIzQSc6ICdBJyxcclxuICAgICdcXHUyQzZGJzogJ0EnLFxyXG4gICAgJ1xcdUE3MzInOiAnQUEnLFxyXG4gICAgJ1xcdTAwQzYnOiAnQUUnLFxyXG4gICAgJ1xcdTAxRkMnOiAnQUUnLFxyXG4gICAgJ1xcdTAxRTInOiAnQUUnLFxyXG4gICAgJ1xcdUE3MzQnOiAnQU8nLFxyXG4gICAgJ1xcdUE3MzYnOiAnQVUnLFxyXG4gICAgJ1xcdUE3MzgnOiAnQVYnLFxyXG4gICAgJ1xcdUE3M0EnOiAnQVYnLFxyXG4gICAgJ1xcdUE3M0MnOiAnQVknLFxyXG4gICAgJ1xcdTI0QjcnOiAnQicsXHJcbiAgICAnXFx1RkYyMic6ICdCJyxcclxuICAgICdcXHUxRTAyJzogJ0InLFxyXG4gICAgJ1xcdTFFMDQnOiAnQicsXHJcbiAgICAnXFx1MUUwNic6ICdCJyxcclxuICAgICdcXHUwMjQzJzogJ0InLFxyXG4gICAgJ1xcdTAxODInOiAnQicsXHJcbiAgICAnXFx1MDE4MSc6ICdCJyxcclxuICAgICdcXHUyNEI4JzogJ0MnLFxyXG4gICAgJ1xcdUZGMjMnOiAnQycsXHJcbiAgICAnXFx1MDEwNic6ICdDJyxcclxuICAgICdcXHUwMTA4JzogJ0MnLFxyXG4gICAgJ1xcdTAxMEEnOiAnQycsXHJcbiAgICAnXFx1MDEwQyc6ICdDJyxcclxuICAgICdcXHUwMEM3JzogJ0MnLFxyXG4gICAgJ1xcdTFFMDgnOiAnQycsXHJcbiAgICAnXFx1MDE4Nyc6ICdDJyxcclxuICAgICdcXHUwMjNCJzogJ0MnLFxyXG4gICAgJ1xcdUE3M0UnOiAnQycsXHJcbiAgICAnXFx1MjRCOSc6ICdEJyxcclxuICAgICdcXHVGRjI0JzogJ0QnLFxyXG4gICAgJ1xcdTFFMEEnOiAnRCcsXHJcbiAgICAnXFx1MDEwRSc6ICdEJyxcclxuICAgICdcXHUxRTBDJzogJ0QnLFxyXG4gICAgJ1xcdTFFMTAnOiAnRCcsXHJcbiAgICAnXFx1MUUxMic6ICdEJyxcclxuICAgICdcXHUxRTBFJzogJ0QnLFxyXG4gICAgJ1xcdTAxMTAnOiAnRCcsXHJcbiAgICAnXFx1MDE4Qic6ICdEJyxcclxuICAgICdcXHUwMThBJzogJ0QnLFxyXG4gICAgJ1xcdTAxODknOiAnRCcsXHJcbiAgICAnXFx1QTc3OSc6ICdEJyxcclxuICAgICdcXHUwMUYxJzogJ0RaJyxcclxuICAgICdcXHUwMUM0JzogJ0RaJyxcclxuICAgICdcXHUwMUYyJzogJ0R6JyxcclxuICAgICdcXHUwMUM1JzogJ0R6JyxcclxuICAgICdcXHUyNEJBJzogJ0UnLFxyXG4gICAgJ1xcdUZGMjUnOiAnRScsXHJcbiAgICAnXFx1MDBDOCc6ICdFJyxcclxuICAgICdcXHUwMEM5JzogJ0UnLFxyXG4gICAgJ1xcdTAwQ0EnOiAnRScsXHJcbiAgICAnXFx1MUVDMCc6ICdFJyxcclxuICAgICdcXHUxRUJFJzogJ0UnLFxyXG4gICAgJ1xcdTFFQzQnOiAnRScsXHJcbiAgICAnXFx1MUVDMic6ICdFJyxcclxuICAgICdcXHUxRUJDJzogJ0UnLFxyXG4gICAgJ1xcdTAxMTInOiAnRScsXHJcbiAgICAnXFx1MUUxNCc6ICdFJyxcclxuICAgICdcXHUxRTE2JzogJ0UnLFxyXG4gICAgJ1xcdTAxMTQnOiAnRScsXHJcbiAgICAnXFx1MDExNic6ICdFJyxcclxuICAgICdcXHUwMENCJzogJ0UnLFxyXG4gICAgJ1xcdTFFQkEnOiAnRScsXHJcbiAgICAnXFx1MDExQSc6ICdFJyxcclxuICAgICdcXHUwMjA0JzogJ0UnLFxyXG4gICAgJ1xcdTAyMDYnOiAnRScsXHJcbiAgICAnXFx1MUVCOCc6ICdFJyxcclxuICAgICdcXHUxRUM2JzogJ0UnLFxyXG4gICAgJ1xcdTAyMjgnOiAnRScsXHJcbiAgICAnXFx1MUUxQyc6ICdFJyxcclxuICAgICdcXHUwMTE4JzogJ0UnLFxyXG4gICAgJ1xcdTFFMTgnOiAnRScsXHJcbiAgICAnXFx1MUUxQSc6ICdFJyxcclxuICAgICdcXHUwMTkwJzogJ0UnLFxyXG4gICAgJ1xcdTAxOEUnOiAnRScsXHJcbiAgICAnXFx1MjRCQic6ICdGJyxcclxuICAgICdcXHVGRjI2JzogJ0YnLFxyXG4gICAgJ1xcdTFFMUUnOiAnRicsXHJcbiAgICAnXFx1MDE5MSc6ICdGJyxcclxuICAgICdcXHVBNzdCJzogJ0YnLFxyXG4gICAgJ1xcdTI0QkMnOiAnRycsXHJcbiAgICAnXFx1RkYyNyc6ICdHJyxcclxuICAgICdcXHUwMUY0JzogJ0cnLFxyXG4gICAgJ1xcdTAxMUMnOiAnRycsXHJcbiAgICAnXFx1MUUyMCc6ICdHJyxcclxuICAgICdcXHUwMTFFJzogJ0cnLFxyXG4gICAgJ1xcdTAxMjAnOiAnRycsXHJcbiAgICAnXFx1MDFFNic6ICdHJyxcclxuICAgICdcXHUwMTIyJzogJ0cnLFxyXG4gICAgJ1xcdTAxRTQnOiAnRycsXHJcbiAgICAnXFx1MDE5Myc6ICdHJyxcclxuICAgICdcXHVBN0EwJzogJ0cnLFxyXG4gICAgJ1xcdUE3N0QnOiAnRycsXHJcbiAgICAnXFx1QTc3RSc6ICdHJyxcclxuICAgICdcXHUyNEJEJzogJ0gnLFxyXG4gICAgJ1xcdUZGMjgnOiAnSCcsXHJcbiAgICAnXFx1MDEyNCc6ICdIJyxcclxuICAgICdcXHUxRTIyJzogJ0gnLFxyXG4gICAgJ1xcdTFFMjYnOiAnSCcsXHJcbiAgICAnXFx1MDIxRSc6ICdIJyxcclxuICAgICdcXHUxRTI0JzogJ0gnLFxyXG4gICAgJ1xcdTFFMjgnOiAnSCcsXHJcbiAgICAnXFx1MUUyQSc6ICdIJyxcclxuICAgICdcXHUwMTI2JzogJ0gnLFxyXG4gICAgJ1xcdTJDNjcnOiAnSCcsXHJcbiAgICAnXFx1MkM3NSc6ICdIJyxcclxuICAgICdcXHVBNzhEJzogJ0gnLFxyXG4gICAgJ1xcdTI0QkUnOiAnSScsXHJcbiAgICAnXFx1RkYyOSc6ICdJJyxcclxuICAgICdcXHUwMENDJzogJ0knLFxyXG4gICAgJ1xcdTAwQ0QnOiAnSScsXHJcbiAgICAnXFx1MDBDRSc6ICdJJyxcclxuICAgICdcXHUwMTI4JzogJ0knLFxyXG4gICAgJ1xcdTAxMkEnOiAnSScsXHJcbiAgICAnXFx1MDEyQyc6ICdJJyxcclxuICAgICdcXHUwMTMwJzogJ0knLFxyXG4gICAgJ1xcdTAwQ0YnOiAnSScsXHJcbiAgICAnXFx1MUUyRSc6ICdJJyxcclxuICAgICdcXHUxRUM4JzogJ0knLFxyXG4gICAgJ1xcdTAxQ0YnOiAnSScsXHJcbiAgICAnXFx1MDIwOCc6ICdJJyxcclxuICAgICdcXHUwMjBBJzogJ0knLFxyXG4gICAgJ1xcdTFFQ0EnOiAnSScsXHJcbiAgICAnXFx1MDEyRSc6ICdJJyxcclxuICAgICdcXHUxRTJDJzogJ0knLFxyXG4gICAgJ1xcdTAxOTcnOiAnSScsXHJcbiAgICAnXFx1MjRCRic6ICdKJyxcclxuICAgICdcXHVGRjJBJzogJ0onLFxyXG4gICAgJ1xcdTAxMzQnOiAnSicsXHJcbiAgICAnXFx1MDI0OCc6ICdKJyxcclxuICAgICdcXHUyNEMwJzogJ0snLFxyXG4gICAgJ1xcdUZGMkInOiAnSycsXHJcbiAgICAnXFx1MUUzMCc6ICdLJyxcclxuICAgICdcXHUwMUU4JzogJ0snLFxyXG4gICAgJ1xcdTFFMzInOiAnSycsXHJcbiAgICAnXFx1MDEzNic6ICdLJyxcclxuICAgICdcXHUxRTM0JzogJ0snLFxyXG4gICAgJ1xcdTAxOTgnOiAnSycsXHJcbiAgICAnXFx1MkM2OSc6ICdLJyxcclxuICAgICdcXHVBNzQwJzogJ0snLFxyXG4gICAgJ1xcdUE3NDInOiAnSycsXHJcbiAgICAnXFx1QTc0NCc6ICdLJyxcclxuICAgICdcXHVBN0EyJzogJ0snLFxyXG4gICAgJ1xcdTI0QzEnOiAnTCcsXHJcbiAgICAnXFx1RkYyQyc6ICdMJyxcclxuICAgICdcXHUwMTNGJzogJ0wnLFxyXG4gICAgJ1xcdTAxMzknOiAnTCcsXHJcbiAgICAnXFx1MDEzRCc6ICdMJyxcclxuICAgICdcXHUxRTM2JzogJ0wnLFxyXG4gICAgJ1xcdTFFMzgnOiAnTCcsXHJcbiAgICAnXFx1MDEzQic6ICdMJyxcclxuICAgICdcXHUxRTNDJzogJ0wnLFxyXG4gICAgJ1xcdTFFM0EnOiAnTCcsXHJcbiAgICAnXFx1MDE0MSc6ICdMJyxcclxuICAgICdcXHUwMjNEJzogJ0wnLFxyXG4gICAgJ1xcdTJDNjInOiAnTCcsXHJcbiAgICAnXFx1MkM2MCc6ICdMJyxcclxuICAgICdcXHVBNzQ4JzogJ0wnLFxyXG4gICAgJ1xcdUE3NDYnOiAnTCcsXHJcbiAgICAnXFx1QTc4MCc6ICdMJyxcclxuICAgICdcXHUwMUM3JzogJ0xKJyxcclxuICAgICdcXHUwMUM4JzogJ0xqJyxcclxuICAgICdcXHUyNEMyJzogJ00nLFxyXG4gICAgJ1xcdUZGMkQnOiAnTScsXHJcbiAgICAnXFx1MUUzRSc6ICdNJyxcclxuICAgICdcXHUxRTQwJzogJ00nLFxyXG4gICAgJ1xcdTFFNDInOiAnTScsXHJcbiAgICAnXFx1MkM2RSc6ICdNJyxcclxuICAgICdcXHUwMTlDJzogJ00nLFxyXG4gICAgJ1xcdTI0QzMnOiAnTicsXHJcbiAgICAnXFx1RkYyRSc6ICdOJyxcclxuICAgICdcXHUwMUY4JzogJ04nLFxyXG4gICAgJ1xcdTAxNDMnOiAnTicsXHJcbiAgICAnXFx1MDBEMSc6ICdOJyxcclxuICAgICdcXHUxRTQ0JzogJ04nLFxyXG4gICAgJ1xcdTAxNDcnOiAnTicsXHJcbiAgICAnXFx1MUU0Nic6ICdOJyxcclxuICAgICdcXHUwMTQ1JzogJ04nLFxyXG4gICAgJ1xcdTFFNEEnOiAnTicsXHJcbiAgICAnXFx1MUU0OCc6ICdOJyxcclxuICAgICdcXHUwMjIwJzogJ04nLFxyXG4gICAgJ1xcdTAxOUQnOiAnTicsXHJcbiAgICAnXFx1QTc5MCc6ICdOJyxcclxuICAgICdcXHVBN0E0JzogJ04nLFxyXG4gICAgJ1xcdTAxQ0EnOiAnTkonLFxyXG4gICAgJ1xcdTAxQ0InOiAnTmonLFxyXG4gICAgJ1xcdTI0QzQnOiAnTycsXHJcbiAgICAnXFx1RkYyRic6ICdPJyxcclxuICAgICdcXHUwMEQyJzogJ08nLFxyXG4gICAgJ1xcdTAwRDMnOiAnTycsXHJcbiAgICAnXFx1MDBENCc6ICdPJyxcclxuICAgICdcXHUxRUQyJzogJ08nLFxyXG4gICAgJ1xcdTFFRDAnOiAnTycsXHJcbiAgICAnXFx1MUVENic6ICdPJyxcclxuICAgICdcXHUxRUQ0JzogJ08nLFxyXG4gICAgJ1xcdTAwRDUnOiAnTycsXHJcbiAgICAnXFx1MUU0Qyc6ICdPJyxcclxuICAgICdcXHUwMjJDJzogJ08nLFxyXG4gICAgJ1xcdTFFNEUnOiAnTycsXHJcbiAgICAnXFx1MDE0Qyc6ICdPJyxcclxuICAgICdcXHUxRTUwJzogJ08nLFxyXG4gICAgJ1xcdTFFNTInOiAnTycsXHJcbiAgICAnXFx1MDE0RSc6ICdPJyxcclxuICAgICdcXHUwMjJFJzogJ08nLFxyXG4gICAgJ1xcdTAyMzAnOiAnTycsXHJcbiAgICAnXFx1MDBENic6ICdPJyxcclxuICAgICdcXHUwMjJBJzogJ08nLFxyXG4gICAgJ1xcdTFFQ0UnOiAnTycsXHJcbiAgICAnXFx1MDE1MCc6ICdPJyxcclxuICAgICdcXHUwMUQxJzogJ08nLFxyXG4gICAgJ1xcdTAyMEMnOiAnTycsXHJcbiAgICAnXFx1MDIwRSc6ICdPJyxcclxuICAgICdcXHUwMUEwJzogJ08nLFxyXG4gICAgJ1xcdTFFREMnOiAnTycsXHJcbiAgICAnXFx1MUVEQSc6ICdPJyxcclxuICAgICdcXHUxRUUwJzogJ08nLFxyXG4gICAgJ1xcdTFFREUnOiAnTycsXHJcbiAgICAnXFx1MUVFMic6ICdPJyxcclxuICAgICdcXHUxRUNDJzogJ08nLFxyXG4gICAgJ1xcdTFFRDgnOiAnTycsXHJcbiAgICAnXFx1MDFFQSc6ICdPJyxcclxuICAgICdcXHUwMUVDJzogJ08nLFxyXG4gICAgJ1xcdTAwRDgnOiAnTycsXHJcbiAgICAnXFx1MDFGRSc6ICdPJyxcclxuICAgICdcXHUwMTg2JzogJ08nLFxyXG4gICAgJ1xcdTAxOUYnOiAnTycsXHJcbiAgICAnXFx1QTc0QSc6ICdPJyxcclxuICAgICdcXHVBNzRDJzogJ08nLFxyXG4gICAgJ1xcdTAxNTInOiAnT0UnLFxyXG4gICAgJ1xcdTAxQTInOiAnT0knLFxyXG4gICAgJ1xcdUE3NEUnOiAnT08nLFxyXG4gICAgJ1xcdTAyMjInOiAnT1UnLFxyXG4gICAgJ1xcdTI0QzUnOiAnUCcsXHJcbiAgICAnXFx1RkYzMCc6ICdQJyxcclxuICAgICdcXHUxRTU0JzogJ1AnLFxyXG4gICAgJ1xcdTFFNTYnOiAnUCcsXHJcbiAgICAnXFx1MDFBNCc6ICdQJyxcclxuICAgICdcXHUyQzYzJzogJ1AnLFxyXG4gICAgJ1xcdUE3NTAnOiAnUCcsXHJcbiAgICAnXFx1QTc1Mic6ICdQJyxcclxuICAgICdcXHVBNzU0JzogJ1AnLFxyXG4gICAgJ1xcdTI0QzYnOiAnUScsXHJcbiAgICAnXFx1RkYzMSc6ICdRJyxcclxuICAgICdcXHVBNzU2JzogJ1EnLFxyXG4gICAgJ1xcdUE3NTgnOiAnUScsXHJcbiAgICAnXFx1MDI0QSc6ICdRJyxcclxuICAgICdcXHUyNEM3JzogJ1InLFxyXG4gICAgJ1xcdUZGMzInOiAnUicsXHJcbiAgICAnXFx1MDE1NCc6ICdSJyxcclxuICAgICdcXHUxRTU4JzogJ1InLFxyXG4gICAgJ1xcdTAxNTgnOiAnUicsXHJcbiAgICAnXFx1MDIxMCc6ICdSJyxcclxuICAgICdcXHUwMjEyJzogJ1InLFxyXG4gICAgJ1xcdTFFNUEnOiAnUicsXHJcbiAgICAnXFx1MUU1Qyc6ICdSJyxcclxuICAgICdcXHUwMTU2JzogJ1InLFxyXG4gICAgJ1xcdTFFNUUnOiAnUicsXHJcbiAgICAnXFx1MDI0Qyc6ICdSJyxcclxuICAgICdcXHUyQzY0JzogJ1InLFxyXG4gICAgJ1xcdUE3NUEnOiAnUicsXHJcbiAgICAnXFx1QTdBNic6ICdSJyxcclxuICAgICdcXHVBNzgyJzogJ1InLFxyXG4gICAgJ1xcdTI0QzgnOiAnUycsXHJcbiAgICAnXFx1RkYzMyc6ICdTJyxcclxuICAgICdcXHUxRTlFJzogJ1MnLFxyXG4gICAgJ1xcdTAxNUEnOiAnUycsXHJcbiAgICAnXFx1MUU2NCc6ICdTJyxcclxuICAgICdcXHUwMTVDJzogJ1MnLFxyXG4gICAgJ1xcdTFFNjAnOiAnUycsXHJcbiAgICAnXFx1MDE2MCc6ICdTJyxcclxuICAgICdcXHUxRTY2JzogJ1MnLFxyXG4gICAgJ1xcdTFFNjInOiAnUycsXHJcbiAgICAnXFx1MUU2OCc6ICdTJyxcclxuICAgICdcXHUwMjE4JzogJ1MnLFxyXG4gICAgJ1xcdTAxNUUnOiAnUycsXHJcbiAgICAnXFx1MkM3RSc6ICdTJyxcclxuICAgICdcXHVBN0E4JzogJ1MnLFxyXG4gICAgJ1xcdUE3ODQnOiAnUycsXHJcbiAgICAnXFx1MjRDOSc6ICdUJyxcclxuICAgICdcXHVGRjM0JzogJ1QnLFxyXG4gICAgJ1xcdTFFNkEnOiAnVCcsXHJcbiAgICAnXFx1MDE2NCc6ICdUJyxcclxuICAgICdcXHUxRTZDJzogJ1QnLFxyXG4gICAgJ1xcdTAyMUEnOiAnVCcsXHJcbiAgICAnXFx1MDE2Mic6ICdUJyxcclxuICAgICdcXHUxRTcwJzogJ1QnLFxyXG4gICAgJ1xcdTFFNkUnOiAnVCcsXHJcbiAgICAnXFx1MDE2Nic6ICdUJyxcclxuICAgICdcXHUwMUFDJzogJ1QnLFxyXG4gICAgJ1xcdTAxQUUnOiAnVCcsXHJcbiAgICAnXFx1MDIzRSc6ICdUJyxcclxuICAgICdcXHVBNzg2JzogJ1QnLFxyXG4gICAgJ1xcdUE3MjgnOiAnVFonLFxyXG4gICAgJ1xcdTI0Q0EnOiAnVScsXHJcbiAgICAnXFx1RkYzNSc6ICdVJyxcclxuICAgICdcXHUwMEQ5JzogJ1UnLFxyXG4gICAgJ1xcdTAwREEnOiAnVScsXHJcbiAgICAnXFx1MDBEQic6ICdVJyxcclxuICAgICdcXHUwMTY4JzogJ1UnLFxyXG4gICAgJ1xcdTFFNzgnOiAnVScsXHJcbiAgICAnXFx1MDE2QSc6ICdVJyxcclxuICAgICdcXHUxRTdBJzogJ1UnLFxyXG4gICAgJ1xcdTAxNkMnOiAnVScsXHJcbiAgICAnXFx1MDBEQyc6ICdVJyxcclxuICAgICdcXHUwMURCJzogJ1UnLFxyXG4gICAgJ1xcdTAxRDcnOiAnVScsXHJcbiAgICAnXFx1MDFENSc6ICdVJyxcclxuICAgICdcXHUwMUQ5JzogJ1UnLFxyXG4gICAgJ1xcdTFFRTYnOiAnVScsXHJcbiAgICAnXFx1MDE2RSc6ICdVJyxcclxuICAgICdcXHUwMTcwJzogJ1UnLFxyXG4gICAgJ1xcdTAxRDMnOiAnVScsXHJcbiAgICAnXFx1MDIxNCc6ICdVJyxcclxuICAgICdcXHUwMjE2JzogJ1UnLFxyXG4gICAgJ1xcdTAxQUYnOiAnVScsXHJcbiAgICAnXFx1MUVFQSc6ICdVJyxcclxuICAgICdcXHUxRUU4JzogJ1UnLFxyXG4gICAgJ1xcdTFFRUUnOiAnVScsXHJcbiAgICAnXFx1MUVFQyc6ICdVJyxcclxuICAgICdcXHUxRUYwJzogJ1UnLFxyXG4gICAgJ1xcdTFFRTQnOiAnVScsXHJcbiAgICAnXFx1MUU3Mic6ICdVJyxcclxuICAgICdcXHUwMTcyJzogJ1UnLFxyXG4gICAgJ1xcdTFFNzYnOiAnVScsXHJcbiAgICAnXFx1MUU3NCc6ICdVJyxcclxuICAgICdcXHUwMjQ0JzogJ1UnLFxyXG4gICAgJ1xcdTI0Q0InOiAnVicsXHJcbiAgICAnXFx1RkYzNic6ICdWJyxcclxuICAgICdcXHUxRTdDJzogJ1YnLFxyXG4gICAgJ1xcdTFFN0UnOiAnVicsXHJcbiAgICAnXFx1MDFCMic6ICdWJyxcclxuICAgICdcXHVBNzVFJzogJ1YnLFxyXG4gICAgJ1xcdTAyNDUnOiAnVicsXHJcbiAgICAnXFx1QTc2MCc6ICdWWScsXHJcbiAgICAnXFx1MjRDQyc6ICdXJyxcclxuICAgICdcXHVGRjM3JzogJ1cnLFxyXG4gICAgJ1xcdTFFODAnOiAnVycsXHJcbiAgICAnXFx1MUU4Mic6ICdXJyxcclxuICAgICdcXHUwMTc0JzogJ1cnLFxyXG4gICAgJ1xcdTFFODYnOiAnVycsXHJcbiAgICAnXFx1MUU4NCc6ICdXJyxcclxuICAgICdcXHUxRTg4JzogJ1cnLFxyXG4gICAgJ1xcdTJDNzInOiAnVycsXHJcbiAgICAnXFx1MjRDRCc6ICdYJyxcclxuICAgICdcXHVGRjM4JzogJ1gnLFxyXG4gICAgJ1xcdTFFOEEnOiAnWCcsXHJcbiAgICAnXFx1MUU4Qyc6ICdYJyxcclxuICAgICdcXHUyNENFJzogJ1knLFxyXG4gICAgJ1xcdUZGMzknOiAnWScsXHJcbiAgICAnXFx1MUVGMic6ICdZJyxcclxuICAgICdcXHUwMEREJzogJ1knLFxyXG4gICAgJ1xcdTAxNzYnOiAnWScsXHJcbiAgICAnXFx1MUVGOCc6ICdZJyxcclxuICAgICdcXHUwMjMyJzogJ1knLFxyXG4gICAgJ1xcdTFFOEUnOiAnWScsXHJcbiAgICAnXFx1MDE3OCc6ICdZJyxcclxuICAgICdcXHUxRUY2JzogJ1knLFxyXG4gICAgJ1xcdTFFRjQnOiAnWScsXHJcbiAgICAnXFx1MDFCMyc6ICdZJyxcclxuICAgICdcXHUwMjRFJzogJ1knLFxyXG4gICAgJ1xcdTFFRkUnOiAnWScsXHJcbiAgICAnXFx1MjRDRic6ICdaJyxcclxuICAgICdcXHVGRjNBJzogJ1onLFxyXG4gICAgJ1xcdTAxNzknOiAnWicsXHJcbiAgICAnXFx1MUU5MCc6ICdaJyxcclxuICAgICdcXHUwMTdCJzogJ1onLFxyXG4gICAgJ1xcdTAxN0QnOiAnWicsXHJcbiAgICAnXFx1MUU5Mic6ICdaJyxcclxuICAgICdcXHUxRTk0JzogJ1onLFxyXG4gICAgJ1xcdTAxQjUnOiAnWicsXHJcbiAgICAnXFx1MDIyNCc6ICdaJyxcclxuICAgICdcXHUyQzdGJzogJ1onLFxyXG4gICAgJ1xcdTJDNkInOiAnWicsXHJcbiAgICAnXFx1QTc2Mic6ICdaJyxcclxuICAgICdcXHUyNEQwJzogJ2EnLFxyXG4gICAgJ1xcdUZGNDEnOiAnYScsXHJcbiAgICAnXFx1MUU5QSc6ICdhJyxcclxuICAgICdcXHUwMEUwJzogJ2EnLFxyXG4gICAgJ1xcdTAwRTEnOiAnYScsXHJcbiAgICAnXFx1MDBFMic6ICdhJyxcclxuICAgICdcXHUxRUE3JzogJ2EnLFxyXG4gICAgJ1xcdTFFQTUnOiAnYScsXHJcbiAgICAnXFx1MUVBQic6ICdhJyxcclxuICAgICdcXHUxRUE5JzogJ2EnLFxyXG4gICAgJ1xcdTAwRTMnOiAnYScsXHJcbiAgICAnXFx1MDEwMSc6ICdhJyxcclxuICAgICdcXHUwMTAzJzogJ2EnLFxyXG4gICAgJ1xcdTFFQjEnOiAnYScsXHJcbiAgICAnXFx1MUVBRic6ICdhJyxcclxuICAgICdcXHUxRUI1JzogJ2EnLFxyXG4gICAgJ1xcdTFFQjMnOiAnYScsXHJcbiAgICAnXFx1MDIyNyc6ICdhJyxcclxuICAgICdcXHUwMUUxJzogJ2EnLFxyXG4gICAgJ1xcdTAwRTQnOiAnYScsXHJcbiAgICAnXFx1MDFERic6ICdhJyxcclxuICAgICdcXHUxRUEzJzogJ2EnLFxyXG4gICAgJ1xcdTAwRTUnOiAnYScsXHJcbiAgICAnXFx1MDFGQic6ICdhJyxcclxuICAgICdcXHUwMUNFJzogJ2EnLFxyXG4gICAgJ1xcdTAyMDEnOiAnYScsXHJcbiAgICAnXFx1MDIwMyc6ICdhJyxcclxuICAgICdcXHUxRUExJzogJ2EnLFxyXG4gICAgJ1xcdTFFQUQnOiAnYScsXHJcbiAgICAnXFx1MUVCNyc6ICdhJyxcclxuICAgICdcXHUxRTAxJzogJ2EnLFxyXG4gICAgJ1xcdTAxMDUnOiAnYScsXHJcbiAgICAnXFx1MkM2NSc6ICdhJyxcclxuICAgICdcXHUwMjUwJzogJ2EnLFxyXG4gICAgJ1xcdUE3MzMnOiAnYWEnLFxyXG4gICAgJ1xcdTAwRTYnOiAnYWUnLFxyXG4gICAgJ1xcdTAxRkQnOiAnYWUnLFxyXG4gICAgJ1xcdTAxRTMnOiAnYWUnLFxyXG4gICAgJ1xcdUE3MzUnOiAnYW8nLFxyXG4gICAgJ1xcdUE3MzcnOiAnYXUnLFxyXG4gICAgJ1xcdUE3MzknOiAnYXYnLFxyXG4gICAgJ1xcdUE3M0InOiAnYXYnLFxyXG4gICAgJ1xcdUE3M0QnOiAnYXknLFxyXG4gICAgJ1xcdTI0RDEnOiAnYicsXHJcbiAgICAnXFx1RkY0Mic6ICdiJyxcclxuICAgICdcXHUxRTAzJzogJ2InLFxyXG4gICAgJ1xcdTFFMDUnOiAnYicsXHJcbiAgICAnXFx1MUUwNyc6ICdiJyxcclxuICAgICdcXHUwMTgwJzogJ2InLFxyXG4gICAgJ1xcdTAxODMnOiAnYicsXHJcbiAgICAnXFx1MDI1Myc6ICdiJyxcclxuICAgICdcXHUyNEQyJzogJ2MnLFxyXG4gICAgJ1xcdUZGNDMnOiAnYycsXHJcbiAgICAnXFx1MDEwNyc6ICdjJyxcclxuICAgICdcXHUwMTA5JzogJ2MnLFxyXG4gICAgJ1xcdTAxMEInOiAnYycsXHJcbiAgICAnXFx1MDEwRCc6ICdjJyxcclxuICAgICdcXHUwMEU3JzogJ2MnLFxyXG4gICAgJ1xcdTFFMDknOiAnYycsXHJcbiAgICAnXFx1MDE4OCc6ICdjJyxcclxuICAgICdcXHUwMjNDJzogJ2MnLFxyXG4gICAgJ1xcdUE3M0YnOiAnYycsXHJcbiAgICAnXFx1MjE4NCc6ICdjJyxcclxuICAgICdcXHUyNEQzJzogJ2QnLFxyXG4gICAgJ1xcdUZGNDQnOiAnZCcsXHJcbiAgICAnXFx1MUUwQic6ICdkJyxcclxuICAgICdcXHUwMTBGJzogJ2QnLFxyXG4gICAgJ1xcdTFFMEQnOiAnZCcsXHJcbiAgICAnXFx1MUUxMSc6ICdkJyxcclxuICAgICdcXHUxRTEzJzogJ2QnLFxyXG4gICAgJ1xcdTFFMEYnOiAnZCcsXHJcbiAgICAnXFx1MDExMSc6ICdkJyxcclxuICAgICdcXHUwMThDJzogJ2QnLFxyXG4gICAgJ1xcdTAyNTYnOiAnZCcsXHJcbiAgICAnXFx1MDI1Nyc6ICdkJyxcclxuICAgICdcXHVBNzdBJzogJ2QnLFxyXG4gICAgJ1xcdTAxRjMnOiAnZHonLFxyXG4gICAgJ1xcdTAxQzYnOiAnZHonLFxyXG4gICAgJ1xcdTI0RDQnOiAnZScsXHJcbiAgICAnXFx1RkY0NSc6ICdlJyxcclxuICAgICdcXHUwMEU4JzogJ2UnLFxyXG4gICAgJ1xcdTAwRTknOiAnZScsXHJcbiAgICAnXFx1MDBFQSc6ICdlJyxcclxuICAgICdcXHUxRUMxJzogJ2UnLFxyXG4gICAgJ1xcdTFFQkYnOiAnZScsXHJcbiAgICAnXFx1MUVDNSc6ICdlJyxcclxuICAgICdcXHUxRUMzJzogJ2UnLFxyXG4gICAgJ1xcdTFFQkQnOiAnZScsXHJcbiAgICAnXFx1MDExMyc6ICdlJyxcclxuICAgICdcXHUxRTE1JzogJ2UnLFxyXG4gICAgJ1xcdTFFMTcnOiAnZScsXHJcbiAgICAnXFx1MDExNSc6ICdlJyxcclxuICAgICdcXHUwMTE3JzogJ2UnLFxyXG4gICAgJ1xcdTAwRUInOiAnZScsXHJcbiAgICAnXFx1MUVCQic6ICdlJyxcclxuICAgICdcXHUwMTFCJzogJ2UnLFxyXG4gICAgJ1xcdTAyMDUnOiAnZScsXHJcbiAgICAnXFx1MDIwNyc6ICdlJyxcclxuICAgICdcXHUxRUI5JzogJ2UnLFxyXG4gICAgJ1xcdTFFQzcnOiAnZScsXHJcbiAgICAnXFx1MDIyOSc6ICdlJyxcclxuICAgICdcXHUxRTFEJzogJ2UnLFxyXG4gICAgJ1xcdTAxMTknOiAnZScsXHJcbiAgICAnXFx1MUUxOSc6ICdlJyxcclxuICAgICdcXHUxRTFCJzogJ2UnLFxyXG4gICAgJ1xcdTAyNDcnOiAnZScsXHJcbiAgICAnXFx1MDI1Qic6ICdlJyxcclxuICAgICdcXHUwMUREJzogJ2UnLFxyXG4gICAgJ1xcdTI0RDUnOiAnZicsXHJcbiAgICAnXFx1RkY0Nic6ICdmJyxcclxuICAgICdcXHUxRTFGJzogJ2YnLFxyXG4gICAgJ1xcdTAxOTInOiAnZicsXHJcbiAgICAnXFx1QTc3Qyc6ICdmJyxcclxuICAgICdcXHUyNEQ2JzogJ2cnLFxyXG4gICAgJ1xcdUZGNDcnOiAnZycsXHJcbiAgICAnXFx1MDFGNSc6ICdnJyxcclxuICAgICdcXHUwMTFEJzogJ2cnLFxyXG4gICAgJ1xcdTFFMjEnOiAnZycsXHJcbiAgICAnXFx1MDExRic6ICdnJyxcclxuICAgICdcXHUwMTIxJzogJ2cnLFxyXG4gICAgJ1xcdTAxRTcnOiAnZycsXHJcbiAgICAnXFx1MDEyMyc6ICdnJyxcclxuICAgICdcXHUwMUU1JzogJ2cnLFxyXG4gICAgJ1xcdTAyNjAnOiAnZycsXHJcbiAgICAnXFx1QTdBMSc6ICdnJyxcclxuICAgICdcXHUxRDc5JzogJ2cnLFxyXG4gICAgJ1xcdUE3N0YnOiAnZycsXHJcbiAgICAnXFx1MjRENyc6ICdoJyxcclxuICAgICdcXHVGRjQ4JzogJ2gnLFxyXG4gICAgJ1xcdTAxMjUnOiAnaCcsXHJcbiAgICAnXFx1MUUyMyc6ICdoJyxcclxuICAgICdcXHUxRTI3JzogJ2gnLFxyXG4gICAgJ1xcdTAyMUYnOiAnaCcsXHJcbiAgICAnXFx1MUUyNSc6ICdoJyxcclxuICAgICdcXHUxRTI5JzogJ2gnLFxyXG4gICAgJ1xcdTFFMkInOiAnaCcsXHJcbiAgICAnXFx1MUU5Nic6ICdoJyxcclxuICAgICdcXHUwMTI3JzogJ2gnLFxyXG4gICAgJ1xcdTJDNjgnOiAnaCcsXHJcbiAgICAnXFx1MkM3Nic6ICdoJyxcclxuICAgICdcXHUwMjY1JzogJ2gnLFxyXG4gICAgJ1xcdTAxOTUnOiAnaHYnLFxyXG4gICAgJ1xcdTI0RDgnOiAnaScsXHJcbiAgICAnXFx1RkY0OSc6ICdpJyxcclxuICAgICdcXHUwMEVDJzogJ2knLFxyXG4gICAgJ1xcdTAwRUQnOiAnaScsXHJcbiAgICAnXFx1MDBFRSc6ICdpJyxcclxuICAgICdcXHUwMTI5JzogJ2knLFxyXG4gICAgJ1xcdTAxMkInOiAnaScsXHJcbiAgICAnXFx1MDEyRCc6ICdpJyxcclxuICAgICdcXHUwMEVGJzogJ2knLFxyXG4gICAgJ1xcdTFFMkYnOiAnaScsXHJcbiAgICAnXFx1MUVDOSc6ICdpJyxcclxuICAgICdcXHUwMUQwJzogJ2knLFxyXG4gICAgJ1xcdTAyMDknOiAnaScsXHJcbiAgICAnXFx1MDIwQic6ICdpJyxcclxuICAgICdcXHUxRUNCJzogJ2knLFxyXG4gICAgJ1xcdTAxMkYnOiAnaScsXHJcbiAgICAnXFx1MUUyRCc6ICdpJyxcclxuICAgICdcXHUwMjY4JzogJ2knLFxyXG4gICAgJ1xcdTAxMzEnOiAnaScsXHJcbiAgICAnXFx1MjREOSc6ICdqJyxcclxuICAgICdcXHVGRjRBJzogJ2onLFxyXG4gICAgJ1xcdTAxMzUnOiAnaicsXHJcbiAgICAnXFx1MDFGMCc6ICdqJyxcclxuICAgICdcXHUwMjQ5JzogJ2onLFxyXG4gICAgJ1xcdTI0REEnOiAnaycsXHJcbiAgICAnXFx1RkY0Qic6ICdrJyxcclxuICAgICdcXHUxRTMxJzogJ2snLFxyXG4gICAgJ1xcdTAxRTknOiAnaycsXHJcbiAgICAnXFx1MUUzMyc6ICdrJyxcclxuICAgICdcXHUwMTM3JzogJ2snLFxyXG4gICAgJ1xcdTFFMzUnOiAnaycsXHJcbiAgICAnXFx1MDE5OSc6ICdrJyxcclxuICAgICdcXHUyQzZBJzogJ2snLFxyXG4gICAgJ1xcdUE3NDEnOiAnaycsXHJcbiAgICAnXFx1QTc0Myc6ICdrJyxcclxuICAgICdcXHVBNzQ1JzogJ2snLFxyXG4gICAgJ1xcdUE3QTMnOiAnaycsXHJcbiAgICAnXFx1MjREQic6ICdsJyxcclxuICAgICdcXHVGRjRDJzogJ2wnLFxyXG4gICAgJ1xcdTAxNDAnOiAnbCcsXHJcbiAgICAnXFx1MDEzQSc6ICdsJyxcclxuICAgICdcXHUwMTNFJzogJ2wnLFxyXG4gICAgJ1xcdTFFMzcnOiAnbCcsXHJcbiAgICAnXFx1MUUzOSc6ICdsJyxcclxuICAgICdcXHUwMTNDJzogJ2wnLFxyXG4gICAgJ1xcdTFFM0QnOiAnbCcsXHJcbiAgICAnXFx1MUUzQic6ICdsJyxcclxuICAgICdcXHUwMTdGJzogJ2wnLFxyXG4gICAgJ1xcdTAxNDInOiAnbCcsXHJcbiAgICAnXFx1MDE5QSc6ICdsJyxcclxuICAgICdcXHUwMjZCJzogJ2wnLFxyXG4gICAgJ1xcdTJDNjEnOiAnbCcsXHJcbiAgICAnXFx1QTc0OSc6ICdsJyxcclxuICAgICdcXHVBNzgxJzogJ2wnLFxyXG4gICAgJ1xcdUE3NDcnOiAnbCcsXHJcbiAgICAnXFx1MDFDOSc6ICdsaicsXHJcbiAgICAnXFx1MjREQyc6ICdtJyxcclxuICAgICdcXHVGRjREJzogJ20nLFxyXG4gICAgJ1xcdTFFM0YnOiAnbScsXHJcbiAgICAnXFx1MUU0MSc6ICdtJyxcclxuICAgICdcXHUxRTQzJzogJ20nLFxyXG4gICAgJ1xcdTAyNzEnOiAnbScsXHJcbiAgICAnXFx1MDI2Ric6ICdtJyxcclxuICAgICdcXHUyNEREJzogJ24nLFxyXG4gICAgJ1xcdUZGNEUnOiAnbicsXHJcbiAgICAnXFx1MDFGOSc6ICduJyxcclxuICAgICdcXHUwMTQ0JzogJ24nLFxyXG4gICAgJ1xcdTAwRjEnOiAnbicsXHJcbiAgICAnXFx1MUU0NSc6ICduJyxcclxuICAgICdcXHUwMTQ4JzogJ24nLFxyXG4gICAgJ1xcdTFFNDcnOiAnbicsXHJcbiAgICAnXFx1MDE0Nic6ICduJyxcclxuICAgICdcXHUxRTRCJzogJ24nLFxyXG4gICAgJ1xcdTFFNDknOiAnbicsXHJcbiAgICAnXFx1MDE5RSc6ICduJyxcclxuICAgICdcXHUwMjcyJzogJ24nLFxyXG4gICAgJ1xcdTAxNDknOiAnbicsXHJcbiAgICAnXFx1QTc5MSc6ICduJyxcclxuICAgICdcXHVBN0E1JzogJ24nLFxyXG4gICAgJ1xcdTAxQ0MnOiAnbmonLFxyXG4gICAgJ1xcdTI0REUnOiAnbycsXHJcbiAgICAnXFx1RkY0Ric6ICdvJyxcclxuICAgICdcXHUwMEYyJzogJ28nLFxyXG4gICAgJ1xcdTAwRjMnOiAnbycsXHJcbiAgICAnXFx1MDBGNCc6ICdvJyxcclxuICAgICdcXHUxRUQzJzogJ28nLFxyXG4gICAgJ1xcdTFFRDEnOiAnbycsXHJcbiAgICAnXFx1MUVENyc6ICdvJyxcclxuICAgICdcXHUxRUQ1JzogJ28nLFxyXG4gICAgJ1xcdTAwRjUnOiAnbycsXHJcbiAgICAnXFx1MUU0RCc6ICdvJyxcclxuICAgICdcXHUwMjJEJzogJ28nLFxyXG4gICAgJ1xcdTFFNEYnOiAnbycsXHJcbiAgICAnXFx1MDE0RCc6ICdvJyxcclxuICAgICdcXHUxRTUxJzogJ28nLFxyXG4gICAgJ1xcdTFFNTMnOiAnbycsXHJcbiAgICAnXFx1MDE0Ric6ICdvJyxcclxuICAgICdcXHUwMjJGJzogJ28nLFxyXG4gICAgJ1xcdTAyMzEnOiAnbycsXHJcbiAgICAnXFx1MDBGNic6ICdvJyxcclxuICAgICdcXHUwMjJCJzogJ28nLFxyXG4gICAgJ1xcdTFFQ0YnOiAnbycsXHJcbiAgICAnXFx1MDE1MSc6ICdvJyxcclxuICAgICdcXHUwMUQyJzogJ28nLFxyXG4gICAgJ1xcdTAyMEQnOiAnbycsXHJcbiAgICAnXFx1MDIwRic6ICdvJyxcclxuICAgICdcXHUwMUExJzogJ28nLFxyXG4gICAgJ1xcdTFFREQnOiAnbycsXHJcbiAgICAnXFx1MUVEQic6ICdvJyxcclxuICAgICdcXHUxRUUxJzogJ28nLFxyXG4gICAgJ1xcdTFFREYnOiAnbycsXHJcbiAgICAnXFx1MUVFMyc6ICdvJyxcclxuICAgICdcXHUxRUNEJzogJ28nLFxyXG4gICAgJ1xcdTFFRDknOiAnbycsXHJcbiAgICAnXFx1MDFFQic6ICdvJyxcclxuICAgICdcXHUwMUVEJzogJ28nLFxyXG4gICAgJ1xcdTAwRjgnOiAnbycsXHJcbiAgICAnXFx1MDFGRic6ICdvJyxcclxuICAgICdcXHUwMjU0JzogJ28nLFxyXG4gICAgJ1xcdUE3NEInOiAnbycsXHJcbiAgICAnXFx1QTc0RCc6ICdvJyxcclxuICAgICdcXHUwMjc1JzogJ28nLFxyXG4gICAgJ1xcdTAxNTMnOiAnb2UnLFxyXG4gICAgJ1xcdTAxQTMnOiAnb2knLFxyXG4gICAgJ1xcdTAyMjMnOiAnb3UnLFxyXG4gICAgJ1xcdUE3NEYnOiAnb28nLFxyXG4gICAgJ1xcdTI0REYnOiAncCcsXHJcbiAgICAnXFx1RkY1MCc6ICdwJyxcclxuICAgICdcXHUxRTU1JzogJ3AnLFxyXG4gICAgJ1xcdTFFNTcnOiAncCcsXHJcbiAgICAnXFx1MDFBNSc6ICdwJyxcclxuICAgICdcXHUxRDdEJzogJ3AnLFxyXG4gICAgJ1xcdUE3NTEnOiAncCcsXHJcbiAgICAnXFx1QTc1Myc6ICdwJyxcclxuICAgICdcXHVBNzU1JzogJ3AnLFxyXG4gICAgJ1xcdTI0RTAnOiAncScsXHJcbiAgICAnXFx1RkY1MSc6ICdxJyxcclxuICAgICdcXHUwMjRCJzogJ3EnLFxyXG4gICAgJ1xcdUE3NTcnOiAncScsXHJcbiAgICAnXFx1QTc1OSc6ICdxJyxcclxuICAgICdcXHUyNEUxJzogJ3InLFxyXG4gICAgJ1xcdUZGNTInOiAncicsXHJcbiAgICAnXFx1MDE1NSc6ICdyJyxcclxuICAgICdcXHUxRTU5JzogJ3InLFxyXG4gICAgJ1xcdTAxNTknOiAncicsXHJcbiAgICAnXFx1MDIxMSc6ICdyJyxcclxuICAgICdcXHUwMjEzJzogJ3InLFxyXG4gICAgJ1xcdTFFNUInOiAncicsXHJcbiAgICAnXFx1MUU1RCc6ICdyJyxcclxuICAgICdcXHUwMTU3JzogJ3InLFxyXG4gICAgJ1xcdTFFNUYnOiAncicsXHJcbiAgICAnXFx1MDI0RCc6ICdyJyxcclxuICAgICdcXHUwMjdEJzogJ3InLFxyXG4gICAgJ1xcdUE3NUInOiAncicsXHJcbiAgICAnXFx1QTdBNyc6ICdyJyxcclxuICAgICdcXHVBNzgzJzogJ3InLFxyXG4gICAgJ1xcdTI0RTInOiAncycsXHJcbiAgICAnXFx1RkY1Myc6ICdzJyxcclxuICAgICdcXHUwMERGJzogJ3MnLFxyXG4gICAgJ1xcdTAxNUInOiAncycsXHJcbiAgICAnXFx1MUU2NSc6ICdzJyxcclxuICAgICdcXHUwMTVEJzogJ3MnLFxyXG4gICAgJ1xcdTFFNjEnOiAncycsXHJcbiAgICAnXFx1MDE2MSc6ICdzJyxcclxuICAgICdcXHUxRTY3JzogJ3MnLFxyXG4gICAgJ1xcdTFFNjMnOiAncycsXHJcbiAgICAnXFx1MUU2OSc6ICdzJyxcclxuICAgICdcXHUwMjE5JzogJ3MnLFxyXG4gICAgJ1xcdTAxNUYnOiAncycsXHJcbiAgICAnXFx1MDIzRic6ICdzJyxcclxuICAgICdcXHVBN0E5JzogJ3MnLFxyXG4gICAgJ1xcdUE3ODUnOiAncycsXHJcbiAgICAnXFx1MUU5Qic6ICdzJyxcclxuICAgICdcXHUyNEUzJzogJ3QnLFxyXG4gICAgJ1xcdUZGNTQnOiAndCcsXHJcbiAgICAnXFx1MUU2Qic6ICd0JyxcclxuICAgICdcXHUxRTk3JzogJ3QnLFxyXG4gICAgJ1xcdTAxNjUnOiAndCcsXHJcbiAgICAnXFx1MUU2RCc6ICd0JyxcclxuICAgICdcXHUwMjFCJzogJ3QnLFxyXG4gICAgJ1xcdTAxNjMnOiAndCcsXHJcbiAgICAnXFx1MUU3MSc6ICd0JyxcclxuICAgICdcXHUxRTZGJzogJ3QnLFxyXG4gICAgJ1xcdTAxNjcnOiAndCcsXHJcbiAgICAnXFx1MDFBRCc6ICd0JyxcclxuICAgICdcXHUwMjg4JzogJ3QnLFxyXG4gICAgJ1xcdTJDNjYnOiAndCcsXHJcbiAgICAnXFx1QTc4Nyc6ICd0JyxcclxuICAgICdcXHVBNzI5JzogJ3R6JyxcclxuICAgICdcXHUyNEU0JzogJ3UnLFxyXG4gICAgJ1xcdUZGNTUnOiAndScsXHJcbiAgICAnXFx1MDBGOSc6ICd1JyxcclxuICAgICdcXHUwMEZBJzogJ3UnLFxyXG4gICAgJ1xcdTAwRkInOiAndScsXHJcbiAgICAnXFx1MDE2OSc6ICd1JyxcclxuICAgICdcXHUxRTc5JzogJ3UnLFxyXG4gICAgJ1xcdTAxNkInOiAndScsXHJcbiAgICAnXFx1MUU3Qic6ICd1JyxcclxuICAgICdcXHUwMTZEJzogJ3UnLFxyXG4gICAgJ1xcdTAwRkMnOiAndScsXHJcbiAgICAnXFx1MDFEQyc6ICd1JyxcclxuICAgICdcXHUwMUQ4JzogJ3UnLFxyXG4gICAgJ1xcdTAxRDYnOiAndScsXHJcbiAgICAnXFx1MDFEQSc6ICd1JyxcclxuICAgICdcXHUxRUU3JzogJ3UnLFxyXG4gICAgJ1xcdTAxNkYnOiAndScsXHJcbiAgICAnXFx1MDE3MSc6ICd1JyxcclxuICAgICdcXHUwMUQ0JzogJ3UnLFxyXG4gICAgJ1xcdTAyMTUnOiAndScsXHJcbiAgICAnXFx1MDIxNyc6ICd1JyxcclxuICAgICdcXHUwMUIwJzogJ3UnLFxyXG4gICAgJ1xcdTFFRUInOiAndScsXHJcbiAgICAnXFx1MUVFOSc6ICd1JyxcclxuICAgICdcXHUxRUVGJzogJ3UnLFxyXG4gICAgJ1xcdTFFRUQnOiAndScsXHJcbiAgICAnXFx1MUVGMSc6ICd1JyxcclxuICAgICdcXHUxRUU1JzogJ3UnLFxyXG4gICAgJ1xcdTFFNzMnOiAndScsXHJcbiAgICAnXFx1MDE3Myc6ICd1JyxcclxuICAgICdcXHUxRTc3JzogJ3UnLFxyXG4gICAgJ1xcdTFFNzUnOiAndScsXHJcbiAgICAnXFx1MDI4OSc6ICd1JyxcclxuICAgICdcXHUyNEU1JzogJ3YnLFxyXG4gICAgJ1xcdUZGNTYnOiAndicsXHJcbiAgICAnXFx1MUU3RCc6ICd2JyxcclxuICAgICdcXHUxRTdGJzogJ3YnLFxyXG4gICAgJ1xcdTAyOEInOiAndicsXHJcbiAgICAnXFx1QTc1Ric6ICd2JyxcclxuICAgICdcXHUwMjhDJzogJ3YnLFxyXG4gICAgJ1xcdUE3NjEnOiAndnknLFxyXG4gICAgJ1xcdTI0RTYnOiAndycsXHJcbiAgICAnXFx1RkY1Nyc6ICd3JyxcclxuICAgICdcXHUxRTgxJzogJ3cnLFxyXG4gICAgJ1xcdTFFODMnOiAndycsXHJcbiAgICAnXFx1MDE3NSc6ICd3JyxcclxuICAgICdcXHUxRTg3JzogJ3cnLFxyXG4gICAgJ1xcdTFFODUnOiAndycsXHJcbiAgICAnXFx1MUU5OCc6ICd3JyxcclxuICAgICdcXHUxRTg5JzogJ3cnLFxyXG4gICAgJ1xcdTJDNzMnOiAndycsXHJcbiAgICAnXFx1MjRFNyc6ICd4JyxcclxuICAgICdcXHVGRjU4JzogJ3gnLFxyXG4gICAgJ1xcdTFFOEInOiAneCcsXHJcbiAgICAnXFx1MUU4RCc6ICd4JyxcclxuICAgICdcXHUyNEU4JzogJ3knLFxyXG4gICAgJ1xcdUZGNTknOiAneScsXHJcbiAgICAnXFx1MUVGMyc6ICd5JyxcclxuICAgICdcXHUwMEZEJzogJ3knLFxyXG4gICAgJ1xcdTAxNzcnOiAneScsXHJcbiAgICAnXFx1MUVGOSc6ICd5JyxcclxuICAgICdcXHUwMjMzJzogJ3knLFxyXG4gICAgJ1xcdTFFOEYnOiAneScsXHJcbiAgICAnXFx1MDBGRic6ICd5JyxcclxuICAgICdcXHUxRUY3JzogJ3knLFxyXG4gICAgJ1xcdTFFOTknOiAneScsXHJcbiAgICAnXFx1MUVGNSc6ICd5JyxcclxuICAgICdcXHUwMUI0JzogJ3knLFxyXG4gICAgJ1xcdTAyNEYnOiAneScsXHJcbiAgICAnXFx1MUVGRic6ICd5JyxcclxuICAgICdcXHUyNEU5JzogJ3onLFxyXG4gICAgJ1xcdUZGNUEnOiAneicsXHJcbiAgICAnXFx1MDE3QSc6ICd6JyxcclxuICAgICdcXHUxRTkxJzogJ3onLFxyXG4gICAgJ1xcdTAxN0MnOiAneicsXHJcbiAgICAnXFx1MDE3RSc6ICd6JyxcclxuICAgICdcXHUxRTkzJzogJ3onLFxyXG4gICAgJ1xcdTFFOTUnOiAneicsXHJcbiAgICAnXFx1MDFCNic6ICd6JyxcclxuICAgICdcXHUwMjI1JzogJ3onLFxyXG4gICAgJ1xcdTAyNDAnOiAneicsXHJcbiAgICAnXFx1MkM2Qyc6ICd6JyxcclxuICAgICdcXHVBNzYzJzogJ3onLFxyXG4gICAgJ1xcdTAzODYnOiAnXFx1MDM5MScsXHJcbiAgICAnXFx1MDM4OCc6ICdcXHUwMzk1JyxcclxuICAgICdcXHUwMzg5JzogJ1xcdTAzOTcnLFxyXG4gICAgJ1xcdTAzOEEnOiAnXFx1MDM5OScsXHJcbiAgICAnXFx1MDNBQSc6ICdcXHUwMzk5JyxcclxuICAgICdcXHUwMzhDJzogJ1xcdTAzOUYnLFxyXG4gICAgJ1xcdTAzOEUnOiAnXFx1MDNBNScsXHJcbiAgICAnXFx1MDNBQic6ICdcXHUwM0E1JyxcclxuICAgICdcXHUwMzhGJzogJ1xcdTAzQTknLFxyXG4gICAgJ1xcdTAzQUMnOiAnXFx1MDNCMScsXHJcbiAgICAnXFx1MDNBRCc6ICdcXHUwM0I1JyxcclxuICAgICdcXHUwM0FFJzogJ1xcdTAzQjcnLFxyXG4gICAgJ1xcdTAzQUYnOiAnXFx1MDNCOScsXHJcbiAgICAnXFx1MDNDQSc6ICdcXHUwM0I5JyxcclxuICAgICdcXHUwMzkwJzogJ1xcdTAzQjknLFxyXG4gICAgJ1xcdTAzQ0MnOiAnXFx1MDNCRicsXHJcbiAgICAnXFx1MDNDRCc6ICdcXHUwM0M1JyxcclxuICAgICdcXHUwM0NCJzogJ1xcdTAzQzUnLFxyXG4gICAgJ1xcdTAzQjAnOiAnXFx1MDNDNScsXHJcbiAgICAnXFx1MDNDRSc6ICdcXHUwM0M5JyxcclxuICAgICdcXHUwM0MyJzogJ1xcdTAzQzMnLFxyXG4gICAgJ1xcdTIwMTknOiAnXFwnJ1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBkaWFjcml0aWNzO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL2Jhc2UnLFtcclxuICAnLi4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uIChVdGlscykge1xyXG4gIGZ1bmN0aW9uIEJhc2VBZGFwdGVyICgkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgQmFzZUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoQmFzZUFkYXB0ZXIsIFV0aWxzLk9ic2VydmFibGUpO1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGN1cnJlbnRgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcclxuICB9O1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHF1ZXJ5YCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XHJcbiAgfTtcclxuXHJcbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICAvLyBDYW4gYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlc1xyXG4gIH07XHJcblxyXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcclxuICB9O1xyXG5cclxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZ2VuZXJhdGVSZXN1bHRJZCA9IGZ1bmN0aW9uIChjb250YWluZXIsIGRhdGEpIHtcclxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0LSc7XHJcblxyXG4gICAgaWQgKz0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcclxuXHJcbiAgICBpZiAoZGF0YS5pZCAhPSBudWxsKSB7XHJcbiAgICAgIGlkICs9ICctJyArIGRhdGEuaWQudG9TdHJpbmcoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlkICs9ICctJyArIFV0aWxzLmdlbmVyYXRlQ2hhcnMoNCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEJhc2VBZGFwdGVyO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL3NlbGVjdCcsW1xyXG4gICcuL2Jhc2UnLFxyXG4gICcuLi91dGlscycsXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKEJhc2VBZGFwdGVyLCBVdGlscywgJCkge1xyXG4gIGZ1bmN0aW9uIFNlbGVjdEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIFNlbGVjdEFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgfVxyXG5cclxuICBVdGlscy5FeHRlbmQoU2VsZWN0QWRhcHRlciwgQmFzZUFkYXB0ZXIpO1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnOnNlbGVjdGVkJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcclxuXHJcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XHJcblxyXG4gICAgICBkYXRhLnB1c2gob3B0aW9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgZGF0YS5zZWxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgLy8gSWYgZGF0YS5lbGVtZW50IGlzIGEgRE9NIG5vZGUsIHVzZSBpdCBpbnN0ZWFkXHJcbiAgICBpZiAoJChkYXRhLmVsZW1lbnQpLmlzKCdvcHRpb24nKSkge1xyXG4gICAgICBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLiRlbGVtZW50LnByb3AoJ211bHRpcGxlJykpIHtcclxuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xyXG4gICAgICAgIHZhciB2YWwgPSBbXTtcclxuXHJcbiAgICAgICAgZGF0YSA9IFtkYXRhXTtcclxuICAgICAgICBkYXRhLnB1c2guYXBwbHkoZGF0YSwgY3VycmVudERhdGEpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgIHZhciBpZCA9IGRhdGFbZF0uaWQ7XHJcblxyXG4gICAgICAgICAgaWYgKCQuaW5BcnJheShpZCwgdmFsKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdmFsLnB1c2goaWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi4kZWxlbWVudC52YWwodmFsKTtcclxuICAgICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHZhbCA9IGRhdGEuaWQ7XHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50LnZhbCh2YWwpO1xyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUudW5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGlmICghdGhpcy4kZWxlbWVudC5wcm9wKCdtdWx0aXBsZScpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLnNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKCQoZGF0YS5lbGVtZW50KS5pcygnb3B0aW9uJykpIHtcclxuICAgICAgZGF0YS5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xyXG4gICAgICB2YXIgdmFsID0gW107XHJcblxyXG4gICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGN1cnJlbnREYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgdmFyIGlkID0gY3VycmVudERhdGFbZF0uaWQ7XHJcblxyXG4gICAgICAgIGlmIChpZCAhPT0gZGF0YS5pZCAmJiAkLmluQXJyYXkoaWQsIHZhbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICB2YWwucHVzaChpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLiRlbGVtZW50LnZhbCh2YWwpO1xyXG5cclxuICAgICAgc2VsZi4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi5zZWxlY3QocGFyYW1zLmRhdGEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCd1bnNlbGVjdCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi51bnNlbGVjdChwYXJhbXMuZGF0YSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gUmVtb3ZlIGFueXRoaW5nIGFkZGVkIHRvIGNoaWxkIGVsZW1lbnRzXHJcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gUmVtb3ZlIGFueSBjdXN0b20gZGF0YSBzZXQgYnkgU2VsZWN0MlxyXG4gICAgICBVdGlscy5SZW1vdmVEYXRhKHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIGRhdGEgPSBbXTtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCk7XHJcblxyXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcclxuXHJcbiAgICAgIGlmICghJG9wdGlvbi5pcygnb3B0aW9uJykgJiYgISRvcHRpb24uaXMoJ29wdGdyb3VwJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XHJcblxyXG4gICAgICB2YXIgbWF0Y2hlcyA9IHNlbGYubWF0Y2hlcyhwYXJhbXMsIG9wdGlvbik7XHJcblxyXG4gICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgIGRhdGEucHVzaChtYXRjaGVzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY2FsbGJhY2soe1xyXG4gICAgICByZXN1bHRzOiBkYXRhXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKCRvcHRpb25zKSB7XHJcbiAgICBVdGlscy5hcHBlbmRNYW55KHRoaXMuJGVsZW1lbnQsICRvcHRpb25zKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIG9wdGlvbjtcclxuXHJcbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xyXG4gICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xyXG4gICAgICBvcHRpb24ubGFiZWwgPSBkYXRhLnRleHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb24udGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGRhdGEudGV4dDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gZGF0YS50ZXh0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb24udmFsdWUgPSBkYXRhLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLmRpc2FibGVkKSB7XHJcbiAgICAgIG9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuc2VsZWN0ZWQpIHtcclxuICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS50aXRsZSkge1xyXG4gICAgICBvcHRpb24udGl0bGUgPSBkYXRhLnRpdGxlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkb3B0aW9uID0gJChvcHRpb24pO1xyXG5cclxuICAgIHZhciBub3JtYWxpemVkRGF0YSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YSk7XHJcbiAgICBub3JtYWxpemVkRGF0YS5lbGVtZW50ID0gb3B0aW9uO1xyXG5cclxuICAgIC8vIE92ZXJyaWRlIHRoZSBvcHRpb24ncyBkYXRhIHdpdGggdGhlIGNvbWJpbmVkIGRhdGFcclxuICAgIFV0aWxzLlN0b3JlRGF0YShvcHRpb24sICdkYXRhJywgbm9ybWFsaXplZERhdGEpO1xyXG5cclxuICAgIHJldHVybiAkb3B0aW9uO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbiAoJG9wdGlvbikge1xyXG4gICAgdmFyIGRhdGEgPSB7fTtcclxuXHJcbiAgICBkYXRhID0gVXRpbHMuR2V0RGF0YSgkb3B0aW9uWzBdLCAnZGF0YScpO1xyXG5cclxuICAgIGlmIChkYXRhICE9IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRvcHRpb24uaXMoJ29wdGlvbicpKSB7XHJcbiAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgaWQ6ICRvcHRpb24udmFsKCksXHJcbiAgICAgICAgdGV4dDogJG9wdGlvbi50ZXh0KCksXHJcbiAgICAgICAgZGlzYWJsZWQ6ICRvcHRpb24ucHJvcCgnZGlzYWJsZWQnKSxcclxuICAgICAgICBzZWxlY3RlZDogJG9wdGlvbi5wcm9wKCdzZWxlY3RlZCcpLFxyXG4gICAgICAgIHRpdGxlOiAkb3B0aW9uLnByb3AoJ3RpdGxlJylcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSBpZiAoJG9wdGlvbi5pcygnb3B0Z3JvdXAnKSkge1xyXG4gICAgICBkYXRhID0ge1xyXG4gICAgICAgIHRleHQ6ICRvcHRpb24ucHJvcCgnbGFiZWwnKSxcclxuICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgdGl0bGU6ICRvcHRpb24ucHJvcCgndGl0bGUnKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyICRjaGlsZHJlbiA9ICRvcHRpb24uY2hpbGRyZW4oJ29wdGlvbicpO1xyXG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHJcbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgJGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XHJcbiAgICAgICAgdmFyICRjaGlsZCA9ICQoJGNoaWxkcmVuW2NdKTtcclxuXHJcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5pdGVtKCRjaGlsZCk7XHJcblxyXG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkYXRhLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YSk7XHJcbiAgICBkYXRhLmVsZW1lbnQgPSAkb3B0aW9uWzBdO1xyXG5cclxuICAgIFV0aWxzLlN0b3JlRGF0YSgkb3B0aW9uWzBdLCAnZGF0YScsIGRhdGEpO1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLl9ub3JtYWxpemVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIGlmIChpdGVtICE9PSBPYmplY3QoaXRlbSkpIHtcclxuICAgICAgaXRlbSA9IHtcclxuICAgICAgICBpZDogaXRlbSxcclxuICAgICAgICB0ZXh0OiBpdGVtXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaXRlbSA9ICQuZXh0ZW5kKHt9LCB7XHJcbiAgICAgIHRleHQ6ICcnXHJcbiAgICB9LCBpdGVtKTtcclxuXHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcclxuICAgICAgZGlzYWJsZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChpdGVtLmlkICE9IG51bGwpIHtcclxuICAgICAgaXRlbS5pZCA9IGl0ZW0uaWQudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXRlbS50ZXh0ICE9IG51bGwpIHtcclxuICAgICAgaXRlbS50ZXh0ID0gaXRlbS50ZXh0LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGl0ZW0uX3Jlc3VsdElkID09IG51bGwgJiYgaXRlbS5pZCAmJiB0aGlzLmNvbnRhaW5lciAhPSBudWxsKSB7XHJcbiAgICAgIGl0ZW0uX3Jlc3VsdElkID0gdGhpcy5nZW5lcmF0ZVJlc3VsdElkKHRoaXMuY29udGFpbmVyLCBpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBpdGVtKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKHBhcmFtcywgZGF0YSkge1xyXG4gICAgdmFyIG1hdGNoZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdtYXRjaGVyJyk7XHJcblxyXG4gICAgcmV0dXJuIG1hdGNoZXIocGFyYW1zLCBkYXRhKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gU2VsZWN0QWRhcHRlcjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9hcnJheScsW1xyXG4gICcuL3NlbGVjdCcsXHJcbiAgJy4uL3V0aWxzJyxcclxuICAnanF1ZXJ5J1xyXG5dLCBmdW5jdGlvbiAoU2VsZWN0QWRhcHRlciwgVXRpbHMsICQpIHtcclxuICBmdW5jdGlvbiBBcnJheUFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9kYXRhVG9Db252ZXJ0ID0gb3B0aW9ucy5nZXQoJ2RhdGEnKSB8fCBbXTtcclxuXHJcbiAgICBBcnJheUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgVXRpbHMuRXh0ZW5kKEFycmF5QWRhcHRlciwgU2VsZWN0QWRhcHRlcik7XHJcblxyXG4gIEFycmF5QWRhcHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIEFycmF5QWRhcHRlci5fX3N1cGVyX18uYmluZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdGhpcy5hZGRPcHRpb25zKHRoaXMuY29udmVydFRvT3B0aW9ucyh0aGlzLl9kYXRhVG9Db252ZXJ0KSk7XHJcbiAgfTtcclxuXHJcbiAgQXJyYXlBZGFwdGVyLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyICRvcHRpb24gPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbiAoaSwgZWxtKSB7XHJcbiAgICAgIHJldHVybiBlbG0udmFsdWUgPT0gZGF0YS5pZC50b1N0cmluZygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCRvcHRpb24ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICRvcHRpb24gPSB0aGlzLm9wdGlvbihkYXRhKTtcclxuXHJcbiAgICAgIHRoaXMuYWRkT3B0aW9ucygkb3B0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBBcnJheUFkYXB0ZXIuX19zdXBlcl9fLnNlbGVjdC5jYWxsKHRoaXMsIGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIEFycmF5QWRhcHRlci5wcm90b3R5cGUuY29udmVydFRvT3B0aW9ucyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyICRleGlzdGluZyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uJyk7XHJcbiAgICB2YXIgZXhpc3RpbmdJZHMgPSAkZXhpc3RpbmcubWFwKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHNlbGYuaXRlbSgkKHRoaXMpKS5pZDtcclxuICAgIH0pLmdldCgpO1xyXG5cclxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xyXG5cclxuICAgIC8vIEZpbHRlciBvdXQgYWxsIGl0ZW1zIGV4Y2VwdCBmb3IgdGhlIG9uZSBwYXNzZWQgaW4gdGhlIGFyZ3VtZW50XHJcbiAgICBmdW5jdGlvbiBvbmx5SXRlbSAoaXRlbSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09IGl0ZW0uaWQ7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gdGhpcy5fbm9ybWFsaXplSXRlbShkYXRhW2RdKTtcclxuXHJcbiAgICAgIC8vIFNraXAgaXRlbXMgd2hpY2ggd2VyZSBwcmUtbG9hZGVkLCBvbmx5IG1lcmdlIHRoZSBkYXRhXHJcbiAgICAgIGlmICgkLmluQXJyYXkoaXRlbS5pZCwgZXhpc3RpbmdJZHMpID49IDApIHtcclxuICAgICAgICB2YXIgJGV4aXN0aW5nT3B0aW9uID0gJGV4aXN0aW5nLmZpbHRlcihvbmx5SXRlbShpdGVtKSk7XHJcblxyXG4gICAgICAgIHZhciBleGlzdGluZ0RhdGEgPSB0aGlzLml0ZW0oJGV4aXN0aW5nT3B0aW9uKTtcclxuICAgICAgICB2YXIgbmV3RGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBpdGVtLCBleGlzdGluZ0RhdGEpO1xyXG5cclxuICAgICAgICB2YXIgJG5ld09wdGlvbiA9IHRoaXMub3B0aW9uKG5ld0RhdGEpO1xyXG5cclxuICAgICAgICAkZXhpc3RpbmdPcHRpb24ucmVwbGFjZVdpdGgoJG5ld09wdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xyXG5cclxuICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgJGNoaWxkcmVuID0gdGhpcy5jb252ZXJ0VG9PcHRpb25zKGl0ZW0uY2hpbGRyZW4pO1xyXG5cclxuICAgICAgICBVdGlscy5hcHBlbmRNYW55KCRvcHRpb24sICRjaGlsZHJlbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRvcHRpb25zLnB1c2goJG9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBBcnJheUFkYXB0ZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYWpheCcsW1xyXG4gICcuL2FycmF5JyxcclxuICAnLi4vdXRpbHMnLFxyXG4gICdqcXVlcnknXHJcbl0sIGZ1bmN0aW9uIChBcnJheUFkYXB0ZXIsIFV0aWxzLCAkKSB7XHJcbiAgZnVuY3Rpb24gQWpheEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLmFqYXhPcHRpb25zID0gdGhpcy5fYXBwbHlEZWZhdWx0cyhvcHRpb25zLmdldCgnYWpheCcpKTtcclxuXHJcbiAgICBpZiAodGhpcy5hamF4T3B0aW9ucy5wcm9jZXNzUmVzdWx0cyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMucHJvY2Vzc1Jlc3VsdHMgPSB0aGlzLmFqYXhPcHRpb25zLnByb2Nlc3NSZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIEFqYXhBZGFwdGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChBamF4QWRhcHRlciwgQXJyYXlBZGFwdGVyKTtcclxuXHJcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLl9hcHBseURlZmF1bHRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgZGF0YTogZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgcGFyYW1zLCB7XHJcbiAgICAgICAgICBxOiBwYXJhbXMudGVybVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICB0cmFuc3BvcnQ6IGZ1bmN0aW9uIChwYXJhbXMsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcclxuICAgICAgICB2YXIgJHJlcXVlc3QgPSAkLmFqYXgocGFyYW1zKTtcclxuXHJcbiAgICAgICAgJHJlcXVlc3QudGhlbihzdWNjZXNzKTtcclxuICAgICAgICAkcmVxdWVzdC5mYWlsKGZhaWx1cmUpO1xyXG5cclxuICAgICAgICByZXR1cm4gJHJlcXVlc3Q7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLnByb2Nlc3NSZXN1bHRzID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH07XHJcblxyXG4gIEFqYXhBZGFwdGVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGlmICh0aGlzLl9yZXF1ZXN0ICE9IG51bGwpIHtcclxuICAgICAgLy8gSlNPTlAgcmVxdWVzdHMgY2Fubm90IGFsd2F5cyBiZSBhYm9ydGVkXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5fcmVxdWVzdC5hYm9ydCkpIHtcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe1xyXG4gICAgICB0eXBlOiAnR0VUJ1xyXG4gICAgfSwgdGhpcy5hamF4T3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsLmNhbGwodGhpcy4kZWxlbWVudCwgcGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBvcHRpb25zLmRhdGEgPSBvcHRpb25zLmRhdGEuY2FsbCh0aGlzLiRlbGVtZW50LCBwYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlcXVlc3QgKCkge1xyXG4gICAgICB2YXIgJHJlcXVlc3QgPSBvcHRpb25zLnRyYW5zcG9ydChvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gc2VsZi5wcm9jZXNzUmVzdWx0cyhkYXRhLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcmVzcG9uc2UgaW5jbHVkZWQgYSBgcmVzdWx0c2Aga2V5LlxyXG4gICAgICAgICAgaWYgKCFyZXN1bHRzIHx8ICFyZXN1bHRzLnJlc3VsdHMgfHwgISQuaXNBcnJheShyZXN1bHRzLnJlc3VsdHMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgJ1NlbGVjdDI6IFRoZSBBSkFYIHJlc3VsdHMgZGlkIG5vdCByZXR1cm4gYW4gYXJyYXkgaW4gdGhlICcgK1xyXG4gICAgICAgICAgICAgICdgcmVzdWx0c2Aga2V5IG9mIHRoZSByZXNwb25zZS4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYWxsYmFjayhyZXN1bHRzKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIGEgcmVxdWVzdCB3YXMgYWJvcnRlZFxyXG4gICAgICAgIC8vIE9ubHkgd29ya3MgaWYgdGhlIHRyYW5zcG9ydCBleHBvc2VzIGEgc3RhdHVzIHByb3BlcnR5XHJcbiAgICAgICAgaWYgKCdzdGF0dXMnIGluICRyZXF1ZXN0ICYmXHJcbiAgICAgICAgICAgICgkcmVxdWVzdC5zdGF0dXMgPT09IDAgfHwgJHJlcXVlc3Quc3RhdHVzID09PSAnMCcpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcclxuICAgICAgICAgIG1lc3NhZ2U6ICdlcnJvckxvYWRpbmcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2VsZi5fcmVxdWVzdCA9ICRyZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmFqYXhPcHRpb25zLmRlbGF5ICYmIHBhcmFtcy50ZXJtICE9IG51bGwpIHtcclxuICAgICAgaWYgKHRoaXMuX3F1ZXJ5VGltZW91dCkge1xyXG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fcXVlcnlUaW1lb3V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fcXVlcnlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQocmVxdWVzdCwgdGhpcy5hamF4T3B0aW9ucy5kZWxheSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXF1ZXN0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEFqYXhBZGFwdGVyO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL3RhZ3MnLFtcclxuICAnanF1ZXJ5J1xyXG5dLCBmdW5jdGlvbiAoJCkge1xyXG4gIGZ1bmN0aW9uIFRhZ3MgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHZhciB0YWdzID0gb3B0aW9ucy5nZXQoJ3RhZ3MnKTtcclxuXHJcbiAgICB2YXIgY3JlYXRlVGFnID0gb3B0aW9ucy5nZXQoJ2NyZWF0ZVRhZycpO1xyXG5cclxuICAgIGlmIChjcmVhdGVUYWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmNyZWF0ZVRhZyA9IGNyZWF0ZVRhZztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5zZXJ0VGFnID0gb3B0aW9ucy5nZXQoJ2luc2VydFRhZycpO1xyXG5cclxuICAgIGlmIChpbnNlcnRUYWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuaW5zZXJ0VGFnID0gaW5zZXJ0VGFnO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuXHJcbiAgICBpZiAoJC5pc0FycmF5KHRhZ3MpKSB7XHJcbiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGFncy5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgIHZhciB0YWcgPSB0YWdzW3RdO1xyXG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5fbm9ybWFsaXplSXRlbSh0YWcpO1xyXG5cclxuICAgICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xyXG5cclxuICAgICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZCgkb3B0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgVGFncy5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5fcmVtb3ZlT2xkVGFncygpO1xyXG5cclxuICAgIGlmIChwYXJhbXMudGVybSA9PSBudWxsIHx8IHBhcmFtcy5wYWdlICE9IG51bGwpIHtcclxuICAgICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3cmFwcGVyIChvYmosIGNoaWxkKSB7XHJcbiAgICAgIHZhciBkYXRhID0gb2JqLnJlc3VsdHM7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgb3B0aW9uID0gZGF0YVtpXTtcclxuXHJcbiAgICAgICAgdmFyIGNoZWNrQ2hpbGRyZW4gPSAoXHJcbiAgICAgICAgICBvcHRpb24uY2hpbGRyZW4gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgIXdyYXBwZXIoe1xyXG4gICAgICAgICAgICByZXN1bHRzOiBvcHRpb24uY2hpbGRyZW5cclxuICAgICAgICAgIH0sIHRydWUpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmFyIG9wdGlvblRleHQgPSAob3B0aW9uLnRleHQgfHwgJycpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIHBhcmFtc1Rlcm0gPSAocGFyYW1zLnRlcm0gfHwgJycpLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIHZhciBjaGVja1RleHQgPSBvcHRpb25UZXh0ID09PSBwYXJhbXNUZXJtO1xyXG5cclxuICAgICAgICBpZiAoY2hlY2tUZXh0IHx8IGNoZWNrQ2hpbGRyZW4pIHtcclxuICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgb2JqLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgY2FsbGJhY2sob2JqKTtcclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2hpbGQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRhZyA9IHNlbGYuY3JlYXRlVGFnKHBhcmFtcyk7XHJcblxyXG4gICAgICBpZiAodGFnICE9IG51bGwpIHtcclxuICAgICAgICB2YXIgJG9wdGlvbiA9IHNlbGYub3B0aW9uKHRhZyk7XHJcbiAgICAgICAgJG9wdGlvbi5hdHRyKCdkYXRhLXNlbGVjdDItdGFnJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHNlbGYuYWRkT3B0aW9ucyhbJG9wdGlvbl0pO1xyXG5cclxuICAgICAgICBzZWxmLmluc2VydFRhZyhkYXRhLCB0YWcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBvYmoucmVzdWx0cyA9IGRhdGE7XHJcblxyXG4gICAgICBjYWxsYmFjayhvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgd3JhcHBlcik7XHJcbiAgfTtcclxuXHJcbiAgVGFncy5wcm90b3R5cGUuY3JlYXRlVGFnID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zKSB7XHJcbiAgICB2YXIgdGVybSA9ICQudHJpbShwYXJhbXMudGVybSk7XHJcblxyXG4gICAgaWYgKHRlcm0gPT09ICcnKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB0ZXJtLFxyXG4gICAgICB0ZXh0OiB0ZXJtXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIFRhZ3MucHJvdG90eXBlLmluc2VydFRhZyA9IGZ1bmN0aW9uIChfLCBkYXRhLCB0YWcpIHtcclxuICAgIGRhdGEudW5zaGlmdCh0YWcpO1xyXG4gIH07XHJcblxyXG4gIFRhZ3MucHJvdG90eXBlLl9yZW1vdmVPbGRUYWdzID0gZnVuY3Rpb24gKF8pIHtcclxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uW2RhdGEtc2VsZWN0Mi10YWddJyk7XHJcblxyXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIFRhZ3M7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvdG9rZW5pemVyJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICBmdW5jdGlvbiBUb2tlbml6ZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHZhciB0b2tlbml6ZXIgPSBvcHRpb25zLmdldCgndG9rZW5pemVyJyk7XHJcblxyXG4gICAgaWYgKHRva2VuaXplciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIFRva2VuaXplci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcclxuXHJcbiAgICB0aGlzLiRzZWFyY2ggPSAgY29udGFpbmVyLmRyb3Bkb3duLiRzZWFyY2ggfHwgY29udGFpbmVyLnNlbGVjdGlvbi4kc2VhcmNoIHx8XHJcbiAgICAgICRjb250YWluZXIuZmluZCgnLnNlbGVjdDItc2VhcmNoX19maWVsZCcpO1xyXG4gIH07XHJcblxyXG4gIFRva2VuaXplci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQW5kU2VsZWN0IChkYXRhKSB7XHJcbiAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgZGF0YSBvYmplY3Qgc28gd2UgY2FuIHVzZSBpdCBmb3IgY2hlY2tzXHJcbiAgICAgIHZhciBpdGVtID0gc2VsZi5fbm9ybWFsaXplSXRlbShkYXRhKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBkYXRhIG9iamVjdCBhbHJlYWR5IGV4aXN0cyBhcyBhIHRhZ1xyXG4gICAgICAvLyBTZWxlY3QgaXQgaWYgaXQgZG9lc24ndFxyXG4gICAgICB2YXIgJGV4aXN0aW5nT3B0aW9ucyA9IHNlbGYuJGVsZW1lbnQuZmluZCgnb3B0aW9uJykuZmlsdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJCh0aGlzKS52YWwoKSA9PT0gaXRlbS5pZDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBJZiBhbiBleGlzdGluZyBvcHRpb24gd2Fzbid0IGZvdW5kIGZvciBpdCwgY3JlYXRlIHRoZSBvcHRpb25cclxuICAgICAgaWYgKCEkZXhpc3RpbmdPcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciAkb3B0aW9uID0gc2VsZi5vcHRpb24oaXRlbSk7XHJcbiAgICAgICAgJG9wdGlvbi5hdHRyKCdkYXRhLXNlbGVjdDItdGFnJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHNlbGYuX3JlbW92ZU9sZFRhZ3MoKTtcclxuICAgICAgICBzZWxmLmFkZE9wdGlvbnMoWyRvcHRpb25dKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtLCBub3cgdGhhdCB3ZSBrbm93IHRoZXJlIGlzIGFuIG9wdGlvbiBmb3IgaXRcclxuICAgICAgc2VsZWN0KGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlbGVjdCAoZGF0YSkge1xyXG4gICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdCcsIHtcclxuICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcmFtcy50ZXJtID0gcGFyYW1zLnRlcm0gfHwgJyc7XHJcblxyXG4gICAgdmFyIHRva2VuRGF0YSA9IHRoaXMudG9rZW5pemVyKHBhcmFtcywgdGhpcy5vcHRpb25zLCBjcmVhdGVBbmRTZWxlY3QpO1xyXG5cclxuICAgIGlmICh0b2tlbkRhdGEudGVybSAhPT0gcGFyYW1zLnRlcm0pIHtcclxuICAgICAgLy8gUmVwbGFjZSB0aGUgc2VhcmNoIHRlcm0gaWYgd2UgaGF2ZSB0aGUgc2VhcmNoIGJveFxyXG4gICAgICBpZiAodGhpcy4kc2VhcmNoLmxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuJHNlYXJjaC52YWwodG9rZW5EYXRhLnRlcm0pO1xyXG4gICAgICAgIHRoaXMuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwYXJhbXMudGVybSA9IHRva2VuRGF0YS50ZXJtO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xyXG4gIH07XHJcblxyXG4gIFRva2VuaXplci5wcm90b3R5cGUudG9rZW5pemVyID0gZnVuY3Rpb24gKF8sIHBhcmFtcywgb3B0aW9ucywgY2FsbGJhY2spIHtcclxuICAgIHZhciBzZXBhcmF0b3JzID0gb3B0aW9ucy5nZXQoJ3Rva2VuU2VwYXJhdG9ycycpIHx8IFtdO1xyXG4gICAgdmFyIHRlcm0gPSBwYXJhbXMudGVybTtcclxuICAgIHZhciBpID0gMDtcclxuXHJcbiAgICB2YXIgY3JlYXRlVGFnID0gdGhpcy5jcmVhdGVUYWcgfHwgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBwYXJhbXMudGVybSxcclxuICAgICAgICB0ZXh0OiBwYXJhbXMudGVybVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB3aGlsZSAoaSA8IHRlcm0ubGVuZ3RoKSB7XHJcbiAgICAgIHZhciB0ZXJtQ2hhciA9IHRlcm1baV07XHJcblxyXG4gICAgICBpZiAoJC5pbkFycmF5KHRlcm1DaGFyLCBzZXBhcmF0b3JzKSA9PT0gLTEpIHtcclxuICAgICAgICBpKys7XHJcblxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcGFydCA9IHRlcm0uc3Vic3RyKDAsIGkpO1xyXG4gICAgICB2YXIgcGFydFBhcmFtcyA9ICQuZXh0ZW5kKHt9LCBwYXJhbXMsIHtcclxuICAgICAgICB0ZXJtOiBwYXJ0XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIGRhdGEgPSBjcmVhdGVUYWcocGFydFBhcmFtcyk7XHJcblxyXG4gICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjYWxsYmFjayhkYXRhKTtcclxuXHJcbiAgICAgIC8vIFJlc2V0IHRoZSB0ZXJtIHRvIG5vdCBpbmNsdWRlIHRoZSB0b2tlbml6ZWQgcG9ydGlvblxyXG4gICAgICB0ZXJtID0gdGVybS5zdWJzdHIoaSArIDEpIHx8ICcnO1xyXG4gICAgICBpID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXJtOiB0ZXJtXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBUb2tlbml6ZXI7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvbWluaW11bUlucHV0TGVuZ3RoJyxbXHJcblxyXG5dLCBmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gTWluaW11bUlucHV0TGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm1pbmltdW1JbnB1dExlbmd0aCA9IG9wdGlvbnMuZ2V0KCdtaW5pbXVtSW5wdXRMZW5ndGgnKTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBNaW5pbXVtSW5wdXRMZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgcGFyYW1zLnRlcm0gPSBwYXJhbXMudGVybSB8fCAnJztcclxuXHJcbiAgICBpZiAocGFyYW1zLnRlcm0ubGVuZ3RoIDwgdGhpcy5taW5pbXVtSW5wdXRMZW5ndGgpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogJ2lucHV0VG9vU2hvcnQnLFxyXG4gICAgICAgIGFyZ3M6IHtcclxuICAgICAgICAgIG1pbmltdW06IHRoaXMubWluaW11bUlucHV0TGVuZ3RoLFxyXG4gICAgICAgICAgaW5wdXQ6IHBhcmFtcy50ZXJtLFxyXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXNcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBNaW5pbXVtSW5wdXRMZW5ndGg7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvbWF4aW11bUlucHV0TGVuZ3RoJyxbXHJcblxyXG5dLCBmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gTWF4aW11bUlucHV0TGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm1heGltdW1JbnB1dExlbmd0aCA9IG9wdGlvbnMuZ2V0KCdtYXhpbXVtSW5wdXRMZW5ndGgnKTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBNYXhpbXVtSW5wdXRMZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xyXG4gICAgcGFyYW1zLnRlcm0gPSBwYXJhbXMudGVybSB8fCAnJztcclxuXHJcbiAgICBpZiAodGhpcy5tYXhpbXVtSW5wdXRMZW5ndGggPiAwICYmXHJcbiAgICAgICAgcGFyYW1zLnRlcm0ubGVuZ3RoID4gdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGgpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XHJcbiAgICAgICAgbWVzc2FnZTogJ2lucHV0VG9vTG9uZycsXHJcbiAgICAgICAgYXJnczoge1xyXG4gICAgICAgICAgbWF4aW11bTogdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGgsXHJcbiAgICAgICAgICBpbnB1dDogcGFyYW1zLnRlcm0sXHJcbiAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1heGltdW1JbnB1dExlbmd0aDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxbXHJcblxyXG5dLCBmdW5jdGlvbiAoKXtcclxuICBmdW5jdGlvbiBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPSBvcHRpb25zLmdldCgnbWF4aW11bVNlbGVjdGlvbkxlbmd0aCcpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIE1heGltdW1TZWxlY3Rpb25MZW5ndGgucHJvdG90eXBlLmJpbmQgPVxyXG4gICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgICBjb250YWluZXIub24oJ3NlbGVjdCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLl9jaGVja0lmTWF4aW11bVNlbGVjdGVkKCk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIE1heGltdW1TZWxlY3Rpb25MZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID1cclxuICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgdGhpcy5fY2hlY2tJZk1heGltdW1TZWxlY3RlZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGVjb3JhdGVkLmNhbGwoc2VsZiwgcGFyYW1zLCBjYWxsYmFjayk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIE1heGltdW1TZWxlY3Rpb25MZW5ndGgucHJvdG90eXBlLl9jaGVja0lmTWF4aW11bVNlbGVjdGVkID1cclxuICAgIGZ1bmN0aW9uIChfLCBzdWNjZXNzQ2FsbGJhY2spIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xyXG4gICAgICAgIHZhciBjb3VudCA9IGN1cnJlbnREYXRhICE9IG51bGwgPyBjdXJyZW50RGF0YS5sZW5ndGggOiAwO1xyXG4gICAgICAgIGlmIChzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPiAwICYmXHJcbiAgICAgICAgICBjb3VudCA+PSBzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGgpIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnbWF4aW11bVNlbGVjdGVkJyxcclxuICAgICAgICAgICAgYXJnczoge1xyXG4gICAgICAgICAgICAgIG1heGltdW06IHNlbGYubWF4aW11bVNlbGVjdGlvbkxlbmd0aFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcclxuICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1heGltdW1TZWxlY3Rpb25MZW5ndGg7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIERyb3Bkb3duICgkZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICBEcm9wZG93bi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICB9XHJcblxyXG4gIFV0aWxzLkV4dGVuZChEcm9wZG93biwgVXRpbHMuT2JzZXJ2YWJsZSk7XHJcblxyXG4gIERyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgJGRyb3Bkb3duID0gJChcclxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1kcm9wZG93blwiPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItcmVzdWx0c1wiPjwvc3Bhbj4nICtcclxuICAgICAgJzwvc3Bhbj4nXHJcbiAgICApO1xyXG5cclxuICAgICRkcm9wZG93bi5hdHRyKCdkaXInLCB0aGlzLm9wdGlvbnMuZ2V0KCdkaXInKSk7XHJcblxyXG4gICAgdGhpcy4kZHJvcGRvd24gPSAkZHJvcGRvd247XHJcblxyXG4gICAgcmV0dXJuICRkcm9wZG93bjtcclxuICB9O1xyXG5cclxuICBEcm9wZG93bi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzXHJcbiAgfTtcclxuXHJcbiAgRHJvcGRvd24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRkcm9wZG93biwgJGNvbnRhaW5lcikge1xyXG4gICAgLy8gU2hvdWxkIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcclxuICB9O1xyXG5cclxuICBEcm9wZG93bi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFJlbW92ZSB0aGUgZHJvcGRvd24gZnJvbSB0aGUgRE9NXHJcbiAgICB0aGlzLiRkcm9wZG93bi5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gRHJvcGRvd247XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL3NlYXJjaCcsW1xyXG4gICdqcXVlcnknLFxyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gU2VhcmNoICgpIHsgfVxyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcclxuICAgIHZhciAkcmVuZGVyZWQgPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB2YXIgJHNlYXJjaCA9ICQoXHJcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VhcmNoIHNlbGVjdDItc2VhcmNoLS1kcm9wZG93blwiPicgK1xyXG4gICAgICAgICc8aW5wdXQgY2xhc3M9XCJzZWxlY3QyLXNlYXJjaF9fZmllbGRcIiB0eXBlPVwic2VhcmNoXCIgdGFiaW5kZXg9XCItMVwiJyArXHJcbiAgICAgICAgJyBhdXRvY29tcGxldGU9XCJvZmZcIiBhdXRvY29ycmVjdD1cIm9mZlwiIGF1dG9jYXBpdGFsaXplPVwibm9uZVwiJyArXHJcbiAgICAgICAgJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiByb2xlPVwic2VhcmNoYm94XCIgYXJpYS1hdXRvY29tcGxldGU9XCJsaXN0XCIgLz4nICtcclxuICAgICAgJzwvc3Bhbj4nXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaENvbnRhaW5lciA9ICRzZWFyY2g7XHJcbiAgICB0aGlzLiRzZWFyY2ggPSAkc2VhcmNoLmZpbmQoJ2lucHV0Jyk7XHJcblxyXG4gICAgJHJlbmRlcmVkLnByZXBlbmQoJHNlYXJjaCk7XHJcblxyXG4gICAgcmV0dXJuICRyZW5kZXJlZDtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XHJcblxyXG4gICAgICBzZWxmLl9rZXlVcFByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XHJcbiAgICAvLyBUaGlzIHdpbGwgcHJldmVudCBkb3VibGUtdHJpZ2dlcmluZyBvZiBldmVudHMgZm9yIGJyb3dzZXJzIHdoaWNoIHN1cHBvcnRcclxuICAgIC8vIGJvdGggdGhlIGBrZXl1cGAgYW5kIGBpbnB1dGAgZXZlbnRzLlxyXG4gICAgdGhpcy4kc2VhcmNoLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgLy8gVW5iaW5kIHRoZSBkdXBsaWNhdGVkIGBrZXl1cGAgZXZlbnRcclxuICAgICAgJCh0aGlzKS5vZmYoJ2tleXVwJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRzZWFyY2gub24oJ2tleXVwIGlucHV0JywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLmhhbmRsZVNlYXJjaChldnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRzZWFyY2guYXR0cigndGFiaW5kZXgnLCAwKTtcclxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ2FyaWEtY29udHJvbHMnLCByZXN1bHRzSWQpO1xyXG5cclxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcblxyXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgIH0sIDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgLTEpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1jb250cm9scycpO1xyXG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XHJcblxyXG4gICAgICBzZWxmLiRzZWFyY2gudmFsKCcnKTtcclxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2JsdXInKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghY29udGFpbmVyLmlzT3BlbigpKSB7XHJcbiAgICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMucXVlcnkudGVybSA9PSBudWxsIHx8IHBhcmFtcy5xdWVyeS50ZXJtID09PSAnJykge1xyXG4gICAgICAgIHZhciBzaG93U2VhcmNoID0gc2VsZi5zaG93U2VhcmNoKHBhcmFtcyk7XHJcblxyXG4gICAgICAgIGlmIChzaG93U2VhcmNoKSB7XHJcbiAgICAgICAgICBzZWxmLiRzZWFyY2hDb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItc2VhcmNoLS1oaWRlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGYuJHNlYXJjaENvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1zZWFyY2gtLWhpZGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgaWYgKHBhcmFtcy5kYXRhLl9yZXN1bHRJZCkge1xyXG4gICAgICAgIHNlbGYuJHNlYXJjaC5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBwYXJhbXMuZGF0YS5fcmVzdWx0SWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuJHNlYXJjaC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VhcmNoLnByb3RvdHlwZS5oYW5kbGVTZWFyY2ggPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XHJcbiAgICAgIHZhciBpbnB1dCA9IHRoaXMuJHNlYXJjaC52YWwoKTtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XHJcbiAgICAgICAgdGVybTogaW5wdXRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fa2V5VXBQcmV2ZW50ZWQgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBTZWFyY2gucHJvdG90eXBlLnNob3dTZWFyY2ggPSBmdW5jdGlvbiAoXywgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gU2VhcmNoO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXInLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBIaWRlUGxhY2Vob2xkZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XHJcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5ub3JtYWxpemVQbGFjZWhvbGRlcihvcHRpb25zLmdldCgncGxhY2Vob2xkZXInKSk7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcclxuICB9XHJcblxyXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xyXG4gICAgZGF0YS5yZXN1bHRzID0gdGhpcy5yZW1vdmVQbGFjZWhvbGRlcihkYXRhLnJlc3VsdHMpO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgcGxhY2Vob2xkZXIpIHtcclxuICAgIGlmICh0eXBlb2YgcGxhY2Vob2xkZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHBsYWNlaG9sZGVyID0ge1xyXG4gICAgICAgIGlkOiAnJyxcclxuICAgICAgICB0ZXh0OiBwbGFjZWhvbGRlclxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBIaWRlUGxhY2Vob2xkZXIucHJvdG90eXBlLnJlbW92ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcclxuICAgIHZhciBtb2RpZmllZERhdGEgPSBkYXRhLnNsaWNlKDApO1xyXG5cclxuICAgIGZvciAodmFyIGQgPSBkYXRhLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XHJcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcclxuXHJcbiAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyLmlkID09PSBpdGVtLmlkKSB7XHJcbiAgICAgICAgbW9kaWZpZWREYXRhLnNwbGljZShkLCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtb2RpZmllZERhdGE7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIEhpZGVQbGFjZWhvbGRlcjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vaW5maW5pdGVTY3JvbGwnLFtcclxuICAnanF1ZXJ5J1xyXG5dLCBmdW5jdGlvbiAoJCkge1xyXG4gIGZ1bmN0aW9uIEluZmluaXRlU2Nyb2xsIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xyXG4gICAgdGhpcy5sYXN0UGFyYW1zID0ge307XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcclxuXHJcbiAgICB0aGlzLiRsb2FkaW5nTW9yZSA9IHRoaXMuY3JlYXRlTG9hZGluZ01vcmUoKTtcclxuICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcclxuICAgIHRoaXMuJGxvYWRpbmdNb3JlLnJlbW92ZSgpO1xyXG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd0xvYWRpbmdNb3JlKGRhdGEpKSB7XHJcbiAgICAgIHRoaXMuJHJlc3VsdHMuYXBwZW5kKHRoaXMuJGxvYWRpbmdNb3JlKTtcclxuICAgICAgdGhpcy5sb2FkTW9yZUlmTmVlZGVkKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYubGFzdFBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICBzZWxmLmxhc3RQYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdzY3JvbGwnLCB0aGlzLmxvYWRNb3JlSWZOZWVkZWQuYmluZCh0aGlzKSk7XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmxvYWRNb3JlSWZOZWVkZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaXNMb2FkTW9yZVZpc2libGUgPSAkLmNvbnRhaW5zKFxyXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgIHRoaXMuJGxvYWRpbmdNb3JlWzBdXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLmxvYWRpbmcgfHwgIWlzTG9hZE1vcmVWaXNpYmxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuJHJlc3VsdHMub2Zmc2V0KCkudG9wICtcclxuICAgICAgdGhpcy4kcmVzdWx0cy5vdXRlckhlaWdodChmYWxzZSk7XHJcbiAgICB2YXIgbG9hZGluZ01vcmVPZmZzZXQgPSB0aGlzLiRsb2FkaW5nTW9yZS5vZmZzZXQoKS50b3AgK1xyXG4gICAgICB0aGlzLiRsb2FkaW5nTW9yZS5vdXRlckhlaWdodChmYWxzZSk7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRPZmZzZXQgKyA1MCA+PSBsb2FkaW5nTW9yZU9mZnNldCkge1xyXG4gICAgICB0aGlzLmxvYWRNb3JlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmxvYWRNb3JlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgcGFyYW1zID0gJC5leHRlbmQoe30sIHtwYWdlOiAxfSwgdGhpcy5sYXN0UGFyYW1zKTtcclxuXHJcbiAgICBwYXJhbXMucGFnZSsrO1xyXG5cclxuICAgIHRoaXMudHJpZ2dlcigncXVlcnk6YXBwZW5kJywgcGFyYW1zKTtcclxuICB9O1xyXG5cclxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuc2hvd0xvYWRpbmdNb3JlID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcclxuICAgIHJldHVybiBkYXRhLnBhZ2luYXRpb24gJiYgZGF0YS5wYWdpbmF0aW9uLm1vcmU7XHJcbiAgfTtcclxuXHJcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmNyZWF0ZUxvYWRpbmdNb3JlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRvcHRpb24gPSAkKFxyXG4gICAgICAnPGxpICcgK1xyXG4gICAgICAnY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbiBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0tbG9hZC1tb3JlXCInICtcclxuICAgICAgJ3JvbGU9XCJvcHRpb25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiPjwvbGk+J1xyXG4gICAgKTtcclxuXHJcbiAgICB2YXIgbWVzc2FnZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RyYW5zbGF0aW9ucycpLmdldCgnbG9hZGluZ01vcmUnKTtcclxuXHJcbiAgICAkb3B0aW9uLmh0bWwobWVzc2FnZSh0aGlzLmxhc3RQYXJhbXMpKTtcclxuXHJcbiAgICByZXR1cm4gJG9wdGlvbjtcclxuICB9O1xyXG5cclxuICByZXR1cm4gSW5maW5pdGVTY3JvbGw7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2F0dGFjaEJvZHknLFtcclxuICAnanF1ZXJ5JyxcclxuICAnLi4vdXRpbHMnXHJcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIEF0dGFjaEJvZHkgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMuJGRyb3Bkb3duUGFyZW50ID0gJChvcHRpb25zLmdldCgnZHJvcGRvd25QYXJlbnQnKSB8fCBkb2N1bWVudC5ib2R5KTtcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuX3Nob3dEcm9wZG93bigpO1xyXG4gICAgICBzZWxmLl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIoY29udGFpbmVyKTtcclxuXHJcbiAgICAgIC8vIE11c3QgYmluZCBhZnRlciB0aGUgcmVzdWx0cyBoYW5kbGVycyB0byBlbnN1cmUgY29ycmVjdCBzaXppbmdcclxuICAgICAgc2VsZi5fYmluZENvbnRhaW5lclJlc3VsdEhhbmRsZXJzKGNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLl9oaWRlRHJvcGRvd24oKTtcclxuICAgICAgc2VsZi5fZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyKGNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcyk7XHJcblxyXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIucmVtb3ZlKCk7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCAkZHJvcGRvd24sICRjb250YWluZXIpIHtcclxuICAgIC8vIENsb25lIGFsbCBvZiB0aGUgY29udGFpbmVyIGNsYXNzZXNcclxuICAgICRkcm9wZG93bi5hdHRyKCdjbGFzcycsICRjb250YWluZXIuYXR0cignY2xhc3MnKSk7XHJcblxyXG4gICAgJGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdzZWxlY3QyJyk7XHJcbiAgICAkZHJvcGRvd24uYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcblxyXG4gICAgJGRyb3Bkb3duLmNzcyh7XHJcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICB0b3A6IC05OTk5OTlcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xyXG4gICAgdmFyICRjb250YWluZXIgPSAkKCc8c3Bhbj48L3NwYW4+Jyk7XHJcblxyXG4gICAgdmFyICRkcm9wZG93biA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xyXG4gICAgJGNvbnRhaW5lci5hcHBlbmQoJGRyb3Bkb3duKTtcclxuXHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lciA9ICRjb250YWluZXI7XHJcblxyXG4gICAgcmV0dXJuICRjb250YWluZXI7XHJcbiAgfTtcclxuXHJcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX2hpZGVEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcclxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLmRldGFjaCgpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9iaW5kQ29udGFpbmVyUmVzdWx0SGFuZGxlcnMgPVxyXG4gICAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIpIHtcclxuXHJcbiAgICAvLyBUaGVzZSBzaG91bGQgb25seSBiZSBib3VuZCBvbmNlXHJcbiAgICBpZiAodGhpcy5fY29udGFpbmVyUmVzdWx0c0hhbmRsZXJzQm91bmQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YWxsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XHJcbiAgICAgIHNlbGYuX3Jlc2l6ZURyb3Bkb3duKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YXBwZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XHJcbiAgICAgIHNlbGYuX3Jlc2l6ZURyb3Bkb3duKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6bWVzc2FnZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5fcG9zaXRpb25Ecm9wZG93bigpO1xyXG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcclxuICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcclxuICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2NvbnRhaW5lclJlc3VsdHNIYW5kbGVyc0JvdW5kID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyID1cclxuICAgICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyIHNjcm9sbEV2ZW50ID0gJ3Njcm9sbC5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XHJcbiAgICB2YXIgcmVzaXplRXZlbnQgPSAncmVzaXplLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcclxuICAgIHZhciBvcmllbnRhdGlvbkV2ZW50ID0gJ29yaWVudGF0aW9uY2hhbmdlLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcclxuXHJcbiAgICB2YXIgJHdhdGNoZXJzID0gdGhpcy4kY29udGFpbmVyLnBhcmVudHMoKS5maWx0ZXIoVXRpbHMuaGFzU2Nyb2xsKTtcclxuICAgICR3YXRjaGVycy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgVXRpbHMuU3RvcmVEYXRhKHRoaXMsICdzZWxlY3QyLXNjcm9sbC1wb3NpdGlvbicsIHtcclxuICAgICAgICB4OiAkKHRoaXMpLnNjcm9sbExlZnQoKSxcclxuICAgICAgICB5OiAkKHRoaXMpLnNjcm9sbFRvcCgpXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHdhdGNoZXJzLm9uKHNjcm9sbEV2ZW50LCBmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgdmFyIHBvc2l0aW9uID0gVXRpbHMuR2V0RGF0YSh0aGlzLCAnc2VsZWN0Mi1zY3JvbGwtcG9zaXRpb24nKTtcclxuICAgICAgJCh0aGlzKS5zY3JvbGxUb3AocG9zaXRpb24ueSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKHdpbmRvdykub24oc2Nyb2xsRXZlbnQgKyAnICcgKyByZXNpemVFdmVudCArICcgJyArIG9yaWVudGF0aW9uRXZlbnQsXHJcbiAgICAgIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcclxuICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIgPVxyXG4gICAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIpIHtcclxuICAgIHZhciBzY3JvbGxFdmVudCA9ICdzY3JvbGwuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xyXG4gICAgdmFyIHJlc2l6ZUV2ZW50ID0gJ3Jlc2l6ZS5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XHJcbiAgICB2YXIgb3JpZW50YXRpb25FdmVudCA9ICdvcmllbnRhdGlvbmNoYW5nZS5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XHJcblxyXG4gICAgdmFyICR3YXRjaGVycyA9IHRoaXMuJGNvbnRhaW5lci5wYXJlbnRzKCkuZmlsdGVyKFV0aWxzLmhhc1Njcm9sbCk7XHJcbiAgICAkd2F0Y2hlcnMub2ZmKHNjcm9sbEV2ZW50KTtcclxuXHJcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbEV2ZW50ICsgJyAnICsgcmVzaXplRXZlbnQgKyAnICcgKyBvcmllbnRhdGlvbkV2ZW50KTtcclxuICB9O1xyXG5cclxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcG9zaXRpb25Ecm9wZG93biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkd2luZG93ID0gJCh3aW5kb3cpO1xyXG5cclxuICAgIHZhciBpc0N1cnJlbnRseUFib3ZlID0gdGhpcy4kZHJvcGRvd24uaGFzQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWFib3ZlJyk7XHJcbiAgICB2YXIgaXNDdXJyZW50bHlCZWxvdyA9IHRoaXMuJGRyb3Bkb3duLmhhc0NsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS1iZWxvdycpO1xyXG5cclxuICAgIHZhciBuZXdEaXJlY3Rpb24gPSBudWxsO1xyXG5cclxuICAgIHZhciBvZmZzZXQgPSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCk7XHJcblxyXG4gICAgb2Zmc2V0LmJvdHRvbSA9IG9mZnNldC50b3AgKyB0aGlzLiRjb250YWluZXIub3V0ZXJIZWlnaHQoZmFsc2UpO1xyXG5cclxuICAgIHZhciBjb250YWluZXIgPSB7XHJcbiAgICAgIGhlaWdodDogdGhpcy4kY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb250YWluZXIudG9wID0gb2Zmc2V0LnRvcDtcclxuICAgIGNvbnRhaW5lci5ib3R0b20gPSBvZmZzZXQudG9wICsgY29udGFpbmVyLmhlaWdodDtcclxuXHJcbiAgICB2YXIgZHJvcGRvd24gPSB7XHJcbiAgICAgIGhlaWdodDogdGhpcy4kZHJvcGRvd24ub3V0ZXJIZWlnaHQoZmFsc2UpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB2aWV3cG9ydCA9IHtcclxuICAgICAgdG9wOiAkd2luZG93LnNjcm9sbFRvcCgpLFxyXG4gICAgICBib3R0b206ICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyAkd2luZG93LmhlaWdodCgpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBlbm91Z2hSb29tQWJvdmUgPSB2aWV3cG9ydC50b3AgPCAob2Zmc2V0LnRvcCAtIGRyb3Bkb3duLmhlaWdodCk7XHJcbiAgICB2YXIgZW5vdWdoUm9vbUJlbG93ID0gdmlld3BvcnQuYm90dG9tID4gKG9mZnNldC5ib3R0b20gKyBkcm9wZG93bi5oZWlnaHQpO1xyXG5cclxuICAgIHZhciBjc3MgPSB7XHJcbiAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICB0b3A6IGNvbnRhaW5lci5ib3R0b21cclxuICAgIH07XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIHdoYXQgdGhlIHBhcmVudCBlbGVtZW50IGlzIHRvIHVzZSBmb3IgY2FsY3VsYXRpbmcgdGhlIG9mZnNldFxyXG4gICAgdmFyICRvZmZzZXRQYXJlbnQgPSB0aGlzLiRkcm9wZG93blBhcmVudDtcclxuXHJcbiAgICAvLyBGb3Igc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzLCB3ZSBuZWVkIHRvIGdldCB0aGUgZWxlbWVudFxyXG4gICAgLy8gdGhhdCBpcyBkZXRlcm1pbmluZyB0aGUgb2Zmc2V0XHJcbiAgICBpZiAoJG9mZnNldFBhcmVudC5jc3MoJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XHJcbiAgICAgICRvZmZzZXRQYXJlbnQgPSAkb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBwYXJlbnRPZmZzZXQgPSB7XHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgbGVmdDogMFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgICQuY29udGFpbnMoZG9jdW1lbnQuYm9keSwgJG9mZnNldFBhcmVudFswXSkgfHxcclxuICAgICAgJG9mZnNldFBhcmVudFswXS5pc0Nvbm5lY3RlZFxyXG4gICAgICApIHtcclxuICAgICAgcGFyZW50T2Zmc2V0ID0gJG9mZnNldFBhcmVudC5vZmZzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjc3MudG9wIC09IHBhcmVudE9mZnNldC50b3A7XHJcbiAgICBjc3MubGVmdCAtPSBwYXJlbnRPZmZzZXQubGVmdDtcclxuXHJcbiAgICBpZiAoIWlzQ3VycmVudGx5QWJvdmUgJiYgIWlzQ3VycmVudGx5QmVsb3cpIHtcclxuICAgICAgbmV3RGlyZWN0aW9uID0gJ2JlbG93JztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVub3VnaFJvb21CZWxvdyAmJiBlbm91Z2hSb29tQWJvdmUgJiYgIWlzQ3VycmVudGx5QWJvdmUpIHtcclxuICAgICAgbmV3RGlyZWN0aW9uID0gJ2Fib3ZlJztcclxuICAgIH0gZWxzZSBpZiAoIWVub3VnaFJvb21BYm92ZSAmJiBlbm91Z2hSb29tQmVsb3cgJiYgaXNDdXJyZW50bHlBYm92ZSkge1xyXG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYmVsb3cnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT0gJ2Fib3ZlJyB8fFxyXG4gICAgICAoaXNDdXJyZW50bHlBYm92ZSAmJiBuZXdEaXJlY3Rpb24gIT09ICdiZWxvdycpKSB7XHJcbiAgICAgIGNzcy50b3AgPSBjb250YWluZXIudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGRyb3Bkb3duLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV3RGlyZWN0aW9uICE9IG51bGwpIHtcclxuICAgICAgdGhpcy4kZHJvcGRvd25cclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWJlbG93IHNlbGVjdDItZHJvcGRvd24tLWFib3ZlJylcclxuICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLScgKyBuZXdEaXJlY3Rpb24pO1xyXG4gICAgICB0aGlzLiRjb250YWluZXJcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1iZWxvdyBzZWxlY3QyLWNvbnRhaW5lci0tYWJvdmUnKVxyXG4gICAgICAgIC5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLScgKyBuZXdEaXJlY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLmNzcyhjc3MpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9yZXNpemVEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjc3MgPSB7XHJcbiAgICAgIHdpZHRoOiB0aGlzLiRjb250YWluZXIub3V0ZXJXaWR0aChmYWxzZSkgKyAncHgnXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkF1dG9XaWR0aCcpKSB7XHJcbiAgICAgIGNzcy5taW5XaWR0aCA9IGNzcy53aWR0aDtcclxuICAgICAgY3NzLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgY3NzLndpZHRoID0gJ2F1dG8nO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGRyb3Bkb3duLmNzcyhjc3MpO1xyXG4gIH07XHJcblxyXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9zaG93RHJvcGRvd24gPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XHJcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmRUbyh0aGlzLiRkcm9wZG93blBhcmVudCk7XHJcblxyXG4gICAgdGhpcy5fcG9zaXRpb25Ecm9wZG93bigpO1xyXG4gICAgdGhpcy5fcmVzaXplRHJvcGRvd24oKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gQXR0YWNoQm9keTtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnLFtcclxuXHJcbl0sIGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBjb3VudFJlc3VsdHMgKGRhdGEpIHtcclxuICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcclxuXHJcbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgY291bnQgKz0gY291bnRSZXN1bHRzKGl0ZW0uY2hpbGRyZW4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcclxuICAgIHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggPSBvcHRpb25zLmdldCgnbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnKTtcclxuXHJcbiAgICBpZiAodGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA8IDApIHtcclxuICAgICAgdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IEluZmluaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XHJcbiAgfVxyXG5cclxuICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaC5wcm90b3R5cGUuc2hvd1NlYXJjaCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcykge1xyXG4gICAgaWYgKGNvdW50UmVzdWx0cyhwYXJhbXMuZGF0YS5yZXN1bHRzKSA8IHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2gpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vc2VsZWN0T25DbG9zZScsW1xyXG4gICcuLi91dGlscydcclxuXSwgZnVuY3Rpb24gKFV0aWxzKSB7XHJcbiAgZnVuY3Rpb24gU2VsZWN0T25DbG9zZSAoKSB7IH1cclxuXHJcbiAgU2VsZWN0T25DbG9zZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgc2VsZi5faGFuZGxlU2VsZWN0T25DbG9zZShwYXJhbXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0T25DbG9zZS5wcm90b3R5cGUuX2hhbmRsZVNlbGVjdE9uQ2xvc2UgPSBmdW5jdGlvbiAoXywgcGFyYW1zKSB7XHJcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5vcmlnaW5hbFNlbGVjdDJFdmVudCAhPSBudWxsKSB7XHJcbiAgICAgIHZhciBldmVudCA9IHBhcmFtcy5vcmlnaW5hbFNlbGVjdDJFdmVudDtcclxuXHJcbiAgICAgIC8vIERvbid0IHNlbGVjdCBhbiBpdGVtIGlmIHRoZSBjbG9zZSBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb20gYSBzZWxlY3Qgb3JcclxuICAgICAgLy8gdW5zZWxlY3QgZXZlbnRcclxuICAgICAgaWYgKGV2ZW50Ll90eXBlID09PSAnc2VsZWN0JyB8fCBldmVudC5fdHlwZSA9PT0gJ3Vuc2VsZWN0Jykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciAkaGlnaGxpZ2h0ZWRSZXN1bHRzID0gdGhpcy5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcclxuXHJcbiAgICAvLyBPbmx5IHNlbGVjdCBoaWdobGlnaHRlZCByZXN1bHRzXHJcbiAgICBpZiAoJGhpZ2hsaWdodGVkUmVzdWx0cy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGF0YSA9IFV0aWxzLkdldERhdGEoJGhpZ2hsaWdodGVkUmVzdWx0c1swXSwgJ2RhdGEnKTtcclxuXHJcbiAgICAvLyBEb24ndCByZS1zZWxlY3QgYWxyZWFkeSBzZWxlY3RlZCByZXN1bHRlXHJcbiAgICBpZiAoXHJcbiAgICAgIChkYXRhLmVsZW1lbnQgIT0gbnVsbCAmJiBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQpIHx8XHJcbiAgICAgIChkYXRhLmVsZW1lbnQgPT0gbnVsbCAmJiBkYXRhLnNlbGVjdGVkKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyaWdnZXIoJ3NlbGVjdCcsIHtcclxuICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gU2VsZWN0T25DbG9zZTtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vY2xvc2VPblNlbGVjdCcsW1xyXG5cclxuXSwgZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIENsb3NlT25TZWxlY3QgKCkgeyB9XHJcblxyXG4gIENsb3NlT25TZWxlY3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICBzZWxmLl9zZWxlY3RUcmlnZ2VyZWQoZXZ0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYuX3NlbGVjdFRyaWdnZXJlZChldnQpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgQ2xvc2VPblNlbGVjdC5wcm90b3R5cGUuX3NlbGVjdFRyaWdnZXJlZCA9IGZ1bmN0aW9uIChfLCBldnQpIHtcclxuICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gZXZ0Lm9yaWdpbmFsRXZlbnQ7XHJcblxyXG4gICAgLy8gRG9uJ3QgY2xvc2UgaWYgdGhlIGNvbnRyb2wga2V5IGlzIGJlaW5nIGhlbGRcclxuICAgIGlmIChvcmlnaW5hbEV2ZW50ICYmIChvcmlnaW5hbEV2ZW50LmN0cmxLZXkgfHwgb3JpZ2luYWxFdmVudC5tZXRhS2V5KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyKCdjbG9zZScsIHtcclxuICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCxcclxuICAgICAgb3JpZ2luYWxTZWxlY3QyRXZlbnQ6IGV2dFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIENsb3NlT25TZWxlY3Q7XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2kxOG4vZW4nLFtdLGZ1bmN0aW9uICgpIHtcclxuICAvLyBFbmdsaXNoXHJcbiAgcmV0dXJuIHtcclxuICAgIGVycm9yTG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ1RoZSByZXN1bHRzIGNvdWxkIG5vdCBiZSBsb2FkZWQuJztcclxuICAgIH0sXHJcbiAgICBpbnB1dFRvb0xvbmc6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgIHZhciBvdmVyQ2hhcnMgPSBhcmdzLmlucHV0Lmxlbmd0aCAtIGFyZ3MubWF4aW11bTtcclxuXHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBkZWxldGUgJyArIG92ZXJDaGFycyArICcgY2hhcmFjdGVyJztcclxuXHJcbiAgICAgIGlmIChvdmVyQ2hhcnMgIT0gMSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gJ3MnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH0sXHJcbiAgICBpbnB1dFRvb1Nob3J0OiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICB2YXIgcmVtYWluaW5nQ2hhcnMgPSBhcmdzLm1pbmltdW0gLSBhcmdzLmlucHV0Lmxlbmd0aDtcclxuXHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBlbnRlciAnICsgcmVtYWluaW5nQ2hhcnMgKyAnIG9yIG1vcmUgY2hhcmFjdGVycyc7XHJcblxyXG4gICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH0sXHJcbiAgICBsb2FkaW5nTW9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ0xvYWRpbmcgbW9yZSByZXN1bHRz4oCmJztcclxuICAgIH0sXHJcbiAgICBtYXhpbXVtU2VsZWN0ZWQ6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgIHZhciBtZXNzYWdlID0gJ1lvdSBjYW4gb25seSBzZWxlY3QgJyArIGFyZ3MubWF4aW11bSArICcgaXRlbSc7XHJcblxyXG4gICAgICBpZiAoYXJncy5tYXhpbXVtICE9IDEpIHtcclxuICAgICAgICBtZXNzYWdlICs9ICdzJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9LFxyXG4gICAgbm9SZXN1bHRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAnTm8gcmVzdWx0cyBmb3VuZCc7XHJcbiAgICB9LFxyXG4gICAgc2VhcmNoaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiAnU2VhcmNoaW5n4oCmJztcclxuICAgIH0sXHJcbiAgICByZW1vdmVBbGxJdGVtczogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ1JlbW92ZSBhbGwgaXRlbXMnO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG5cclxuUzIuZGVmaW5lKCdzZWxlY3QyL2RlZmF1bHRzJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJ3JlcXVpcmUnLFxyXG5cclxuICAnLi9yZXN1bHRzJyxcclxuXHJcbiAgJy4vc2VsZWN0aW9uL3NpbmdsZScsXHJcbiAgJy4vc2VsZWN0aW9uL211bHRpcGxlJyxcclxuICAnLi9zZWxlY3Rpb24vcGxhY2Vob2xkZXInLFxyXG4gICcuL3NlbGVjdGlvbi9hbGxvd0NsZWFyJyxcclxuICAnLi9zZWxlY3Rpb24vc2VhcmNoJyxcclxuICAnLi9zZWxlY3Rpb24vZXZlbnRSZWxheScsXHJcblxyXG4gICcuL3V0aWxzJyxcclxuICAnLi90cmFuc2xhdGlvbicsXHJcbiAgJy4vZGlhY3JpdGljcycsXHJcblxyXG4gICcuL2RhdGEvc2VsZWN0JyxcclxuICAnLi9kYXRhL2FycmF5JyxcclxuICAnLi9kYXRhL2FqYXgnLFxyXG4gICcuL2RhdGEvdGFncycsXHJcbiAgJy4vZGF0YS90b2tlbml6ZXInLFxyXG4gICcuL2RhdGEvbWluaW11bUlucHV0TGVuZ3RoJyxcclxuICAnLi9kYXRhL21heGltdW1JbnB1dExlbmd0aCcsXHJcbiAgJy4vZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxcclxuXHJcbiAgJy4vZHJvcGRvd24nLFxyXG4gICcuL2Ryb3Bkb3duL3NlYXJjaCcsXHJcbiAgJy4vZHJvcGRvd24vaGlkZVBsYWNlaG9sZGVyJyxcclxuICAnLi9kcm9wZG93bi9pbmZpbml0ZVNjcm9sbCcsXHJcbiAgJy4vZHJvcGRvd24vYXR0YWNoQm9keScsXHJcbiAgJy4vZHJvcGRvd24vbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnLFxyXG4gICcuL2Ryb3Bkb3duL3NlbGVjdE9uQ2xvc2UnLFxyXG4gICcuL2Ryb3Bkb3duL2Nsb3NlT25TZWxlY3QnLFxyXG5cclxuICAnLi9pMThuL2VuJ1xyXG5dLCBmdW5jdGlvbiAoJCwgcmVxdWlyZSxcclxuXHJcbiAgICAgICAgICAgICBSZXN1bHRzTGlzdCxcclxuXHJcbiAgICAgICAgICAgICBTaW5nbGVTZWxlY3Rpb24sIE11bHRpcGxlU2VsZWN0aW9uLCBQbGFjZWhvbGRlciwgQWxsb3dDbGVhcixcclxuICAgICAgICAgICAgIFNlbGVjdGlvblNlYXJjaCwgRXZlbnRSZWxheSxcclxuXHJcbiAgICAgICAgICAgICBVdGlscywgVHJhbnNsYXRpb24sIERJQUNSSVRJQ1MsXHJcblxyXG4gICAgICAgICAgICAgU2VsZWN0RGF0YSwgQXJyYXlEYXRhLCBBamF4RGF0YSwgVGFncywgVG9rZW5pemVyLFxyXG4gICAgICAgICAgICAgTWluaW11bUlucHV0TGVuZ3RoLCBNYXhpbXVtSW5wdXRMZW5ndGgsIE1heGltdW1TZWxlY3Rpb25MZW5ndGgsXHJcblxyXG4gICAgICAgICAgICAgRHJvcGRvd24sIERyb3Bkb3duU2VhcmNoLCBIaWRlUGxhY2Vob2xkZXIsIEluZmluaXRlU2Nyb2xsLFxyXG4gICAgICAgICAgICAgQXR0YWNoQm9keSwgTWluaW11bVJlc3VsdHNGb3JTZWFyY2gsIFNlbGVjdE9uQ2xvc2UsIENsb3NlT25TZWxlY3QsXHJcblxyXG4gICAgICAgICAgICAgRW5nbGlzaFRyYW5zbGF0aW9uKSB7XHJcbiAgZnVuY3Rpb24gRGVmYXVsdHMgKCkge1xyXG4gICAgdGhpcy5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgRGVmYXVsdHMucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuZGF0YUFkYXB0ZXIgPT0gbnVsbCkge1xyXG4gICAgICBpZiAob3B0aW9ucy5hamF4ICE9IG51bGwpIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gQWpheERhdGE7XHJcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICE9IG51bGwpIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gQXJyYXlEYXRhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBTZWxlY3REYXRhO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5taW5pbXVtSW5wdXRMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICAgIE1pbmltdW1JbnB1dExlbmd0aFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLm1heGltdW1JbnB1dExlbmd0aCA+IDApIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxyXG4gICAgICAgICAgTWF4aW11bUlucHV0TGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMubWF4aW11bVNlbGVjdGlvbkxlbmd0aCA+IDApIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxyXG4gICAgICAgICAgTWF4aW11bVNlbGVjdGlvbkxlbmd0aFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnRhZ3MpIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUob3B0aW9ucy5kYXRhQWRhcHRlciwgVGFncyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnRva2VuU2VwYXJhdG9ycyAhPSBudWxsIHx8IG9wdGlvbnMudG9rZW5pemVyICE9IG51bGwpIHtcclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxyXG4gICAgICAgICAgVG9rZW5pemVyXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMucXVlcnkgIT0gbnVsbCkge1xyXG4gICAgICAgIHZhciBRdWVyeSA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9xdWVyeScpO1xyXG5cclxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxyXG4gICAgICAgICAgUXVlcnlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5pbml0U2VsZWN0aW9uICE9IG51bGwpIHtcclxuICAgICAgICB2YXIgSW5pdFNlbGVjdGlvbiA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9pbml0U2VsZWN0aW9uJyk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXHJcbiAgICAgICAgICBJbml0U2VsZWN0aW9uXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLnJlc3VsdHNBZGFwdGVyID09IG51bGwpIHtcclxuICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFJlc3VsdHNMaXN0O1xyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuYWpheCAhPSBudWxsKSB7XHJcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlcixcclxuICAgICAgICAgIEluZmluaXRlU2Nyb2xsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXHJcbiAgICAgICAgICBIaWRlUGxhY2Vob2xkZXJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5zZWxlY3RPbkNsb3NlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlcixcclxuICAgICAgICAgIFNlbGVjdE9uQ2xvc2VcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID09IG51bGwpIHtcclxuICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IERyb3Bkb3duO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBTZWFyY2hhYmxlRHJvcGRvd24gPSBVdGlscy5EZWNvcmF0ZShEcm9wZG93biwgRHJvcGRvd25TZWFyY2gpO1xyXG5cclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFNlYXJjaGFibGVEcm9wZG93bjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggIT09IDApIHtcclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXHJcbiAgICAgICAgICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmNsb3NlT25TZWxlY3QpIHtcclxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXHJcbiAgICAgICAgICBDbG9zZU9uU2VsZWN0XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25Dc3NDbGFzcyAhPSBudWxsIHx8XHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkNzcyAhPSBudWxsIHx8XHJcbiAgICAgICAgb3B0aW9ucy5hZGFwdERyb3Bkb3duQ3NzQ2xhc3MgIT0gbnVsbFxyXG4gICAgICApIHtcclxuICAgICAgICB2YXIgRHJvcGRvd25DU1MgPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvZHJvcGRvd25Dc3MnKTtcclxuXHJcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxyXG4gICAgICAgICAgRHJvcGRvd25DU1NcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxyXG4gICAgICAgIEF0dGFjaEJvZHlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID09IG51bGwpIHtcclxuICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcclxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBNdWx0aXBsZVNlbGVjdGlvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBTaW5nbGVTZWxlY3Rpb247XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkZCB0aGUgcGxhY2Vob2xkZXIgbWl4aW4gaWYgYSBwbGFjZWhvbGRlciB3YXMgc3BlY2lmaWVkXHJcbiAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyICE9IG51bGwpIHtcclxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcclxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcclxuICAgICAgICAgIFBsYWNlaG9sZGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuYWxsb3dDbGVhcikge1xyXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxyXG4gICAgICAgICAgQWxsb3dDbGVhclxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLm11bHRpcGxlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXHJcbiAgICAgICAgICBTZWxlY3Rpb25TZWFyY2hcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgb3B0aW9ucy5jb250YWluZXJDc3NDbGFzcyAhPSBudWxsIHx8XHJcbiAgICAgICAgb3B0aW9ucy5jb250YWluZXJDc3MgIT0gbnVsbCB8fFxyXG4gICAgICAgIG9wdGlvbnMuYWRhcHRDb250YWluZXJDc3NDbGFzcyAhPSBudWxsXHJcbiAgICAgICkge1xyXG4gICAgICAgIHZhciBDb250YWluZXJDU1MgPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvY29udGFpbmVyQ3NzJyk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxyXG4gICAgICAgICAgQ29udGFpbmVyQ1NTXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXHJcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxyXG4gICAgICAgIEV2ZW50UmVsYXlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgZGVmYXVsdHMgd2VyZSBub3QgcHJldmlvdXNseSBhcHBsaWVkIGZyb20gYW4gZWxlbWVudCwgaXQgaXNcclxuICAgIC8vIHBvc3NpYmxlIGZvciB0aGUgbGFuZ3VhZ2Ugb3B0aW9uIHRvIGhhdmUgbm90IGJlZW4gcmVzb2x2ZWRcclxuICAgIG9wdGlvbnMubGFuZ3VhZ2UgPSB0aGlzLl9yZXNvbHZlTGFuZ3VhZ2Uob3B0aW9ucy5sYW5ndWFnZSk7XHJcblxyXG4gICAgLy8gQWx3YXlzIGZhbGwgYmFjayB0byBFbmdsaXNoIHNpbmNlIGl0IHdpbGwgYWx3YXlzIGJlIGNvbXBsZXRlXHJcbiAgICBvcHRpb25zLmxhbmd1YWdlLnB1c2goJ2VuJyk7XHJcblxyXG4gICAgdmFyIHVuaXF1ZUxhbmd1YWdlcyA9IFtdO1xyXG5cclxuICAgIGZvciAodmFyIGwgPSAwOyBsIDwgb3B0aW9ucy5sYW5ndWFnZS5sZW5ndGg7IGwrKykge1xyXG4gICAgICB2YXIgbGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlW2xdO1xyXG5cclxuICAgICAgaWYgKHVuaXF1ZUxhbmd1YWdlcy5pbmRleE9mKGxhbmd1YWdlKSA9PT0gLTEpIHtcclxuICAgICAgICB1bmlxdWVMYW5ndWFnZXMucHVzaChsYW5ndWFnZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gdW5pcXVlTGFuZ3VhZ2VzO1xyXG5cclxuICAgIG9wdGlvbnMudHJhbnNsYXRpb25zID0gdGhpcy5fcHJvY2Vzc1RyYW5zbGF0aW9ucyhcclxuICAgICAgb3B0aW9ucy5sYW5ndWFnZSxcclxuICAgICAgb3B0aW9ucy5kZWJ1Z1xyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxuICB9O1xyXG5cclxuICBEZWZhdWx0cy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3MgKHRleHQpIHtcclxuICAgICAgLy8gVXNlZCAndW5pIHJhbmdlICsgbmFtZWQgZnVuY3Rpb24nIGZyb20gaHR0cDovL2pzcGVyZi5jb20vZGlhY3JpdGljcy8xOFxyXG4gICAgICBmdW5jdGlvbiBtYXRjaChhKSB7XHJcbiAgICAgICAgcmV0dXJuIERJQUNSSVRJQ1NbYV0gfHwgYTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvW15cXHUwMDAwLVxcdTAwN0VdL2csIG1hdGNoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXRjaGVyIChwYXJhbXMsIGRhdGEpIHtcclxuICAgICAgLy8gQWx3YXlzIHJldHVybiB0aGUgb2JqZWN0IGlmIHRoZXJlIGlzIG5vdGhpbmcgdG8gY29tcGFyZVxyXG4gICAgICBpZiAoJC50cmltKHBhcmFtcy50ZXJtKSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRG8gYSByZWN1cnNpdmUgY2hlY2sgZm9yIG9wdGlvbnMgd2l0aCBjaGlsZHJlblxyXG4gICAgICBpZiAoZGF0YS5jaGlsZHJlbiAmJiBkYXRhLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvLyBDbG9uZSB0aGUgZGF0YSBvYmplY3QgaWYgdGhlcmUgYXJlIGNoaWxkcmVuXHJcbiAgICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCBhcyB3ZSBtb2RpZnkgdGhlIG9iamVjdCB0byByZW1vdmUgYW55IG5vbi1tYXRjaGVzXHJcbiAgICAgICAgdmFyIG1hdGNoID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBlYWNoIGNoaWxkIG9mIHRoZSBvcHRpb25cclxuICAgICAgICBmb3IgKHZhciBjID0gZGF0YS5jaGlsZHJlbi5sZW5ndGggLSAxOyBjID49IDA7IGMtLSkge1xyXG4gICAgICAgICAgdmFyIGNoaWxkID0gZGF0YS5jaGlsZHJlbltjXTtcclxuXHJcbiAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG1hdGNoZXIocGFyYW1zLCBjaGlsZCk7XHJcblxyXG4gICAgICAgICAgLy8gSWYgdGhlcmUgd2Fzbid0IGEgbWF0Y2gsIHJlbW92ZSB0aGUgb2JqZWN0IGluIHRoZSBhcnJheVxyXG4gICAgICAgICAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtYXRjaC5jaGlsZHJlbi5zcGxpY2UoYywgMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBhbnkgY2hpbGRyZW4gbWF0Y2hlZCwgcmV0dXJuIHRoZSBuZXcgb2JqZWN0XHJcbiAgICAgICAgaWYgKG1hdGNoLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHRoZXJlIHdlcmUgbm8gbWF0Y2hpbmcgY2hpbGRyZW4sIGNoZWNrIGp1c3QgdGhlIHBsYWluIG9iamVjdFxyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgbWF0Y2gpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgb3JpZ2luYWwgPSBzdHJpcERpYWNyaXRpY3MoZGF0YS50ZXh0KS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICB2YXIgdGVybSA9IHN0cmlwRGlhY3JpdGljcyhwYXJhbXMudGVybSkudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSB0ZXh0IGNvbnRhaW5zIHRoZSB0ZXJtXHJcbiAgICAgIGlmIChvcmlnaW5hbC5pbmRleE9mKHRlcm0pID4gLTEpIHtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgaXQgZG9lc24ndCBjb250YWluIHRoZSB0ZXJtLCBkb24ndCByZXR1cm4gYW55dGhpbmdcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcclxuICAgICAgYW1kQmFzZTogJy4vJyxcclxuICAgICAgYW1kTGFuZ3VhZ2VCYXNlOiAnLi9pMThuLycsXHJcbiAgICAgIGNsb3NlT25TZWxlY3Q6IHRydWUsXHJcbiAgICAgIGRlYnVnOiBmYWxzZSxcclxuICAgICAgZHJvcGRvd25BdXRvV2lkdGg6IGZhbHNlLFxyXG4gICAgICBlc2NhcGVNYXJrdXA6IFV0aWxzLmVzY2FwZU1hcmt1cCxcclxuICAgICAgbGFuZ3VhZ2U6IHt9LFxyXG4gICAgICBtYXRjaGVyOiBtYXRjaGVyLFxyXG4gICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDAsXHJcbiAgICAgIG1heGltdW1JbnB1dExlbmd0aDogMCxcclxuICAgICAgbWF4aW11bVNlbGVjdGlvbkxlbmd0aDogMCxcclxuICAgICAgbWluaW11bVJlc3VsdHNGb3JTZWFyY2g6IDAsXHJcbiAgICAgIHNlbGVjdE9uQ2xvc2U6IGZhbHNlLFxyXG4gICAgICBzY3JvbGxBZnRlclNlbGVjdDogZmFsc2UsXHJcbiAgICAgIHNvcnRlcjogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgfSxcclxuICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnRleHQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi50ZXh0O1xyXG4gICAgICB9LFxyXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxyXG4gICAgICB3aWR0aDogJ3Jlc29sdmUnXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIERlZmF1bHRzLnByb3RvdHlwZS5hcHBseUZyb21FbGVtZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMsICRlbGVtZW50KSB7XHJcbiAgICB2YXIgb3B0aW9uTGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlO1xyXG4gICAgdmFyIGRlZmF1bHRMYW5ndWFnZSA9IHRoaXMuZGVmYXVsdHMubGFuZ3VhZ2U7XHJcbiAgICB2YXIgZWxlbWVudExhbmd1YWdlID0gJGVsZW1lbnQucHJvcCgnbGFuZycpO1xyXG4gICAgdmFyIHBhcmVudExhbmd1YWdlID0gJGVsZW1lbnQuY2xvc2VzdCgnW2xhbmddJykucHJvcCgnbGFuZycpO1xyXG5cclxuICAgIHZhciBsYW5ndWFnZXMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoXHJcbiAgICAgIHRoaXMuX3Jlc29sdmVMYW5ndWFnZShlbGVtZW50TGFuZ3VhZ2UpLFxyXG4gICAgICB0aGlzLl9yZXNvbHZlTGFuZ3VhZ2Uob3B0aW9uTGFuZ3VhZ2UpLFxyXG4gICAgICB0aGlzLl9yZXNvbHZlTGFuZ3VhZ2UoZGVmYXVsdExhbmd1YWdlKSxcclxuICAgICAgdGhpcy5fcmVzb2x2ZUxhbmd1YWdlKHBhcmVudExhbmd1YWdlKVxyXG4gICAgKTtcclxuXHJcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gbGFuZ3VhZ2VzO1xyXG5cclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIERlZmF1bHRzLnByb3RvdHlwZS5fcmVzb2x2ZUxhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcbiAgICBpZiAoIWxhbmd1YWdlKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJC5pc0VtcHR5T2JqZWN0KGxhbmd1YWdlKSkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdChsYW5ndWFnZSkpIHtcclxuICAgICAgcmV0dXJuIFtsYW5ndWFnZV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGxhbmd1YWdlcztcclxuXHJcbiAgICBpZiAoISQuaXNBcnJheShsYW5ndWFnZSkpIHtcclxuICAgICAgbGFuZ3VhZ2VzID0gW2xhbmd1YWdlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxhbmd1YWdlcyA9IGxhbmd1YWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZXNvbHZlZExhbmd1YWdlcyA9IFtdO1xyXG5cclxuICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbGFuZ3VhZ2VzLmxlbmd0aDsgbCsrKSB7XHJcbiAgICAgIHJlc29sdmVkTGFuZ3VhZ2VzLnB1c2gobGFuZ3VhZ2VzW2xdKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzW2xdID09PSAnc3RyaW5nJyAmJiBsYW5ndWFnZXNbbF0uaW5kZXhPZignLScpID4gMCkge1xyXG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIHJlZ2lvbiBpbmZvcm1hdGlvbiBpZiBpdCBpcyBpbmNsdWRlZFxyXG4gICAgICAgIHZhciBsYW5ndWFnZVBhcnRzID0gbGFuZ3VhZ2VzW2xdLnNwbGl0KCctJyk7XHJcbiAgICAgICAgdmFyIGJhc2VMYW5ndWFnZSA9IGxhbmd1YWdlUGFydHNbMF07XHJcblxyXG4gICAgICAgIHJlc29sdmVkTGFuZ3VhZ2VzLnB1c2goYmFzZUxhbmd1YWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNvbHZlZExhbmd1YWdlcztcclxuICB9O1xyXG5cclxuICBEZWZhdWx0cy5wcm90b3R5cGUuX3Byb2Nlc3NUcmFuc2xhdGlvbnMgPSBmdW5jdGlvbiAobGFuZ3VhZ2VzLCBkZWJ1Zykge1xyXG4gICAgdmFyIHRyYW5zbGF0aW9ucyA9IG5ldyBUcmFuc2xhdGlvbigpO1xyXG5cclxuICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbGFuZ3VhZ2VzLmxlbmd0aDsgbCsrKSB7XHJcbiAgICAgIHZhciBsYW5ndWFnZURhdGEgPSBuZXcgVHJhbnNsYXRpb24oKTtcclxuXHJcbiAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsXTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vIFRyeSB0byBsb2FkIGl0IHdpdGggdGhlIG9yaWdpbmFsIG5hbWVcclxuICAgICAgICAgIGxhbmd1YWdlRGF0YSA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKGxhbmd1YWdlKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGl0LCBjaGVjayBpZiBpdCB3YXNuJ3QgdGhlIGZ1bGwgcGF0aFxyXG4gICAgICAgICAgICBsYW5ndWFnZSA9IHRoaXMuZGVmYXVsdHMuYW1kTGFuZ3VhZ2VCYXNlICsgbGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlRGF0YSA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKGxhbmd1YWdlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSB0cmFuc2xhdGlvbiBjb3VsZCBub3QgYmUgbG9hZGVkIGF0IGFsbC4gU29tZXRpbWVzIHRoaXMgaXNcclxuICAgICAgICAgICAgLy8gYmVjYXVzZSBvZiBhIGNvbmZpZ3VyYXRpb24gcHJvYmxlbSwgb3RoZXIgdGltZXMgdGhpcyBjYW4gYmVcclxuICAgICAgICAgICAgLy8gYmVjYXVzZSBvZiBob3cgU2VsZWN0MiBoZWxwcyBsb2FkIGFsbCBwb3NzaWJsZSB0cmFuc2xhdGlvbiBmaWxlc1xyXG4gICAgICAgICAgICBpZiAoZGVidWcgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAgICAgJ1NlbGVjdDI6IFRoZSBsYW5ndWFnZSBmaWxlIGZvciBcIicgKyBsYW5ndWFnZSArICdcIiBjb3VsZCAnICtcclxuICAgICAgICAgICAgICAgICdub3QgYmUgYXV0b21hdGljYWxseSBsb2FkZWQuIEEgZmFsbGJhY2sgd2lsbCBiZSB1c2VkIGluc3RlYWQuJ1xyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoJC5pc1BsYWluT2JqZWN0KGxhbmd1YWdlKSkge1xyXG4gICAgICAgIGxhbmd1YWdlRGF0YSA9IG5ldyBUcmFuc2xhdGlvbihsYW5ndWFnZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGFuZ3VhZ2VEYXRhID0gbGFuZ3VhZ2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5leHRlbmQobGFuZ3VhZ2VEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xyXG4gIH07XHJcblxyXG4gIERlZmF1bHRzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGNhbWVsS2V5ID0gJC5jYW1lbENhc2Uoa2V5KTtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgZGF0YVtjYW1lbEtleV0gPSB2YWx1ZTtcclxuXHJcbiAgICB2YXIgY29udmVydGVkRGF0YSA9IFV0aWxzLl9jb252ZXJ0RGF0YShkYXRhKTtcclxuXHJcbiAgICAkLmV4dGVuZCh0cnVlLCB0aGlzLmRlZmF1bHRzLCBjb252ZXJ0ZWREYXRhKTtcclxuICB9O1xyXG5cclxuICB2YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMoKTtcclxuXHJcbiAgcmV0dXJuIGRlZmF1bHRzO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9vcHRpb25zJyxbXHJcbiAgJ3JlcXVpcmUnLFxyXG4gICdqcXVlcnknLFxyXG4gICcuL2RlZmF1bHRzJyxcclxuICAnLi91dGlscydcclxuXSwgZnVuY3Rpb24gKHJlcXVpcmUsICQsIERlZmF1bHRzLCBVdGlscykge1xyXG4gIGZ1bmN0aW9uIE9wdGlvbnMgKG9wdGlvbnMsICRlbGVtZW50KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIGlmICgkZWxlbWVudCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuZnJvbUVsZW1lbnQoJGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgkZWxlbWVudCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucyA9IERlZmF1bHRzLmFwcGx5RnJvbUVsZW1lbnQodGhpcy5vcHRpb25zLCAkZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gRGVmYXVsdHMuYXBwbHkodGhpcy5vcHRpb25zKTtcclxuXHJcbiAgICBpZiAoJGVsZW1lbnQgJiYgJGVsZW1lbnQuaXMoJ2lucHV0JykpIHtcclxuICAgICAgdmFyIElucHV0Q29tcGF0ID0gcmVxdWlyZSh0aGlzLmdldCgnYW1kQmFzZScpICsgJ2NvbXBhdC9pbnB1dERhdGEnKTtcclxuXHJcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5kYXRhQWRhcHRlcixcclxuICAgICAgICBJbnB1dENvbXBhdFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT3B0aW9ucy5wcm90b3R5cGUuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbiAoJGUpIHtcclxuICAgIHZhciBleGNsdWRlZERhdGEgPSBbJ3NlbGVjdDInXTtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLm11bHRpcGxlID09IG51bGwpIHtcclxuICAgICAgdGhpcy5vcHRpb25zLm11bHRpcGxlID0gJGUucHJvcCgnbXVsdGlwbGUnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwpIHtcclxuICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gJGUucHJvcCgnZGlzYWJsZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpciA9PSBudWxsKSB7XHJcbiAgICAgIGlmICgkZS5wcm9wKCdkaXInKSkge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXIgPSAkZS5wcm9wKCdkaXInKTtcclxuICAgICAgfSBlbHNlIGlmICgkZS5jbG9zZXN0KCdbZGlyXScpLnByb3AoJ2RpcicpKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICRlLmNsb3Nlc3QoJ1tkaXJdJykucHJvcCgnZGlyJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICdsdHInO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJGUucHJvcCgnZGlzYWJsZWQnLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQpO1xyXG4gICAgJGUucHJvcCgnbXVsdGlwbGUnLCB0aGlzLm9wdGlvbnMubXVsdGlwbGUpO1xyXG5cclxuICAgIGlmIChVdGlscy5HZXREYXRhKCRlWzBdLCAnc2VsZWN0MlRhZ3MnKSkge1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGRhdGEtc2VsZWN0Mi10YWdzYCBhdHRyaWJ1dGUgaGFzIGJlZW4gY2hhbmdlZCB0byAnICtcclxuICAgICAgICAgICd1c2UgdGhlIGBkYXRhLWRhdGFgIGFuZCBgZGF0YS10YWdzPVwidHJ1ZVwiYCBhdHRyaWJ1dGVzIGFuZCB3aWxsIGJlICcgK1xyXG4gICAgICAgICAgJ3JlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFNlbGVjdDIuJ1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSgkZVswXSwgJ2RhdGEnLCBVdGlscy5HZXREYXRhKCRlWzBdLCAnc2VsZWN0MlRhZ3MnKSk7XHJcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSgkZVswXSwgJ3RhZ3MnLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoVXRpbHMuR2V0RGF0YSgkZVswXSwgJ2FqYXhVcmwnKSkge1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGRhdGEtYWpheC11cmxgIGF0dHJpYnV0ZSBoYXMgYmVlbiBjaGFuZ2VkIHRvICcgK1xyXG4gICAgICAgICAgJ2BkYXRhLWFqYXgtLXVybGAgYW5kIHN1cHBvcnQgZm9yIHRoZSBvbGQgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZCcgK1xyXG4gICAgICAgICAgJyBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgU2VsZWN0Mi4nXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGUuYXR0cignYWpheC0tdXJsJywgVXRpbHMuR2V0RGF0YSgkZVswXSwgJ2FqYXhVcmwnKSk7XHJcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSgkZVswXSwgJ2FqYXgtVXJsJywgVXRpbHMuR2V0RGF0YSgkZVswXSwgJ2FqYXhVcmwnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRhdGFzZXQgPSB7fTtcclxuXHJcbiAgICBmdW5jdGlvbiB1cHBlckNhc2VMZXR0ZXIoXywgbGV0dGVyKSB7XHJcbiAgICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmUtbG9hZCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgd2hpY2ggYXJlIHByZWZpeGVkIHdpdGggYGRhdGEtYFxyXG4gICAgZm9yICh2YXIgYXR0ciA9IDA7IGF0dHIgPCAkZVswXS5hdHRyaWJ1dGVzLmxlbmd0aDsgYXR0cisrKSB7XHJcbiAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gJGVbMF0uYXR0cmlidXRlc1thdHRyXS5uYW1lO1xyXG4gICAgICB2YXIgcHJlZml4ID0gJ2RhdGEtJztcclxuXHJcbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lLnN1YnN0cigwLCBwcmVmaXgubGVuZ3RoKSA9PSBwcmVmaXgpIHtcclxuICAgICAgICAvLyBHZXQgdGhlIGNvbnRlbnRzIG9mIHRoZSBhdHRyaWJ1dGUgYWZ0ZXIgYGRhdGEtYFxyXG4gICAgICAgIHZhciBkYXRhTmFtZSA9IGF0dHJpYnV0ZU5hbWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGRhdGEgY29udGVudHMgZnJvbSB0aGUgY29uc2lzdGVudCBzb3VyY2VcclxuICAgICAgICAvLyBUaGlzIGlzIG1vcmUgdGhhbiBsaWtlbHkgdGhlIGpRdWVyeSBkYXRhIGhlbHBlclxyXG4gICAgICAgIHZhciBkYXRhVmFsdWUgPSBVdGlscy5HZXREYXRhKCRlWzBdLCBkYXRhTmFtZSk7XHJcblxyXG4gICAgICAgIC8vIGNhbWVsQ2FzZSB0aGUgYXR0cmlidXRlIG5hbWUgdG8gbWF0Y2ggdGhlIHNwZWNcclxuICAgICAgICB2YXIgY2FtZWxEYXRhTmFtZSA9IGRhdGFOYW1lLnJlcGxhY2UoLy0oW2Etel0pL2csIHVwcGVyQ2FzZUxldHRlcik7XHJcblxyXG4gICAgICAgIC8vIFN0b3JlIHRoZSBkYXRhIGF0dHJpYnV0ZSBjb250ZW50cyBpbnRvIHRoZSBkYXRhc2V0IHNpbmNlXHJcbiAgICAgICAgZGF0YXNldFtjYW1lbERhdGFOYW1lXSA9IGRhdGFWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFByZWZlciB0aGUgZWxlbWVudCdzIGBkYXRhc2V0YCBhdHRyaWJ1dGUgaWYgaXQgZXhpc3RzXHJcbiAgICAvLyBqUXVlcnkgMS54IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgZGF0YSBhdHRyaWJ1dGVzIHdpdGggbXVsdGlwbGUgZGFzaGVzXHJcbiAgICBpZiAoJC5mbi5qcXVlcnkgJiYgJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDIpID09ICcxLicgJiYgJGVbMF0uZGF0YXNldCkge1xyXG4gICAgICBkYXRhc2V0ID0gJC5leHRlbmQodHJ1ZSwge30sICRlWzBdLmRhdGFzZXQsIGRhdGFzZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByZWZlciBvdXIgaW50ZXJuYWwgZGF0YSBjYWNoZSBpZiBpdCBleGlzdHNcclxuICAgIHZhciBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIFV0aWxzLkdldERhdGEoJGVbMF0pLCBkYXRhc2V0KTtcclxuXHJcbiAgICBkYXRhID0gVXRpbHMuX2NvbnZlcnREYXRhKGRhdGEpO1xyXG5cclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgIGlmICgkLmluQXJyYXkoa2V5LCBleGNsdWRlZERhdGEpID4gLTEpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdCh0aGlzLm9wdGlvbnNba2V5XSkpIHtcclxuICAgICAgICAkLmV4dGVuZCh0aGlzLm9wdGlvbnNba2V5XSwgZGF0YVtrZXldKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IGRhdGFba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIE9wdGlvbnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNba2V5XTtcclxuICB9O1xyXG5cclxuICBPcHRpb25zLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBPcHRpb25zO1xyXG59KTtcclxuXHJcblMyLmRlZmluZSgnc2VsZWN0Mi9jb3JlJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJy4vb3B0aW9ucycsXHJcbiAgJy4vdXRpbHMnLFxyXG4gICcuL2tleXMnXHJcbl0sIGZ1bmN0aW9uICgkLCBPcHRpb25zLCBVdGlscywgS0VZUykge1xyXG4gIHZhciBTZWxlY3QyID0gZnVuY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICBpZiAoVXRpbHMuR2V0RGF0YSgkZWxlbWVudFswXSwgJ3NlbGVjdDInKSAhPSBudWxsKSB7XHJcbiAgICAgIFV0aWxzLkdldERhdGEoJGVsZW1lbnRbMF0sICdzZWxlY3QyJykuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcclxuXHJcbiAgICB0aGlzLmlkID0gdGhpcy5fZ2VuZXJhdGVJZCgkZWxlbWVudCk7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gbmV3IE9wdGlvbnMob3B0aW9ucywgJGVsZW1lbnQpO1xyXG5cclxuICAgIFNlbGVjdDIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcblxyXG4gICAgLy8gU2V0IHVwIHRoZSB0YWJpbmRleFxyXG5cclxuICAgIHZhciB0YWJpbmRleCA9ICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgfHwgMDtcclxuICAgIFV0aWxzLlN0b3JlRGF0YSgkZWxlbWVudFswXSwgJ29sZC10YWJpbmRleCcsIHRhYmluZGV4KTtcclxuICAgICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XHJcblxyXG4gICAgLy8gU2V0IHVwIGNvbnRhaW5lcnMgYW5kIGFkYXB0ZXJzXHJcblxyXG4gICAgdmFyIERhdGFBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnZGF0YUFkYXB0ZXInKTtcclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIgPSBuZXcgRGF0YUFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcblxyXG4gICAgdmFyICRjb250YWluZXIgPSB0aGlzLnJlbmRlcigpO1xyXG5cclxuICAgIHRoaXMuX3BsYWNlQ29udGFpbmVyKCRjb250YWluZXIpO1xyXG5cclxuICAgIHZhciBTZWxlY3Rpb25BZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnc2VsZWN0aW9uQWRhcHRlcicpO1xyXG4gICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcclxuICAgIHRoaXMuJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uLnJlbmRlcigpO1xyXG5cclxuICAgIHRoaXMuc2VsZWN0aW9uLnBvc2l0aW9uKHRoaXMuJHNlbGVjdGlvbiwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdmFyIERyb3Bkb3duQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ2Ryb3Bkb3duQWRhcHRlcicpO1xyXG4gICAgdGhpcy5kcm9wZG93biA9IG5ldyBEcm9wZG93bkFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB0aGlzLiRkcm9wZG93biA9IHRoaXMuZHJvcGRvd24ucmVuZGVyKCk7XHJcblxyXG4gICAgdGhpcy5kcm9wZG93bi5wb3NpdGlvbih0aGlzLiRkcm9wZG93biwgJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdmFyIFJlc3VsdHNBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgncmVzdWx0c0FkYXB0ZXInKTtcclxuICAgIHRoaXMucmVzdWx0cyA9IG5ldyBSZXN1bHRzQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zLCB0aGlzLmRhdGFBZGFwdGVyKTtcclxuICAgIHRoaXMuJHJlc3VsdHMgPSB0aGlzLnJlc3VsdHMucmVuZGVyKCk7XHJcblxyXG4gICAgdGhpcy5yZXN1bHRzLnBvc2l0aW9uKHRoaXMuJHJlc3VsdHMsIHRoaXMuJGRyb3Bkb3duKTtcclxuXHJcbiAgICAvLyBCaW5kIGV2ZW50c1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAvLyBCaW5kIHRoZSBjb250YWluZXIgdG8gYWxsIG9mIHRoZSBhZGFwdGVyc1xyXG4gICAgdGhpcy5fYmluZEFkYXB0ZXJzKCk7XHJcblxyXG4gICAgLy8gUmVnaXN0ZXIgYW55IERPTSBldmVudCBoYW5kbGVyc1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJEb21FdmVudHMoKTtcclxuXHJcbiAgICAvLyBSZWdpc3RlciBhbnkgaW50ZXJuYWwgZXZlbnQgaGFuZGxlcnNcclxuICAgIHRoaXMuX3JlZ2lzdGVyRGF0YUV2ZW50cygpO1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJTZWxlY3Rpb25FdmVudHMoKTtcclxuICAgIHRoaXMuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMoKTtcclxuICAgIHRoaXMuX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cygpO1xyXG4gICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgc3RhdGVcclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoaW5pdGlhbERhdGEpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xyXG4gICAgICAgIGRhdGE6IGluaXRpYWxEYXRhXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSGlkZSB0aGUgb3JpZ2luYWwgc2VsZWN0XHJcbiAgICAkZWxlbWVudC5hZGRDbGFzcygnc2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZScpO1xyXG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xyXG5cclxuICAgIC8vIFN5bmNocm9uaXplIGFueSBtb25pdG9yZWQgYXR0cmlidXRlc1xyXG4gICAgdGhpcy5fc3luY0F0dHJpYnV0ZXMoKTtcclxuXHJcbiAgICBVdGlscy5TdG9yZURhdGEoJGVsZW1lbnRbMF0sICdzZWxlY3QyJywgdGhpcyk7XHJcblxyXG4gICAgLy8gRW5zdXJlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggJGVsZW1lbnQuZGF0YSgnc2VsZWN0MicpLlxyXG4gICAgJGVsZW1lbnQuZGF0YSgnc2VsZWN0MicsIHRoaXMpO1xyXG4gIH07XHJcblxyXG4gIFV0aWxzLkV4dGVuZChTZWxlY3QyLCBVdGlscy5PYnNlcnZhYmxlKTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX2dlbmVyYXRlSWQgPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcclxuICAgIHZhciBpZCA9ICcnO1xyXG5cclxuICAgIGlmICgkZWxlbWVudC5hdHRyKCdpZCcpICE9IG51bGwpIHtcclxuICAgICAgaWQgPSAkZWxlbWVudC5hdHRyKCdpZCcpO1xyXG4gICAgfSBlbHNlIGlmICgkZWxlbWVudC5hdHRyKCduYW1lJykgIT0gbnVsbCkge1xyXG4gICAgICBpZCA9ICRlbGVtZW50LmF0dHIoJ25hbWUnKSArICctJyArIFV0aWxzLmdlbmVyYXRlQ2hhcnMoMik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZCA9IFV0aWxzLmdlbmVyYXRlQ2hhcnMoNCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWQgPSBpZC5yZXBsYWNlKC8oOnxcXC58XFxbfFxcXXwsKS9nLCAnJyk7XHJcbiAgICBpZCA9ICdzZWxlY3QyLScgKyBpZDtcclxuXHJcbiAgICByZXR1cm4gaWQ7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3BsYWNlQ29udGFpbmVyID0gZnVuY3Rpb24gKCRjb250YWluZXIpIHtcclxuICAgICRjb250YWluZXIuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCk7XHJcblxyXG4gICAgdmFyIHdpZHRoID0gdGhpcy5fcmVzb2x2ZVdpZHRoKHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5nZXQoJ3dpZHRoJykpO1xyXG5cclxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XHJcbiAgICAgICRjb250YWluZXIuY3NzKCd3aWR0aCcsIHdpZHRoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVzb2x2ZVdpZHRoID0gZnVuY3Rpb24gKCRlbGVtZW50LCBtZXRob2QpIHtcclxuICAgIHZhciBXSURUSCA9IC9ed2lkdGg6KChbLStdPyhbMC05XSpcXC4pP1swLTldKykocHh8ZW18ZXh8JXxpbnxjbXxtbXxwdHxwYykpL2k7XHJcblxyXG4gICAgaWYgKG1ldGhvZCA9PSAncmVzb2x2ZScpIHtcclxuICAgICAgdmFyIHN0eWxlV2lkdGggPSB0aGlzLl9yZXNvbHZlV2lkdGgoJGVsZW1lbnQsICdzdHlsZScpO1xyXG5cclxuICAgICAgaWYgKHN0eWxlV2lkdGggIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBzdHlsZVdpZHRoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVdpZHRoKCRlbGVtZW50LCAnZWxlbWVudCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRob2QgPT0gJ2VsZW1lbnQnKSB7XHJcbiAgICAgIHZhciBlbGVtZW50V2lkdGggPSAkZWxlbWVudC5vdXRlcldpZHRoKGZhbHNlKTtcclxuXHJcbiAgICAgIGlmIChlbGVtZW50V2lkdGggPD0gMCkge1xyXG4gICAgICAgIHJldHVybiAnYXV0byc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBlbGVtZW50V2lkdGggKyAncHgnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRob2QgPT0gJ3N0eWxlJykge1xyXG4gICAgICB2YXIgc3R5bGUgPSAkZWxlbWVudC5hdHRyKCdzdHlsZScpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZihzdHlsZSkgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBhdHRycyA9IHN0eWxlLnNwbGl0KCc7Jyk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJzLmxlbmd0aDsgaSA8IGw7IGkgPSBpICsgMSkge1xyXG4gICAgICAgIHZhciBhdHRyID0gYXR0cnNbaV0ucmVwbGFjZSgvXFxzL2csICcnKTtcclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IGF0dHIubWF0Y2goV0lEVEgpO1xyXG5cclxuICAgICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCAmJiBtYXRjaGVzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRob2QgPT0gJ2NvbXB1dGVkc3R5bGUnKSB7XHJcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoJGVsZW1lbnRbMF0pO1xyXG5cclxuICAgICAgcmV0dXJuIGNvbXB1dGVkU3R5bGUud2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1ldGhvZDtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fYmluZEFkYXB0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5kYXRhQWRhcHRlci5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnNlbGVjdGlvbi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcblxyXG4gICAgdGhpcy5kcm9wZG93bi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnJlc3VsdHMuYmluZCh0aGlzLCB0aGlzLiRjb250YWluZXIpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRvbUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjaGFuZ2Uuc2VsZWN0MicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xyXG4gICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2ZvY3VzLnNlbGVjdDInLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcignZm9jdXMnLCBldnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fc3luY0EgPSBVdGlscy5iaW5kKHRoaXMuX3N5bmNBdHRyaWJ1dGVzLCB0aGlzKTtcclxuICAgIHRoaXMuX3N5bmNTID0gVXRpbHMuYmluZCh0aGlzLl9zeW5jU3VidHJlZSwgdGhpcyk7XHJcblxyXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0uYXR0YWNoRXZlbnQpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXS5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIHRoaXMuX3N5bmNBKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgb2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fFxyXG4gICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxyXG4gICAgICB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlclxyXG4gICAgO1xyXG5cclxuICAgIGlmIChvYnNlcnZlciAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IG9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICBzZWxmLl9zeW5jQSgpO1xyXG4gICAgICAgIHNlbGYuX3N5bmNTKG51bGwsIG11dGF0aW9ucyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuJGVsZW1lbnRbMF0sIHtcclxuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICBzdWJ0cmVlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAnRE9NQXR0ck1vZGlmaWVkJyxcclxuICAgICAgICBzZWxmLl9zeW5jQSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgJ0RPTU5vZGVJbnNlcnRlZCcsXHJcbiAgICAgICAgc2VsZi5fc3luY1MsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICdET01Ob2RlUmVtb3ZlZCcsXHJcbiAgICAgICAgc2VsZi5fc3luY1MsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJEYXRhRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyU2VsZWN0aW9uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIG5vblJlbGF5RXZlbnRzID0gWyd0b2dnbGUnLCAnZm9jdXMnXTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGlvbi5vbigndG9nZ2xlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLnRvZ2dsZURyb3Bkb3duKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGlvbi5vbignZm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIHNlbGYuZm9jdXMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2VsZWN0aW9uLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xyXG4gICAgICBpZiAoJC5pbkFycmF5KG5hbWUsIG5vblJlbGF5RXZlbnRzKSAhPT0gLTEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5kcm9wZG93bi5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJSZXN1bHRzRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMucmVzdWx0cy5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tb3BlbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub24oJ2VuYWJsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZGlzYWJsZWQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWRpc2FibGVkJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9uKCdibHVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1mb2N1cycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgIGlmICghc2VsZi5pc09wZW4oKSkge1xyXG4gICAgICAgIHNlbGYudHJpZ2dlcignb3BlbicsIHt9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5kYXRhQWRhcHRlci5xdWVyeShwYXJhbXMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmFsbCcsIHtcclxuICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICBxdWVyeTogcGFyYW1zXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICB0aGlzLmRhdGFBZGFwdGVyLnF1ZXJ5KHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6YXBwZW5kJywge1xyXG4gICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgIHF1ZXJ5OiBwYXJhbXNcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzT3BlbigpKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gS0VZUy5FU0MgfHwga2V5ID09PSBLRVlTLlRBQiB8fFxyXG4gICAgICAgICAgICAoa2V5ID09PSBLRVlTLlVQICYmIGV2dC5hbHRLZXkpKSB7XHJcbiAgICAgICAgICBzZWxmLmNsb3NlKGV2dCk7XHJcblxyXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuRU5URVIpIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpzZWxlY3QnLCB7fSk7XHJcblxyXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoa2V5ID09PSBLRVlTLlNQQUNFICYmIGV2dC5jdHJsS2V5KSkge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnRvZ2dsZScsIHt9KTtcclxuXHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS0VZUy5VUCkge1xyXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnByZXZpb3VzJywge30pO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLRVlTLkRPV04pIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpuZXh0Jywge30pO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoa2V5ID09PSBLRVlTLkVOVEVSIHx8IGtleSA9PT0gS0VZUy5TUEFDRSB8fFxyXG4gICAgICAgICAgICAoa2V5ID09PSBLRVlTLkRPV04gJiYgZXZ0LmFsdEtleSkpIHtcclxuICAgICAgICAgIHNlbGYub3BlbigpO1xyXG5cclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3N5bmNBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5vcHRpb25zLnNldCgnZGlzYWJsZWQnLCB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJykpO1xyXG5cclxuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQoKSkge1xyXG4gICAgICBpZiAodGhpcy5pc09wZW4oKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50cmlnZ2VyKCdkaXNhYmxlJywge30pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKCdlbmFibGUnLCB7fSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX2lzQ2hhbmdlTXV0YXRpb24gPSBmdW5jdGlvbiAoZXZ0LCBtdXRhdGlvbnMpIHtcclxuICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gSWdub3JlIGFueSBtdXRhdGlvbiBldmVudHMgcmFpc2VkIGZvciBlbGVtZW50cyB0aGF0IGFyZW4ndCBvcHRpb25zIG9yXHJcbiAgICAvLyBvcHRncm91cHMuIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3QgZWxlbWVudCBpcyBkZXN0cm95ZWRcclxuICAgIGlmIChcclxuICAgICAgZXZ0ICYmIGV2dC50YXJnZXQgJiYgKFxyXG4gICAgICAgIGV2dC50YXJnZXQubm9kZU5hbWUgIT09ICdPUFRJT04nICYmIGV2dC50YXJnZXQubm9kZU5hbWUgIT09ICdPUFRHUk9VUCdcclxuICAgICAgKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW11dGF0aW9ucykge1xyXG4gICAgICAvLyBJZiBtdXRhdGlvbiBldmVudHMgYXJlbid0IHN1cHBvcnRlZCwgdGhlbiB3ZSBjYW4gb25seSBhc3N1bWUgdGhhdCB0aGVcclxuICAgICAgLy8gY2hhbmdlIGFmZmVjdGVkIHRoZSBzZWxlY3Rpb25zXHJcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChtdXRhdGlvbnMuYWRkZWROb2RlcyAmJiBtdXRhdGlvbnMuYWRkZWROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbXV0YXRpb25zLmFkZGVkTm9kZXMubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICB2YXIgbm9kZSA9IG11dGF0aW9ucy5hZGRlZE5vZGVzW25dO1xyXG5cclxuICAgICAgICBpZiAobm9kZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKG11dGF0aW9ucy5yZW1vdmVkTm9kZXMgJiYgbXV0YXRpb25zLnJlbW92ZWROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmICgkLmlzQXJyYXkobXV0YXRpb25zKSkge1xyXG4gICAgICAkLmVhY2gobXV0YXRpb25zLCBmdW5jdGlvbihldnQsIG11dGF0aW9uKSB7XHJcbiAgICAgICAgaWYgKHNlbGYuX2lzQ2hhbmdlTXV0YXRpb24oZXZ0LCBtdXRhdGlvbikpIHtcclxuICAgICAgICAgIC8vIFdlJ3ZlIGZvdW5kIGEgY2hhbmdlIG11dGF0aW9uLlxyXG4gICAgICAgICAgLy8gTGV0J3MgZXNjYXBlIGZyb20gdGhlIGxvb3AgYW5kIGNvbnRpbnVlXHJcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYW5nZWQ7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3N5bmNTdWJ0cmVlID0gZnVuY3Rpb24gKGV2dCwgbXV0YXRpb25zKSB7XHJcbiAgICB2YXIgY2hhbmdlZCA9IHRoaXMuX2lzQ2hhbmdlTXV0YXRpb24oZXZ0LCBtdXRhdGlvbnMpO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIE9ubHkgcmUtcHVsbCB0aGUgZGF0YSBpZiB3ZSB0aGluayB0aGVyZSBpcyBhIGNoYW5nZVxyXG4gICAgaWYgKGNoYW5nZWQpIHtcclxuICAgICAgdGhpcy5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xyXG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0aW9uOnVwZGF0ZScsIHtcclxuICAgICAgICAgIGRhdGE6IGN1cnJlbnREYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE92ZXJyaWRlIHRoZSB0cmlnZ2VyIG1ldGhvZCB0byBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgcHJlLWV2ZW50cyB3aGVuXHJcbiAgICogdGhlcmUgYXJlIGV2ZW50cyB0aGF0IGNhbiBiZSBwcmV2ZW50ZWQuXHJcbiAgICovXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XHJcbiAgICB2YXIgYWN0dWFsVHJpZ2dlciA9IFNlbGVjdDIuX19zdXBlcl9fLnRyaWdnZXI7XHJcbiAgICB2YXIgcHJlVHJpZ2dlck1hcCA9IHtcclxuICAgICAgJ29wZW4nOiAnb3BlbmluZycsXHJcbiAgICAgICdjbG9zZSc6ICdjbG9zaW5nJyxcclxuICAgICAgJ3NlbGVjdCc6ICdzZWxlY3RpbmcnLFxyXG4gICAgICAndW5zZWxlY3QnOiAndW5zZWxlY3RpbmcnLFxyXG4gICAgICAnY2xlYXInOiAnY2xlYXJpbmcnXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgYXJncyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuYW1lIGluIHByZVRyaWdnZXJNYXApIHtcclxuICAgICAgdmFyIHByZVRyaWdnZXJOYW1lID0gcHJlVHJpZ2dlck1hcFtuYW1lXTtcclxuICAgICAgdmFyIHByZVRyaWdnZXJBcmdzID0ge1xyXG4gICAgICAgIHByZXZlbnRlZDogZmFsc2UsXHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhcmdzOiBhcmdzXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBhY3R1YWxUcmlnZ2VyLmNhbGwodGhpcywgcHJlVHJpZ2dlck5hbWUsIHByZVRyaWdnZXJBcmdzKTtcclxuXHJcbiAgICAgIGlmIChwcmVUcmlnZ2VyQXJncy5wcmV2ZW50ZWQpIHtcclxuICAgICAgICBhcmdzLnByZXZlbnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFjdHVhbFRyaWdnZXIuY2FsbCh0aGlzLCBuYW1lLCBhcmdzKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS50b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc0Rpc2FibGVkKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7fSk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICBpZiAoIXRoaXMuaXNPcGVuKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudHJpZ2dlcignY2xvc2UnLCB7IG9yaWdpbmFsRXZlbnQgOiBldnQgfSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSGVscGVyIG1ldGhvZCB0byBhYnN0cmFjdCB0aGUgXCJlbmFibGVkXCIgKG5vdCBcImRpc2FibGVkXCIpIHN0YXRlIG9mIHRoaXNcclxuICAgKiBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHt0cnVlfSBpZiB0aGUgaW5zdGFuY2UgaXMgbm90IGRpc2FibGVkLlxyXG4gICAqIEByZXR1cm4ge2ZhbHNlfSBpZiB0aGUgaW5zdGFuY2UgaXMgZGlzYWJsZWQuXHJcbiAgICovXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuaXNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLmlzRGlzYWJsZWQoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGFic3RyYWN0IHRoZSBcImRpc2FibGVkXCIgc3RhdGUgb2YgdGhpcyBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHt0cnVlfSBpZiB0aGUgZGlzYWJsZWQgb3B0aW9uIGlzIHRydWUuXHJcbiAgICogQHJldHVybiB7ZmFsc2V9IGlmIHRoZSBkaXNhYmxlZCBvcHRpb24gaXMgZmFsc2UuXHJcbiAgICovXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlZCcpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLiRjb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUuaGFzRm9jdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kY29udGFpbmVyLmhhc0NsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcclxuICB9O1xyXG5cclxuICBTZWxlY3QyLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAvLyBObyBuZWVkIHRvIHJlLXRyaWdnZXIgZm9jdXMgZXZlbnRzIGlmIHdlIGFyZSBhbHJlYWR5IGZvY3VzZWRcclxuICAgIGlmICh0aGlzLmhhc0ZvY3VzKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWZvY3VzJyk7XHJcbiAgICB0aGlzLnRyaWdnZXIoJ2ZvY3VzJywge30pO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXCJlbmFibGVcIilgIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsJyArXHJcbiAgICAgICAgJyBiZSByZW1vdmVkIGluIGxhdGVyIFNlbGVjdDIgdmVyc2lvbnMuIFVzZSAkZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIiknICtcclxuICAgICAgICAnIGluc3RlYWQuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgYXJncyA9IFt0cnVlXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlzYWJsZWQgPSAhYXJnc1swXTtcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJlxyXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1NlbGVjdDI6IERhdGEgY2FuIG5vIGxvbmdlciBiZSBzZXQgdXNpbmcgYHNlbGVjdDIoXCJkYXRhXCIpYC4gWW91ICcgK1xyXG4gICAgICAgICdzaG91bGQgY29uc2lkZXIgc2V0dGluZyB0aGUgdmFsdWUgaW5zdGVhZCB1c2luZyBgJGVsZW1lbnQudmFsKClgLidcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG5cclxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcclxuICAgICAgZGF0YSA9IGN1cnJlbnREYXRhO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ1NlbGVjdDI6IFRoZSBgc2VsZWN0MihcInZhbFwiKWAgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUnICtcclxuICAgICAgICAnIHJlbW92ZWQgaW4gbGF0ZXIgU2VsZWN0MiB2ZXJzaW9ucy4gVXNlICRlbGVtZW50LnZhbCgpIGluc3RlYWQuJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQudmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5ld1ZhbCA9IGFyZ3NbMF07XHJcblxyXG4gICAgaWYgKCQuaXNBcnJheShuZXdWYWwpKSB7XHJcbiAgICAgIG5ld1ZhbCA9ICQubWFwKG5ld1ZhbCwgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmoudG9TdHJpbmcoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudC52YWwobmV3VmFsKS50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gIH07XHJcblxyXG4gIFNlbGVjdDIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0uZGV0YWNoRXZlbnQpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXS5kZXRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIHRoaXMuX3N5bmNBKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fb2JzZXJ2ZXIgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcclxuICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudFswXS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF1cclxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQXR0ck1vZGlmaWVkJywgdGhpcy5fc3luY0EsIGZhbHNlKTtcclxuICAgICAgdGhpcy4kZWxlbWVudFswXVxyXG4gICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Ob2RlSW5zZXJ0ZWQnLCB0aGlzLl9zeW5jUywgZmFsc2UpO1xyXG4gICAgICB0aGlzLiRlbGVtZW50WzBdXHJcbiAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVSZW1vdmVkJywgdGhpcy5fc3luY1MsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zeW5jQSA9IG51bGw7XHJcbiAgICB0aGlzLl9zeW5jUyA9IG51bGw7XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5zZWxlY3QyJyk7XHJcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JyxcclxuICAgIFV0aWxzLkdldERhdGEodGhpcy4kZWxlbWVudFswXSwgJ29sZC10YWJpbmRleCcpKTtcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdzZWxlY3QyLWhpZGRlbi1hY2Nlc3NpYmxlJyk7XHJcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgICBVdGlscy5SZW1vdmVEYXRhKHRoaXMuJGVsZW1lbnRbMF0pO1xyXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdzZWxlY3QyJyk7XHJcblxyXG4gICAgdGhpcy5kYXRhQWRhcHRlci5kZXN0cm95KCk7XHJcbiAgICB0aGlzLnNlbGVjdGlvbi5kZXN0cm95KCk7XHJcbiAgICB0aGlzLmRyb3Bkb3duLmRlc3Ryb3koKTtcclxuICAgIHRoaXMucmVzdWx0cy5kZXN0cm95KCk7XHJcblxyXG4gICAgdGhpcy5kYXRhQWRhcHRlciA9IG51bGw7XHJcbiAgICB0aGlzLnNlbGVjdGlvbiA9IG51bGw7XHJcbiAgICB0aGlzLmRyb3Bkb3duID0gbnVsbDtcclxuICAgIHRoaXMucmVzdWx0cyA9IG51bGw7XHJcbiAgfTtcclxuXHJcbiAgU2VsZWN0Mi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRjb250YWluZXIgPSAkKFxyXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyIHNlbGVjdDItY29udGFpbmVyXCI+JyArXHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0aW9uXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cImRyb3Bkb3duLXdyYXBwZXJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+JyArXHJcbiAgICAgICc8L3NwYW4+J1xyXG4gICAgKTtcclxuXHJcbiAgICAkY29udGFpbmVyLmF0dHIoJ2RpcicsIHRoaXMub3B0aW9ucy5nZXQoJ2RpcicpKTtcclxuXHJcbiAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xyXG5cclxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLScgKyB0aGlzLm9wdGlvbnMuZ2V0KCd0aGVtZScpKTtcclxuXHJcbiAgICBVdGlscy5TdG9yZURhdGEoJGNvbnRhaW5lclswXSwgJ2VsZW1lbnQnLCB0aGlzLiRlbGVtZW50KTtcclxuXHJcbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcclxuICB9O1xyXG5cclxuICByZXR1cm4gU2VsZWN0MjtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ2pxdWVyeS1tb3VzZXdoZWVsJyxbXHJcbiAgJ2pxdWVyeSdcclxuXSwgZnVuY3Rpb24gKCQpIHtcclxuICAvLyBVc2VkIHRvIHNoaW0galF1ZXJ5Lm1vdXNld2hlZWwgZm9yIG5vbi1mdWxsIGJ1aWxkcy5cclxuICByZXR1cm4gJDtcclxufSk7XHJcblxyXG5TMi5kZWZpbmUoJ2pxdWVyeS5zZWxlY3QyJyxbXHJcbiAgJ2pxdWVyeScsXHJcbiAgJ2pxdWVyeS1tb3VzZXdoZWVsJyxcclxuXHJcbiAgJy4vc2VsZWN0Mi9jb3JlJyxcclxuICAnLi9zZWxlY3QyL2RlZmF1bHRzJyxcclxuICAnLi9zZWxlY3QyL3V0aWxzJ1xyXG5dLCBmdW5jdGlvbiAoJCwgXywgU2VsZWN0MiwgRGVmYXVsdHMsIFV0aWxzKSB7XHJcbiAgaWYgKCQuZm4uc2VsZWN0MiA9PSBudWxsKSB7XHJcbiAgICAvLyBBbGwgbWV0aG9kcyB0aGF0IHNob3VsZCByZXR1cm4gdGhlIGVsZW1lbnRcclxuICAgIHZhciB0aGlzTWV0aG9kcyA9IFsnb3BlbicsICdjbG9zZScsICdkZXN0cm95J107XHJcblxyXG4gICAgJC5mbi5zZWxlY3QyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBpbnN0YW5jZU9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFNlbGVjdDIoJCh0aGlzKSwgaW5zdGFuY2VPcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdmFyIHJldDtcclxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBVdGlscy5HZXREYXRhKHRoaXMsICdzZWxlY3QyJyk7XHJcblxyXG4gICAgICAgICAgaWYgKGluc3RhbmNlID09IG51bGwgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICAgICdUaGUgc2VsZWN0MihcXCcnICsgb3B0aW9ucyArICdcXCcpIG1ldGhvZCB3YXMgY2FsbGVkIG9uIGFuICcgK1xyXG4gICAgICAgICAgICAgICdlbGVtZW50IHRoYXQgaXMgbm90IHVzaW5nIFNlbGVjdDIuJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldCA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIGJlIHJldHVybmluZyBgdGhpc2BcclxuICAgICAgICBpZiAoJC5pbkFycmF5KG9wdGlvbnMsIHRoaXNNZXRob2RzKSA+IC0xKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50cyBmb3IgU2VsZWN0MjogJyArIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaWYgKCQuZm4uc2VsZWN0Mi5kZWZhdWx0cyA9PSBudWxsKSB7XHJcbiAgICAkLmZuLnNlbGVjdDIuZGVmYXVsdHMgPSBEZWZhdWx0cztcclxuICB9XHJcblxyXG4gIHJldHVybiBTZWxlY3QyO1xyXG59KTtcclxuXHJcbiAgLy8gUmV0dXJuIHRoZSBBTUQgbG9hZGVyIGNvbmZpZ3VyYXRpb24gc28gaXQgY2FuIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGlzIGZpbGVcclxuICByZXR1cm4ge1xyXG4gICAgZGVmaW5lOiBTMi5kZWZpbmUsXHJcbiAgICByZXF1aXJlOiBTMi5yZXF1aXJlXHJcbiAgfTtcclxufSgpKTtcclxuXHJcbiAgLy8gQXV0b2xvYWQgdGhlIGpRdWVyeSBiaW5kaW5nc1xyXG4gIC8vIFdlIGtub3cgdGhhdCBhbGwgb2YgdGhlIG1vZHVsZXMgZXhpc3QgYWJvdmUgdGhpcywgc28gd2UncmUgc2FmZVxyXG4gIHZhciBzZWxlY3QyID0gUzIucmVxdWlyZSgnanF1ZXJ5LnNlbGVjdDInKTtcclxuXHJcbiAgLy8gSG9sZCB0aGUgQU1EIG1vZHVsZSByZWZlcmVuY2VzIG9uIHRoZSBqUXVlcnkgZnVuY3Rpb24gdGhhdCB3YXMganVzdCBsb2FkZWRcclxuICAvLyBUaGlzIGFsbG93cyBTZWxlY3QyIHRvIHVzZSB0aGUgaW50ZXJuYWwgbG9hZGVyIG91dHNpZGUgb2YgdGhpcyBmaWxlLCBzdWNoXHJcbiAgLy8gYXMgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLlxyXG4gIGpRdWVyeS5mbi5zZWxlY3QyLmFtZCA9IFMyO1xyXG5cclxuICAvLyBSZXR1cm4gdGhlIFNlbGVjdDIgaW5zdGFuY2UgZm9yIGFueW9uZSB3aG8gaXMgaW1wb3J0aW5nIGl0LlxyXG4gIHJldHVybiBzZWxlY3QyO1xyXG59KSk7XHJcbiIsIi8qXHJcbiAgICAgXyBfICAgICAgXyAgICAgICBfXHJcbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xyXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XHJcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXHJcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xyXG4gICAgICAgICAgICAgICAgICAgfF9fL1xyXG5cclxuIFZlcnNpb246IDEuNS44XHJcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXHJcbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcclxuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcclxuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXHJcblxyXG4gKi9cclxuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xyXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xyXG4gICAgfVxyXG5cclxufShmdW5jdGlvbigkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XHJcblxyXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZVVpZCA9IDA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcclxuXHJcbiAgICAgICAgICAgIF8uZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiAkKGVsZW1lbnQpLFxyXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXHJcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXHJcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLXJlcXVpcmVkPVwiZmFsc2VcIiB0YWJpbmRleD1cIjBcIj4nICsgKGkgKyAxKSArICc8L2J1dHRvbj4nO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxyXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxyXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxyXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXHJcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcm93czogMSxcclxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXHJcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcclxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxyXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcclxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogbnVsbCxcclxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcclxuICAgICAgICAgICAgICAgIHNsaWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAkbGlzdDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVuc2xpY2tlZDogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMpO1xyXG5cclxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcclxuICAgICAgICAgICAgXy5hbmltVHlwZSA9IG51bGw7XHJcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xyXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XHJcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzID0gW107XHJcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgXy5wb3NpdGlvblByb3AgPSBudWxsO1xyXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XHJcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xyXG4gICAgICAgICAgICBfLnNob3VsZENsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcclxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xyXG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcclxuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gMDtcclxuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBkYXRhU2V0dGluZ3MgPSAkKGVsZW1lbnQpLmRhdGEoJ3NsaWNrJykgfHwge307XHJcblxyXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgZGF0YVNldHRpbmdzLCBzZXR0aW5ncyk7XHJcblxyXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XHJcblxyXG4gICAgICAgICAgICBfLm9yaWdpbmFsU2V0dGluZ3MgPSBfLm9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ21vekhpZGRlbic7XHJcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XHJcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xyXG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XHJcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xyXG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xyXG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XHJcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xyXG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xyXG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcclxuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xyXG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XHJcblxyXG4gICAgICAgICAgICBfLmluc3RhbmNlVWlkID0gaW5zdGFuY2VVaWQrKztcclxuXHJcbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXHJcbiAgICAgICAgICAgIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uIChtdXN0IHN0YXJ0IHdpdGggPClcclxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxyXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xyXG5cclxuXHJcbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xyXG4gICAgICAgICAgICBfLmluaXQodHJ1ZSk7XHJcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBTbGljaztcclxuXHJcbiAgICB9KCkpO1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgYWRkQmVmb3JlID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcclxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLnVubG9hZCgpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIF8uJHNsaWRlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcclxuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRCZWZvcmUoXy4kc2xpZGVzLmVxKGluZGV4KSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcclxuXHJcbiAgICAgICAgXy5yZWluaXQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xyXG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHRcclxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xyXG5cclxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXHJcbiAgICAgICAgICAgIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0XHJcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XHJcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtKF8uY3VycmVudExlZnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJCh7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiBfLmN1cnJlbnRMZWZ0XHJcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcclxuICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoMHB4LCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgpJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xyXG5cclxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xyXG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xyXG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ucGF1c2VkICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKF8uYXV0b1BsYXlJdGVyYXRvcixcclxuICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheVNwZWVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uZGlyZWN0aW9uID09PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKChfLmN1cnJlbnRTbGlkZSArIDEpID09PSBfLnNsaWRlQ291bnQgLVxyXG4gICAgICAgICAgICAgICAgICAgIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZEFycm93cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xyXG5cclxuICAgICAgICAgICAgXy4kcHJldkFycm93ID0gJChfLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcclxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZCggXy4kbmV4dEFycm93IClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGksIGRvdFN0cmluZztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIGRvdFN0cmluZyA9ICc8dWwgY2xhc3M9XCInICsgXy5vcHRpb25zLmRvdHNDbGFzcyArICdcIj4nO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgZG90U3RyaW5nICs9ICc8bGk+JyArIF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSArICc8L2xpPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvdFN0cmluZyArPSAnPC91bD4nO1xyXG5cclxuICAgICAgICAgICAgXy4kZG90cyA9ICQoZG90U3RyaW5nKS5hcHBlbmRUbyhcclxuICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcclxuXHJcbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXMgPVxyXG4gICAgICAgICAgICBfLiRzbGlkZXJcclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xyXG5cclxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoJ29yaWdpbmFsU3R5bGluZycsICQoZWxlbWVudCkuYXR0cignc3R5bGUnKSB8fCAnJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stc2xpZGVyJyk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XHJcbiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhfLiRzbGlkZXIpIDpcclxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcclxuXHJcbiAgICAgICAgXy4kbGlzdCA9IF8uJHNsaWRlVHJhY2sud3JhcChcclxuICAgICAgICAgICAgJzxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xyXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XHJcblxyXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xyXG5cclxuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XHJcblxyXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XHJcblxyXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xyXG5cclxuXHJcbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZFJvd3MgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xyXG5cclxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XHJcblxyXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xyXG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihjID0gMDsgYyA8IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3c7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChyb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVyLmh0bWwobmV3U2xpZGVzKTtcclxuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOigxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArICclJyxcclxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XHJcblxyXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcclxuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xyXG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcclxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXHJcbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYnJlYWtwb2ludCcsIFtfLCB0cmlnZ2VyQnJlYWtwb2ludF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24oZXZlbnQsIGRvbnRBbmltYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KSxcclxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XHJcblxyXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXHJcbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgbm90IHRoZSA8bGk+IGVsZW1lbnQgKGllOiBhIGNoaWxkKSwgZmluZCB0aGUgPGxpPi5cclxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xyXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XHJcbiAgICAgICAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKF8uc2xpZGVDb3VudCAtIF8uY3VycmVudFNsaWRlKSAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcclxuXHJcbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcclxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxyXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IGluZGV4T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdpbmRleCc6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XHJcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XHJcblxyXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcclxuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcclxuICAgICAgICBpZiAoaW5kZXggPiBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV0pIHtcclxuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleDtcclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgJiYgXy5vcHRpb25zLmF1dG9wbGF5ID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uc2V0UGF1c2VkLCBfLCB0cnVlKSlcclxuICAgICAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLnNldFBhdXNlZCwgXywgZmFsc2UpKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xyXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcclxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcclxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcclxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXy52aXNpYmlsaXR5Q2hhbmdlLCBfLnZpc2liaWxpdHkpO1xyXG5cclxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5zZXRQYXVzZWQsIF8sIHRydWUpKTtcclxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5zZXRQYXVzZWQsIF8sIGZhbHNlKSk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcclxuXHJcbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcclxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ3JlYWR5LnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XHJcblxyXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMSkge1xyXG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlci5odG1sKG9yaWdpbmFsU2xpZGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xyXG5cclxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XHJcblxyXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xyXG5cclxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcclxuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgXy4kcHJldkFycm93XHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXHJcbiAgICAgICAgICAgICAgICAuY3NzKFwiZGlzcGxheVwiLFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xyXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgXy4kbmV4dEFycm93XHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXHJcbiAgICAgICAgICAgICAgICAuY3NzKFwiZGlzcGxheVwiLFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xyXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChfLiRzbGlkZXMpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlc1xyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxyXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZGV0YWNoKCk7XHJcblxyXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xyXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcclxuXHJcbiAgICAgICAgXy51bnNsaWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZighcmVmcmVzaCkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XHJcblxyXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XHJcblxyXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XHJcblxyXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XHJcblxyXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xyXG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcclxuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xyXG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gXy5zbGlkZUNvdW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xyXG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcclxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxyXG4gICAgICAgICAgICB0YXJnZXRTbGlkZTtcclxuXHJcbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XHJcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCA+IF8uc2xpZGVDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcclxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXHJcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxyXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXHJcbiAgICAgICAgICAgIG1heDtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcclxuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xyXG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcclxuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xyXG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcclxuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXhlcztcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xyXG5cclxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcclxuXHJcbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcclxuXHJcbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XHJcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcclxuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xyXG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xyXG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcclxuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XHJcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5pbml0QURBKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdjbGljay5zbGljaycsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcclxuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5vbignY2xpY2suc2xpY2snLCB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcclxuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcclxuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgJiYgXy5vcHRpb25zLmF1dG9wbGF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcclxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5zZXRQYXVzZWQsIF8sIHRydWUpKVxyXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLnNldFBhdXNlZCwgXywgZmFsc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XHJcblxyXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xyXG5cclxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIHtcclxuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXHJcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXHJcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xyXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcclxuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XHJcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIHtcclxuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xyXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF8udmlzaWJpbGl0eUNoYW5nZSwgJC5wcm94eShfLnZpc2liaWxpdHksIF8pKTtcclxuXHJcbiAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5zZXRQYXVzZWQsIF8sIHRydWUpKTtcclxuICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLnNldFBhdXNlZCwgXywgZmFsc2UpKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XHJcblxyXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ucmVzaXplLCBfKSk7XHJcblxyXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xyXG5cclxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgXy4kcHJldkFycm93LnNob3coKTtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hdXRvcGxheSA9PT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxyXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcclxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcclxuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHJhbmdlRW5kKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XHJcbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xyXG5cclxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcclxuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcclxuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XHJcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcclxuXHJcbiAgICAgICAgXy5pbml0VUkoKTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xyXG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XHJcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcclxuICAgICAgICBfLnBhdXNlZCA9IHRydWU7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIF8uYXV0b1BsYXkoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xyXG5cclxuICAgICAgICBfLmFuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hdXRvcGxheSA9PT0gdHJ1ZSAmJiBfLnBhdXNlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgXy5pbml0QURBKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGltZ0NvdW50LCB0YXJnZXRJbWFnZTtcclxuXHJcbiAgICAgICAgaW1nQ291bnQgPSAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoaW1nQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldEltYWdlID0gJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLmZpcnN0KCk7XHJcbiAgICAgICAgICAgIHRhcmdldEltYWdlLmF0dHIoJ3NyYycsIG51bGwpO1xyXG4gICAgICAgICAgICB0YXJnZXRJbWFnZS5hdHRyKCdzcmMnLCB0YXJnZXRJbWFnZS5hdHRyKCdkYXRhLWxhenknKSkucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKS5sb2FkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEltYWdlLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEltYWdlLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgZmlyc3RWaXNpYmxlO1xyXG5cclxuICAgICAgICBmaXJzdFZpc2libGUgPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xyXG5cclxuICAgICAgICAvLyBjaGVjayB0aGF0IHRoZSBuZXcgYnJlYWtwb2ludCBjYW4gYWN0dWFsbHkgYWNjZXB0IHRoZVxyXG4gICAgICAgIC8vIFwiY3VycmVudCBzbGlkZVwiIGFzIHRoZSBjdXJyZW50IHNsaWRlLCBvdGhlcndpc2Ugd2UgbmVlZFxyXG4gICAgICAgIC8vIHRvIHNldCBpdCB0byB0aGUgY2xvc2VzdCBwb3NzaWJsZSB2YWx1ZS5cclxuICAgICAgICBpZiAoICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XHJcbiAgICAgICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XHJcbiAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIF8uY3VycmVudFNsaWRlID4gZmlyc3RWaXNpYmxlICkge1xyXG4gICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBmaXJzdFZpc2libGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICBjdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcclxuXHJcbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xyXG5cclxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xyXG5cclxuICAgICAgICBfLmluaXQoKTtcclxuXHJcbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XHJcblxyXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xyXG5cclxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSBcImFycmF5XCIgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcclxuXHJcbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZVNldHRpbmdzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lcyB3aXRoIHRoZSBzYW1lIGJyZWFrcG9pbnQgbnVtYmVyLCB3ZSBkb24ndCB3YW50IGR1cGVzLlxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5zcGxpY2UobCwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW2N1cnJlbnRCcmVha3BvaW50XSA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgXy4kc2xpZGVzID1cclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcclxuXHJcbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xyXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xyXG5cclxuICAgICAgICBfLnNldFByb3BzKCk7XHJcbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XHJcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xyXG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XHJcbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcclxuICAgICAgICBfLmJ1aWxkRG90cygpO1xyXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xyXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xyXG5cclxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKDApO1xyXG5cclxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdyZUluaXQnLCBbX10pO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XHJcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcclxuICAgICAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cclxuICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnJlbW92ZVNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgsIHJlbW92ZUJlZm9yZSwgcmVtb3ZlQWxsKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcclxuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAwIDogXy5zbGlkZUNvdW50IC0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy51bmxvYWQoKTtcclxuXHJcbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcclxuXHJcbiAgICAgICAgXy5yZWluaXQoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcclxuICAgICAgICAgICAgeCwgeTtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSAtcG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xyXG4gICAgICAgIHkgPSBfLnBvc2l0aW9uUHJvcCA9PSAndG9wJyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XHJcblxyXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XHJcblxyXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XHJcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArIHggKyAnLCAnICsgeSArICcpJztcclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgeCArICcsICcgKyB5ICsgJywgMHB4KSc7XHJcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfLiRsaXN0LmhlaWdodChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoXy5vcHRpb25zLmNlbnRlclBhZGRpbmcgKyAnIDBweCcpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XHJcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcclxuXHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlICYmIF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcclxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkgXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykud2lkdGgoXy5zbGlkZVdpZHRoIC0gb2Zmc2V0KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcclxuXHJcbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkuY3NzKHtcclxuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcclxuICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xyXG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW07XHJcblxyXG4gICAgICAgIGlmKCBvcHRpb24gPT09IFwicmVzcG9uc2l2ZVwiICYmICQudHlwZSh2YWx1ZSkgPT09IFwiYXJyYXlcIiApIHtcclxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcclxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09IFwiYXJyYXlcIiApIHtcclxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSA9IFsgdmFsdWVbaXRlbV0gXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbCA9IF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgcmVzcG9uc2l2ZSBvYmplY3QgYW5kIHNwbGljZSBvdXQgZHVwbGljYXRlcy5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVmcmVzaCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xyXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIF8uc2V0RGltZW5zaW9ucygpO1xyXG5cclxuICAgICAgICBfLnNldEhlaWdodCgpO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XHJcblxyXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XHJcblxyXG4gICAgICAgIGlmIChfLnBvc2l0aW9uUHJvcCA9PT0gJ3RvcCcpIHtcclxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stdmVydGljYWwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib2R5U3R5bGUuV2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudXNlQ1NTID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcclxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgXy5vcHRpb25zLnpJbmRleCA9PT0gJ251bWJlcicgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib2R5U3R5bGUuT1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ09UcmFuc2l0aW9uJztcclxuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvZHlTdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnTW96VHJhbnNpdGlvbic7XHJcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChib2R5U3R5bGUud2Via2l0VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3dlYmtpdFRyYW5zaXRpb24nO1xyXG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcclxuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdtc1RyYW5zaXRpb24nO1xyXG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvZHlTdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XHJcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xyXG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3RyYW5zaXRpb24nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQsIGFsbFNsaWRlcywgaW5kZXhPZmZzZXQsIHJlbWFpbmRlcjtcclxuXHJcbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXHJcbiAgICAgICAgICAgIC5maW5kKCcuc2xpY2stc2xpZGUnKVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblxyXG4gICAgICAgIF8uJHNsaWRlc1xyXG4gICAgICAgICAgICAuZXEoaW5kZXgpXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY3VycmVudCcpO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy4kc2xpZGVzXHJcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXHJcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcpIHtcclxuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xyXG5cclxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQpOyBpIC09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5maW5pdGVDb3VudDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFBhdXNlZCA9IGZ1bmN0aW9uKHBhdXNlZCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXV0b3BsYXkgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Ib3ZlciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnBhdXNlZCA9IHBhdXNlZDtcclxuICAgICAgICAgICAgaWYgKCFwYXVzZWQpIHtcclxuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxyXG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cclxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XHJcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XHJcblxyXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSAwO1xyXG5cclxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKGluZGV4KTtcclxuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24oaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XHJcblxyXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcclxuICAgICAgICAgICAgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XHJcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcclxuXHJcbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xyXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmF1dG9wbGF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XHJcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZSAtIF8uc2xpZGVDb3VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcclxuXHJcbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcclxuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcclxuXHJcbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xyXG5cclxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcclxuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XHJcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcclxuXHJcbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGUsIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xyXG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XHJcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcclxuXHJcbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xyXG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xyXG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMzUpICYmIChzd2lwZUFuZ2xlIDw9IDEzNSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnbGVmdCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JpZ2h0JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIHNsaWRlQ291bnQ7XHJcblxyXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgXy5zaG91bGRDbGljayA9IChfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTApID8gZmFsc2UgOiB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUpIHtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoXy5zd2lwZURpcmVjdGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID0gXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/IF8uY2hlY2tOYXZpZ2FibGUoXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSkgOiBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKHNsaWRlQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCAnbGVmdCddKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPyBfLmNoZWNrTmF2aWdhYmxlKF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkpIDogXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihzbGlkZUNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc3dpcGUnLCBbXywgJ3JpZ2h0J10pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clgpIHtcclxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlKTtcclxuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cclxuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xyXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcclxuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcclxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxyXG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxyXG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzO1xyXG5cclxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xyXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xyXG5cclxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXHJcbiAgICAgICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAoc3dpcGVEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcclxuXHJcbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XHJcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxyXG4gICAgICAgICAgICB0b3VjaGVzO1xyXG5cclxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xyXG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcclxuXHJcbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tVbmZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgXy51bmxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xyXG5cclxuICAgICAgICAgICAgXy5yZWluaXQoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcblxyXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBpZiAoXy4kZG90cykge1xyXG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcclxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcclxuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy4kc2xpZGVzXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcclxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xyXG4gICAgICAgIF8uZGVzdHJveSgpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZUFycm93cyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMsXHJcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcclxuXHJcbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XHJcblxyXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXHJcbiAgICAgICAgICAgICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XHJcblxyXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSAxICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgXy4kZG90c1xyXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblxyXG4gICAgICAgICAgICBfLiRkb3RzXHJcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxyXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50W18uaGlkZGVuXSkge1xyXG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYXV0b3BsYXkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xyXG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXHJcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcclxuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcclxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLiRzbGlkZVRyYWNrLmF0dHIoJ3JvbGUnLCAnbGlzdGJveCcpO1xyXG5cclxuICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcclxuICAgICAgICAgICAgICAgICdyb2xlJzogJ29wdGlvbicsXHJcbiAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSArICcnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfLiRkb3RzLmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xyXG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ25hdmlnYXRpb24nICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJyxcclxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuZmlyc3QoKS5hdHRyKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKS5lbmQoKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2J1dHRvbicpLmF0dHIoJ3JvbGUnLCAnYnV0dG9uJykuZW5kKClcclxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCdkaXYnKS5hdHRyKCdyb2xlJywgJ3Rvb2xiYXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xyXG5cclxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcclxuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xyXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xyXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXM7XHJcbiAgICAgICAgXy4kc2xpZGVyLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJywgJyonLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgdmFyIHNmID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfLmlzUGxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZi5pcygnOmZvY3VzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcyxcclxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxyXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcclxuICAgICAgICAgICAgbCA9IF8ubGVuZ3RoLFxyXG4gICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICByZXQ7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXztcclxuICAgIH07XHJcblxyXG59KSk7XHJcbiJdfQ==
